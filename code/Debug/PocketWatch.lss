
PocketWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  000010f6  0000118a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800196  00800196  00001220  2**0
                  ALLOC
  3 .stab         00000864  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014c  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000148  00000000  00000000  00001bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152a  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c0  00000000  00000000  00003242  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca3  00000000  00000000  00003502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000041a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e44  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000054f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_3>
      10:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_4>
      14:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_5>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_10>
      2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_11>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000058 <__ctors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf ef       	ldi	r28, 0xFF	; 255
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	11 e0       	ldi	r17, 0x01	; 1
      66:	a0 e0       	ldi	r26, 0x00	; 0
      68:	b1 e0       	ldi	r27, 0x01	; 1
      6a:	e6 ef       	ldi	r30, 0xF6	; 246
      6c:	f0 e1       	ldi	r31, 0x10	; 16
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	a6 39       	cpi	r26, 0x96	; 150
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a6 e9       	ldi	r26, 0x96	; 150
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	aa 3a       	cpi	r26, 0xAA	; 170
      86:	b1 07       	cpc	r27, r17
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>
      8a:	0e 94 a4 02 	call	0x548	; 0x548 <main>
      8e:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <set_hour_led>:
volatile uint8_t* last_led_port;
volatile uint8_t* last_led_ddr;
volatile uint8_t last_led_pin;

void set_hour_led(int8_t number)
{
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
      a0:	e0 91 99 01 	lds	r30, 0x0199
      a4:	f0 91 9a 01 	lds	r31, 0x019A
      a8:	20 81       	ld	r18, Z
      aa:	90 91 a3 01 	lds	r25, 0x01A3
      ae:	90 95       	com	r25
      b0:	92 23       	and	r25, r18
      b2:	90 83       	st	Z, r25
	*last_led_ddr &= ~last_led_pin;
      b4:	e0 91 a6 01 	lds	r30, 0x01A6
      b8:	f0 91 a7 01 	lds	r31, 0x01A7
      bc:	20 81       	ld	r18, Z
      be:	90 91 a3 01 	lds	r25, 0x01A3
      c2:	90 95       	com	r25
      c4:	92 23       	and	r25, r18
      c6:	90 83       	st	Z, r25
	
	if (number >= 0)
      c8:	87 fd       	sbrc	r24, 7
      ca:	3c c0       	rjmp	.+120    	; 0x144 <set_hour_led+0xae>
	{
		// put the ring low
		PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_HOUR)) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
      cc:	91 b3       	in	r25, 0x11	; 17
      ce:	98 7c       	andi	r25, 0xC8	; 200
      d0:	93 63       	ori	r25, 0x33	; 51
      d2:	91 bb       	out	0x11, r25	; 17

		// calculate appropriate index
		idx = (number % 12) * 5;
      d4:	6c e0       	ldi	r22, 0x0C	; 12
      d6:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divmodqi4>
      da:	89 2f       	mov	r24, r25
      dc:	88 0f       	add	r24, r24
      de:	88 0f       	add	r24, r24
      e0:	89 0f       	add	r24, r25
      e2:	89 83       	std	Y+1, r24	; 0x01
		idx /= 2;
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	86 95       	lsr	r24
      e8:	89 83       	std	Y+1, r24	; 0x01

		// set the LED on and remember which one
		last_led_port = portx[idx];
      ea:	e9 81       	ldd	r30, Y+1	; 0x01
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	ee 0f       	add	r30, r30
      f0:	ff 1f       	adc	r31, r31
      f2:	e6 5a       	subi	r30, 0xA6	; 166
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	a0 81       	ld	r26, Z
      f8:	b1 81       	ldd	r27, Z+1	; 0x01
      fa:	b0 93 9a 01 	sts	0x019A, r27
      fe:	a0 93 99 01 	sts	0x0199, r26
		last_led_ddr = ddrx[idx];
     102:	e9 81       	ldd	r30, Y+1	; 0x01
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	e2 5e       	subi	r30, 0xE2	; 226
     10c:	fe 4f       	sbci	r31, 0xFE	; 254
     10e:	80 81       	ld	r24, Z
     110:	91 81       	ldd	r25, Z+1	; 0x01
     112:	90 93 a7 01 	sts	0x01A7, r25
     116:	80 93 a6 01 	sts	0x01A6, r24
		last_led_pin = pins[idx];
     11a:	e9 81       	ldd	r30, Y+1	; 0x01
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	e0 50       	subi	r30, 0x00	; 0
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	80 81       	ld	r24, Z
     124:	80 93 a3 01 	sts	0x01A3, r24
		*last_led_port |= last_led_pin;
     128:	8c 91       	ld	r24, X
     12a:	90 91 a3 01 	lds	r25, 0x01A3
     12e:	89 2b       	or	r24, r25
     130:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     132:	e0 91 a6 01 	lds	r30, 0x01A6
     136:	f0 91 a7 01 	lds	r31, 0x01A7
     13a:	80 81       	ld	r24, Z
     13c:	90 91 a3 01 	lds	r25, 0x01A3
     140:	89 2b       	or	r24, r25
     142:	80 83       	st	Z, r24
	}
}
     144:	0f 90       	pop	r0
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <set_minute_led>:

void set_minute_led(int8_t number)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	00 d0       	rcall	.+0      	; 0x152 <set_minute_led+0x6>
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
     158:	e0 91 99 01 	lds	r30, 0x0199
     15c:	f0 91 9a 01 	lds	r31, 0x019A
     160:	90 81       	ld	r25, Z
     162:	80 91 a3 01 	lds	r24, 0x01A3
     166:	80 95       	com	r24
     168:	89 23       	and	r24, r25
     16a:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     16c:	e0 91 a6 01 	lds	r30, 0x01A6
     170:	f0 91 a7 01 	lds	r31, 0x01A7
     174:	90 81       	ld	r25, Z
     176:	80 91 a3 01 	lds	r24, 0x01A3
     17a:	80 95       	com	r24
     17c:	89 23       	and	r24, r25
     17e:	80 83       	st	Z, r24
	
	if (number >= 0)
     180:	8a 81       	ldd	r24, Y+2	; 0x02
     182:	87 fd       	sbrc	r24, 7
     184:	40 c0       	rjmp	.+128    	; 0x206 <set_minute_led+0xba>
	{
		// put the ring low, depending on which one is needed
		if (bit_is_clear(number, 0))
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	80 fd       	sbrc	r24, 0
     18a:	04 c0       	rjmp	.+8      	; 0x194 <set_minute_led+0x48>
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_MINUTE_EVEN)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_MINUTE_ODD) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
     18c:	81 b3       	in	r24, 0x11	; 17
     18e:	88 7c       	andi	r24, 0xC8	; 200
     190:	87 61       	ori	r24, 0x17	; 23
     192:	03 c0       	rjmp	.+6      	; 0x19a <set_minute_led+0x4e>
		}
		else
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_MINUTE_ODD)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
     194:	81 b3       	in	r24, 0x11	; 17
     196:	88 7c       	andi	r24, 0xC8	; 200
     198:	87 62       	ori	r24, 0x27	; 39
     19a:	81 bb       	out	0x11, r24	; 17
		}
		
		// calculate appropriate index
		idx = number % 60;
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	6c e3       	ldi	r22, 0x3C	; 60
     1a0:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divmodqi4>
     1a4:	99 83       	std	Y+1, r25	; 0x01
		idx /= 2;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	86 95       	lsr	r24
     1aa:	89 83       	std	Y+1, r24	; 0x01
		
		// set the LED on and remember which one
		last_led_port = portx[idx];
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e6 5a       	subi	r30, 0xA6	; 166
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	a0 81       	ld	r26, Z
     1ba:	b1 81       	ldd	r27, Z+1	; 0x01
     1bc:	b0 93 9a 01 	sts	0x019A, r27
     1c0:	a0 93 99 01 	sts	0x0199, r26
		last_led_ddr = ddrx[idx];
     1c4:	e9 81       	ldd	r30, Y+1	; 0x01
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	e2 5e       	subi	r30, 0xE2	; 226
     1ce:	fe 4f       	sbci	r31, 0xFE	; 254
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	90 93 a7 01 	sts	0x01A7, r25
     1d8:	80 93 a6 01 	sts	0x01A6, r24
		last_led_pin = pins[idx];
     1dc:	e9 81       	ldd	r30, Y+1	; 0x01
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	e0 50       	subi	r30, 0x00	; 0
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	80 81       	ld	r24, Z
     1e6:	80 93 a3 01 	sts	0x01A3, r24
		*last_led_port |= last_led_pin;
     1ea:	8c 91       	ld	r24, X
     1ec:	90 91 a3 01 	lds	r25, 0x01A3
     1f0:	89 2b       	or	r24, r25
     1f2:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     1f4:	e0 91 a6 01 	lds	r30, 0x01A6
     1f8:	f0 91 a7 01 	lds	r31, 0x01A7
     1fc:	80 81       	ld	r24, Z
     1fe:	90 91 a3 01 	lds	r25, 0x01A3
     202:	89 2b       	or	r24, r25
     204:	80 83       	st	Z, r24
	}
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <set_second_led>:

void set_second_led(int8_t number)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <set_second_led+0x6>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
     21c:	e0 91 99 01 	lds	r30, 0x0199
     220:	f0 91 9a 01 	lds	r31, 0x019A
     224:	90 81       	ld	r25, Z
     226:	80 91 a3 01 	lds	r24, 0x01A3
     22a:	80 95       	com	r24
     22c:	89 23       	and	r24, r25
     22e:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     230:	e0 91 a6 01 	lds	r30, 0x01A6
     234:	f0 91 a7 01 	lds	r31, 0x01A7
     238:	90 81       	ld	r25, Z
     23a:	80 91 a3 01 	lds	r24, 0x01A3
     23e:	80 95       	com	r24
     240:	89 23       	and	r24, r25
     242:	80 83       	st	Z, r24
	
	if (number >= 0)
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	87 fd       	sbrc	r24, 7
     248:	40 c0       	rjmp	.+128    	; 0x2ca <set_second_led+0xba>
	{
		// put the ring low, depending on which one is needed
		if (bit_is_clear(number, 0))
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	80 fd       	sbrc	r24, 0
     24e:	04 c0       	rjmp	.+8      	; 0x258 <set_second_led+0x48>
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_SECOND_EVEN)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     250:	81 b3       	in	r24, 0x11	; 17
     252:	88 7c       	andi	r24, 0xC8	; 200
     254:	85 63       	ori	r24, 0x35	; 53
     256:	03 c0       	rjmp	.+6      	; 0x25e <set_second_led+0x4e>
		}
		else
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_SECOND_ODD)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     258:	81 b3       	in	r24, 0x11	; 17
     25a:	88 7c       	andi	r24, 0xC8	; 200
     25c:	86 63       	ori	r24, 0x36	; 54
     25e:	81 bb       	out	0x11, r24	; 17
		}
		
		// calculate appropriate index
		idx = number % 60;
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	6c e3       	ldi	r22, 0x3C	; 60
     264:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divmodqi4>
     268:	99 83       	std	Y+1, r25	; 0x01
		idx /= 2;
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	86 95       	lsr	r24
     26e:	89 83       	std	Y+1, r24	; 0x01
		
		// set the LED on and remember which one
		last_led_port = portx[idx];
     270:	e9 81       	ldd	r30, Y+1	; 0x01
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e6 5a       	subi	r30, 0xA6	; 166
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	a0 81       	ld	r26, Z
     27e:	b1 81       	ldd	r27, Z+1	; 0x01
     280:	b0 93 9a 01 	sts	0x019A, r27
     284:	a0 93 99 01 	sts	0x0199, r26
		last_led_ddr = ddrx[idx];
     288:	e9 81       	ldd	r30, Y+1	; 0x01
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ee 0f       	add	r30, r30
     28e:	ff 1f       	adc	r31, r31
     290:	e2 5e       	subi	r30, 0xE2	; 226
     292:	fe 4f       	sbci	r31, 0xFE	; 254
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	90 93 a7 01 	sts	0x01A7, r25
     29c:	80 93 a6 01 	sts	0x01A6, r24
		last_led_pin = pins[idx];
     2a0:	e9 81       	ldd	r30, Y+1	; 0x01
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	e0 50       	subi	r30, 0x00	; 0
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	80 81       	ld	r24, Z
     2aa:	80 93 a3 01 	sts	0x01A3, r24
		*last_led_port |= last_led_pin;
     2ae:	8c 91       	ld	r24, X
     2b0:	90 91 a3 01 	lds	r25, 0x01A3
     2b4:	89 2b       	or	r24, r25
     2b6:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     2b8:	e0 91 a6 01 	lds	r30, 0x01A6
     2bc:	f0 91 a7 01 	lds	r31, 0x01A7
     2c0:	80 81       	ld	r24, Z
     2c2:	90 91 a3 01 	lds	r25, 0x01A3
     2c6:	89 2b       	or	r24, r25
     2c8:	80 83       	st	Z, r24
	}
}
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <clear_leds>:

void clear_leds()
{
	// turn off all the LEDs
	*last_led_port &= ~last_led_pin;
     2d4:	e0 91 99 01 	lds	r30, 0x0199
     2d8:	f0 91 9a 01 	lds	r31, 0x019A
     2dc:	90 81       	ld	r25, Z
     2de:	80 91 a3 01 	lds	r24, 0x01A3
     2e2:	80 95       	com	r24
     2e4:	89 23       	and	r24, r25
     2e6:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     2e8:	e0 91 a6 01 	lds	r30, 0x01A6
     2ec:	f0 91 a7 01 	lds	r31, 0x01A7
     2f0:	90 81       	ld	r25, Z
     2f2:	80 91 a3 01 	lds	r24, 0x01A3
     2f6:	80 95       	com	r24
     2f8:	89 23       	and	r24, r25
     2fa:	80 83       	st	Z, r24
	PORTx_RINGS = PORTx_RINGS | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     2fc:	81 b3       	in	r24, 0x11	; 17
     2fe:	87 63       	ori	r24, 0x37	; 55
     300:	81 bb       	out	0x11, r24	; 17
}
     302:	08 95       	ret

00000304 <__vector_5>:

volatile uint8_t to_sleep = 0;
volatile mode_t mode = MODE_SLEEPING;

ISR(TIMER2_OVF_vect)
{
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
	// one second event, add to time
	cur_second++;
     312:	80 91 a0 01 	lds	r24, 0x01A0
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 a0 01 	sts	0x01A0, r24
	if (cur_second >= 60)
     31c:	80 91 a0 01 	lds	r24, 0x01A0
     320:	8c 33       	cpi	r24, 0x3C	; 60
     322:	c0 f0       	brcs	.+48     	; 0x354 <__vector_5+0x50>
	{
		cur_second = 0;
     324:	10 92 a0 01 	sts	0x01A0, r1
		cur_minute++;
     328:	80 91 a1 01 	lds	r24, 0x01A1
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 a1 01 	sts	0x01A1, r24
		if (cur_minute >= 60)
     332:	80 91 a1 01 	lds	r24, 0x01A1
     336:	8c 33       	cpi	r24, 0x3C	; 60
     338:	68 f0       	brcs	.+26     	; 0x354 <__vector_5+0x50>
		{
			cur_minute = 0;
     33a:	10 92 a1 01 	sts	0x01A1, r1
			cur_hour++;
     33e:	80 91 9f 01 	lds	r24, 0x019F
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 9f 01 	sts	0x019F, r24
			if (cur_hour >= 24)
     348:	80 91 9f 01 	lds	r24, 0x019F
     34c:	88 31       	cpi	r24, 0x18	; 24
     34e:	10 f0       	brcs	.+4      	; 0x354 <__vector_5+0x50>
			{
				cur_hour = 0;
     350:	10 92 9f 01 	sts	0x019F, r1
			}
		}
	}
	
	if (battery_is_low() == 0 && (mode == MODE_CURTIME_SHOWING || mode == MODE_SHOW_ENTERING || alarm_active != 0))
     354:	13 9b       	sbis	0x02, 3	; 2
     356:	0c c0       	rjmp	.+24     	; 0x370 <__vector_5+0x6c>
     358:	80 91 97 01 	lds	r24, 0x0197
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	39 f0       	breq	.+14     	; 0x36e <__vector_5+0x6a>
     360:	80 91 97 01 	lds	r24, 0x0197
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	19 f0       	breq	.+6      	; 0x36e <__vector_5+0x6a>
     368:	80 91 a8 01 	lds	r24, 0x01A8
     36c:	81 11       	cpse	r24, r1
	{
		PORTx_MOTOR |= _BV(PIN_MOTOR); // turn on the motor
     36e:	16 9a       	sbi	0x02, 6	; 2
	}
	
	// check if alarm should go off
	if (alarm_enabled != 0 && alarm_hour == cur_hour && alarm_minute == cur_minute)
     370:	80 91 9d 01 	lds	r24, 0x019D
     374:	88 23       	and	r24, r24
     376:	01 f1       	breq	.+64     	; 0x3b8 <__vector_5+0xb4>
     378:	90 91 9c 01 	lds	r25, 0x019C
     37c:	80 91 9f 01 	lds	r24, 0x019F
     380:	98 17       	cp	r25, r24
     382:	d1 f4       	brne	.+52     	; 0x3b8 <__vector_5+0xb4>
     384:	90 91 a2 01 	lds	r25, 0x01A2
     388:	80 91 a1 01 	lds	r24, 0x01A1
     38c:	98 17       	cp	r25, r24
     38e:	a1 f4       	brne	.+40     	; 0x3b8 <__vector_5+0xb4>
	{
		if (alarm_already_off == 0)
     390:	80 91 9b 01 	lds	r24, 0x019B
     394:	88 23       	and	r24, r24
     396:	91 f4       	brne	.+36     	; 0x3bc <__vector_5+0xb8>
		{
			alarm_active = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 a8 01 	sts	0x01A8, r24
			alarm_already_off = 1;
     39e:	80 93 9b 01 	sts	0x019B, r24
			DDRx_BUZZER |= _BV(PIN_BUZZER);
     3a2:	0c 9a       	sbi	0x01, 4	; 1
			if (mode == MODE_SLEEPING)
     3a4:	80 91 97 01 	lds	r24, 0x0197
     3a8:	88 23       	and	r24, r24
     3aa:	41 f4       	brne	.+16     	; 0x3bc <__vector_5+0xb8>
			{
				mode = MODE_ALARMING;
     3ac:	89 e0       	ldi	r24, 0x09	; 9
     3ae:	80 93 97 01 	sts	0x0197, r24
				to_sleep = 0;
     3b2:	10 92 98 01 	sts	0x0198, r1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <__vector_5+0xb8>
			}
		}
	}
	else
	{
		alarm_already_off = 0;
     3b8:	10 92 9b 01 	sts	0x019B, r1
	}
	
	if (mode == MODE_SLEEPING)
     3bc:	80 91 97 01 	lds	r24, 0x0197
     3c0:	88 23       	and	r24, r24
     3c2:	19 f4       	brne	.+6      	; 0x3ca <__vector_5+0xc6>
	{
		// should go back to sleep, nothing to do
		to_sleep = 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 98 01 	sts	0x0198, r24
	}
}
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	8f 93       	push	r24
	if (alarm_active == 0)
     3e4:	80 91 a8 01 	lds	r24, 0x01A8
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <__vector_4+0x16>
	{
		PORTx_MOTOR &= ~_BV(PIN_MOTOR); // turn off motor
     3ec:	16 98       	cbi	0x02, 6	; 2
	}
}
     3ee:	8f 91       	pop	r24
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_11>:

volatile uint8_t animation_cnt;
volatile uint8_t ovf_cnt = 0;

ISR(TIMER0_OVF_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	ef 93       	push	r30
     41a:	ff 93       	push	r31
	// 2.05 KHz event
	
	if (alarm_active)
     41c:	80 91 a8 01 	lds	r24, 0x01A8
     420:	88 23       	and	r24, r24
     422:	19 f0       	breq	.+6      	; 0x42a <__vector_11+0x30>
	{
		// buzz the alarm buzzer, set pin high, use the compare match to set pin low for 4.1 KHz
		PORTx_BUZZER |= _BV(PIN_BUZZER);
     424:	14 9a       	sbi	0x02, 4	; 2
		if (battery_is_low() == 0) PORTx_MOTOR |= _BV(PIN_MOTOR);
     426:	13 99       	sbic	0x02, 3	; 2
     428:	16 9a       	sbi	0x02, 6	; 2
	}
	
	if (mode != 0 && mode != 7)
     42a:	80 91 97 01 	lds	r24, 0x0197
     42e:	88 23       	and	r24, r24
     430:	b1 f1       	breq	.+108    	; 0x49e <__vector_11+0xa4>
     432:	80 91 97 01 	lds	r24, 0x0197
     436:	87 30       	cpi	r24, 0x07	; 7
     438:	91 f1       	breq	.+100    	; 0x49e <__vector_11+0xa4>
	{
		// display LEDs if not sleeping

		uint8_t which_ring = ovf_cnt % 3; // each ring will only get 1/3 duty cycle
     43a:	80 91 96 01 	lds	r24, 0x0196
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
		
		if (which_ring == 0) // hour
     444:	99 23       	and	r25, r25
     446:	41 f4       	brne	.+16     	; 0x458 <__vector_11+0x5e>
		{
			set_hour_led(display_hour);
     448:	80 91 a4 01 	lds	r24, 0x01A4
     44c:	99 27       	eor	r25, r25
     44e:	87 fd       	sbrc	r24, 7
     450:	90 95       	com	r25
     452:	0e 94 4b 00 	call	0x96	; 0x96 <set_hour_led>
     456:	16 c0       	rjmp	.+44     	; 0x484 <__vector_11+0x8a>
		}
		else if (which_ring == 1) // minute
     458:	91 30       	cpi	r25, 0x01	; 1
     45a:	41 f4       	brne	.+16     	; 0x46c <__vector_11+0x72>
		{
			set_minute_led(display_minute);
     45c:	80 91 a9 01 	lds	r24, 0x01A9
     460:	99 27       	eor	r25, r25
     462:	87 fd       	sbrc	r24, 7
     464:	90 95       	com	r25
     466:	0e 94 a6 00 	call	0x14c	; 0x14c <set_minute_led>
     46a:	0c c0       	rjmp	.+24     	; 0x484 <__vector_11+0x8a>
		}
		else if (which_ring == 2) // second
		{
			set_second_led(display_second);
     46c:	80 91 a5 01 	lds	r24, 0x01A5
     470:	99 27       	eor	r25, r25
     472:	87 fd       	sbrc	r24, 7
     474:	90 95       	com	r25
     476:	0e 94 08 01 	call	0x210	; 0x210 <set_second_led>
			animation_cnt++;
     47a:	80 91 9e 01 	lds	r24, 0x019E
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	80 93 9e 01 	sts	0x019E, r24
		}
		
		if (ovf_cnt >= 125)
     484:	80 91 96 01 	lds	r24, 0x0196
     488:	8d 37       	cpi	r24, 0x7D	; 125
     48a:	18 f0       	brcs	.+6      	; 0x492 <__vector_11+0x98>
		{
			ovf_cnt = 0;
     48c:	10 92 96 01 	sts	0x0196, r1
     490:	0b c0       	rjmp	.+22     	; 0x4a8 <__vector_11+0xae>
		}
		else
		{
			ovf_cnt++;
     492:	80 91 96 01 	lds	r24, 0x0196
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	80 93 96 01 	sts	0x0196, r24
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__vector_11+0xae>
		}
	}
	else
	{
		// should go back to sleep, nothing to do
		clear_leds();
     49e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <clear_leds>
		to_sleep = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 98 01 	sts	0x0198, r24
	}
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	bf 91       	pop	r27
     4ae:	af 91       	pop	r26
     4b0:	9f 91       	pop	r25
     4b2:	8f 91       	pop	r24
     4b4:	7f 91       	pop	r23
     4b6:	6f 91       	pop	r22
     4b8:	5f 91       	pop	r21
     4ba:	4f 91       	pop	r20
     4bc:	3f 91       	pop	r19
     4be:	2f 91       	pop	r18
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	2f 93       	push	r18
     4d6:	3f 93       	push	r19
     4d8:	4f 93       	push	r20
     4da:	5f 93       	push	r21
     4dc:	6f 93       	push	r22
     4de:	7f 93       	push	r23
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
	if (alarm_active)
     4ec:	80 91 a8 01 	lds	r24, 0x01A8
     4f0:	88 23       	and	r24, r24
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <__vector_10+0x2e>
	{
		// toggle the buzzer pin again, this makes the buzzer frequency about 4.1 KHz
		PORTx_BUZZER &= ~_BV(PIN_BUZZER);
     4f4:	14 98       	cbi	0x02, 4	; 2
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <__stack+0xb>
	}
	else if (mode == MODE_SLEEPING)
     4f8:	80 91 97 01 	lds	r24, 0x0197
     4fc:	88 23       	and	r24, r24
     4fe:	29 f4       	brne	.+10     	; 0x50a <__stack+0xb>
	{
		// should go back to sleep, nothing to do
		clear_leds();
     500:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <clear_leds>
		to_sleep = 1;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 98 01 	sts	0x0198, r24
	}
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <__vector_3>:

ISR(PCINT1_vect)
{
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
	// turn off alarm
	alarm_active = 0;
     536:	10 92 a8 01 	sts	0x01A8, r1
	
	// disable the output on buzzer but leave pull-up resistor on to save power
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     53a:	14 9a       	sbi	0x02, 4	; 2
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
     53c:	0c 98       	cbi	0x01, 4	; 1
	
	// at this point, the processor has woken up
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <main>:
}

int main()
{
	// read in time from eeprom, to keep things interesting during development
	cur_second = eeprom_read_byte(0) % 60;
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__eerd_byte_m165pa>
     550:	cc e3       	ldi	r28, 0x3C	; 60
     552:	6c 2f       	mov	r22, r28
     554:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     558:	90 93 a0 01 	sts	0x01A0, r25
	cur_minute = eeprom_read_byte(1) % 60;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__eerd_byte_m165pa>
     564:	6c 2f       	mov	r22, r28
     566:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     56a:	90 93 a1 01 	sts	0x01A1, r25
	cur_hour = eeprom_read_byte(2) % 24;
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__eerd_byte_m165pa>
     576:	d8 e1       	ldi	r29, 0x18	; 24
     578:	6d 2f       	mov	r22, r29
     57a:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     57e:	90 93 9f 01 	sts	0x019F, r25
	
	// read in alarm settings from eeprom
	alarm_minute = eeprom_read_byte(3) % 60;
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__eerd_byte_m165pa>
     58a:	6c 2f       	mov	r22, r28
     58c:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     590:	90 93 a2 01 	sts	0x01A2, r25
	alarm_hour = eeprom_read_byte(4) % 24;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__eerd_byte_m165pa>
     59c:	6d 2f       	mov	r22, r29
     59e:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     5a2:	90 93 9c 01 	sts	0x019C, r25
	alarm_enabled = eeprom_read_byte(5);
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__eerd_byte_m165pa>
     5ae:	80 93 9d 01 	sts	0x019D, r24
	
	// ground all grounded pins
	DDRA  = 0x00;
     5b2:	11 b8       	out	0x01, r1	; 1
	DDRB  = 0x00;
     5b4:	14 b8       	out	0x04, r1	; 4
	DDRC  = 0x00;
     5b6:	17 b8       	out	0x07, r1	; 7
	DDRD  = 0x00;
     5b8:	1a b8       	out	0x0a, r1	; 10
	DDRE  = 0x00;
     5ba:	1d b8       	out	0x0d, r1	; 13
	DDRG  = 0x00;
     5bc:	13 ba       	out	0x13, r1	; 19
	PORTA = 0x00;
     5be:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;
     5c0:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
     5c2:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     5c4:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
     5c6:	1e b8       	out	0x0e, r1	; 14
	PORTG = 0x00;
     5c8:	14 ba       	out	0x14, r1	; 20
	
	// setup pins
	DDRx_RINGS  = _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     5ca:	87 e3       	ldi	r24, 0x37	; 55
     5cc:	80 bb       	out	0x10, r24	; 16
	PORTx_RINGS = _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     5ce:	81 bb       	out	0x11, r24	; 17
	
	// setup inputs and outputs
	DDRx_BUTTON1 &= ~_BV(PIN_BUTTON1);
     5d0:	23 98       	cbi	0x04, 3	; 4
	DDRx_BUTTON2 &= ~_BV(PIN_BUTTON2);
     5d2:	21 98       	cbi	0x04, 1	; 4
	PORTx_BUTTON1 |= _BV(PIN_BUTTON1);
     5d4:	2b 9a       	sbi	0x05, 3	; 5
	PORTx_BUTTON2 |= _BV(PIN_BUTTON2);
     5d6:	29 9a       	sbi	0x05, 1	; 5
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     5d8:	14 9a       	sbi	0x02, 4	; 2
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
     5da:	0c 98       	cbi	0x01, 4	; 1
	DDRx_MOTOR |= _BV(PIN_MOTOR);
     5dc:	0e 9a       	sbi	0x01, 6	; 1
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
     5de:	13 9a       	sbi	0x02, 3	; 2
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
     5e0:	0b 98       	cbi	0x01, 3	; 1
     5e2:	ea e5       	ldi	r30, 0x5A	; 90
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	ae e1       	ldi	r26, 0x1E	; 30
     5e8:	b1 e0       	ldi	r27, 0x01	; 1
     5ea:	00 e0       	ldi	r16, 0x00	; 0
     5ec:	11 e0       	ldi	r17, 0x01	; 1
     5ee:	4e e1       	ldi	r20, 0x1E	; 30
	for (uint8_t i = 0; i < 30; i++)
	{
		uint8_t* p = portx[i];
     5f0:	30 81       	ld	r19, Z
     5f2:	21 81       	ldd	r18, Z+1	; 0x01
     5f4:	32 96       	adiw	r30, 0x02	; 2
     5f6:	83 2f       	mov	r24, r19
     5f8:	92 2f       	mov	r25, r18
	*last_led_port &= ~last_led_pin;
	*last_led_ddr &= ~last_led_pin;
	PORTx_RINGS = PORTx_RINGS | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
}

int main()
     5fa:	98 01       	movw	r18, r16
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
	for (uint8_t i = 0; i < 30; i++)
	{
		uint8_t* p = portx[i];
		*p &= ~pins[i];
     5fc:	e8 01       	movw	r28, r16
     5fe:	69 91       	ld	r22, Y+
     600:	8e 01       	movw	r16, r28
     602:	60 95       	com	r22
     604:	ec 01       	movw	r28, r24
     606:	58 81       	ld	r21, Y
     608:	56 23       	and	r21, r22
     60a:	58 83       	st	Y, r21
		uint8_t* d = ddrx[i];
     60c:	6c 91       	ld	r22, X
     60e:	11 96       	adiw	r26, 0x01	; 1
     610:	5c 91       	ld	r21, X
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	12 96       	adiw	r26, 0x02	; 2
     616:	86 2f       	mov	r24, r22
     618:	95 2f       	mov	r25, r21
		*d &= ~pins[i];
     61a:	e9 01       	movw	r28, r18
     61c:	38 81       	ld	r19, Y
     61e:	30 95       	com	r19
     620:	ec 01       	movw	r28, r24
     622:	28 81       	ld	r18, Y
     624:	23 23       	and	r18, r19
     626:	28 83       	st	Y, r18
     628:	41 50       	subi	r20, 0x01	; 1
	PORTx_BUZZER |= _BV(PIN_BUZZER);
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
	DDRx_MOTOR |= _BV(PIN_MOTOR);
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
	for (uint8_t i = 0; i < 30; i++)
     62a:	11 f7       	brne	.-60     	; 0x5f0 <main+0xa8>
		uint8_t* p = portx[i];
		*p &= ~pins[i];
		uint8_t* d = ddrx[i];
		*d &= ~pins[i];
	}
	last_led_port = portx[0];
     62c:	80 91 5a 01 	lds	r24, 0x015A
     630:	90 91 5b 01 	lds	r25, 0x015B
     634:	90 93 9a 01 	sts	0x019A, r25
     638:	80 93 99 01 	sts	0x0199, r24
	last_led_ddr = ddrx[0];
     63c:	80 91 1e 01 	lds	r24, 0x011E
     640:	90 91 1f 01 	lds	r25, 0x011F
     644:	90 93 a7 01 	sts	0x01A7, r25
     648:	80 93 a6 01 	sts	0x01A6, r24
	last_led_pin = pins[0];
     64c:	80 91 00 01 	lds	r24, 0x0100
     650:	80 93 a3 01 	sts	0x01A3, r24
	
	// setup async timer 2
	ASSR = _BV(AS2); // enable async xtal input
     654:	88 e0       	ldi	r24, 0x08	; 8
     656:	80 93 b6 00 	sts	0x00B6, r24
	OCR2A = MOTOR_TICK_LENGTH; // set the tick length
     65a:	26 e0       	ldi	r18, 0x06	; 6
     65c:	20 93 b3 00 	sts	0x00B3, r18
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A); // enable overflow and tick interrupt
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(CS22) | 0 | _BV(CS20); // start timer with clock div 128
     666:	95 e0       	ldi	r25, 0x05	; 5
     668:	90 93 b0 00 	sts	0x00B0, r25
	
	// setup timer 0
	#if F_CPU == 1000000
	TCCR0A = _BV(CS00); // start timer with clk div 1
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	94 bd       	out	0x24, r25	; 36
	#elif F_CPU == 8000000
	TCCR0A = _BV(CS01); // start timer with clk div 8
	#else
	#error bad F_CPU
	#endif
	OCR0A = 0x80; // setup compare match at 50% duty cycle
     670:	30 e8       	ldi	r19, 0x80	; 128
     672:	37 bd       	out	0x27, r19	; 39
	TIMSK0 = _BV(TOIE0) | _BV(OCIE0A); // enable overflow and compare match interrupts
     674:	80 93 6e 00 	sts	0x006E, r24
	
	// setup button interrupts
	PCMSK1 |= _BV(PCINT11) | _BV(PCINT9);
     678:	80 91 6c 00 	lds	r24, 0x006C
     67c:	8a 60       	ori	r24, 0x0A	; 10
     67e:	80 93 6c 00 	sts	0x006C, r24
	EIMSK |= _BV(PCIE1);
     682:	ed 9a       	sbi	0x1d, 5	; 29
	
	// setup power saving features
	power_all_disable(); // PRR = 0x0F; // disable all (ADC, USART, SPI, TMR1)
     684:	80 91 64 00 	lds	r24, 0x0064
     688:	8f 60       	ori	r24, 0x0F	; 15
     68a:	80 93 64 00 	sts	0x0064, r24
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
     68e:	23 bf       	out	0x33, r18	; 51
	
	sei(); // enable global interrupts
     690:	78 94       	sei
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
	uint8_t eeprom_is_dirty = 0;
	
	mode = MODE_SLEEPING;
     692:	10 92 97 01 	sts	0x0197, r1
	to_sleep = 1;
     696:	90 93 98 01 	sts	0x0198, r25
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
	uint8_t eeprom_is_dirty = 0;
     69a:	20 e0       	ldi	r18, 0x00	; 0
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
     69c:	10 e0       	ldi	r17, 0x00	; 0
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
     69e:	44 24       	eor	r4, r4
     6a0:	55 24       	eor	r5, r5
     6a2:	32 01       	movw	r6, r4
	power_all_disable(); // PRR = 0x0F; // disable all (ADC, USART, SPI, TMR1)
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
     6a4:	cc 24       	eor	r12, r12
     6a6:	dd 24       	eor	r13, r13
     6a8:	76 01       	movw	r14, r12
		}
		else if (mode == MODE_ALARMING)
		{
			if (bit_is_set(cur_second, 0))
			{
				display_second = -1;
     6aa:	cf ef       	ldi	r28, 0xFF	; 255
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     6ac:	d3 e0       	ldi	r29, 0x03	; 3
     6ae:	ec e0       	ldi	r30, 0x0C	; 12
     6b0:	8e 2e       	mov	r8, r30
     6b2:	91 2c       	mov	r9, r1
     6b4:	03 e0       	ldi	r16, 0x03	; 3
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <main+0x172>
				eeprom_update_byte(5, alarm_enabled);
				
				eeprom_is_dirty = 0;
			}
			
			if (alarm_active == 0)
     6b8:	20 e0       	ldi	r18, 0x00	; 0
	mode = MODE_SLEEPING;
	to_sleep = 1;
	
	for (;;)
	{
		if (mode == MODE_SLEEPING || mode == MODE_ALARMING)
     6ba:	80 91 97 01 	lds	r24, 0x0197
     6be:	88 23       	and	r24, r24
     6c0:	29 f0       	breq	.+10     	; 0x6cc <main+0x184>
     6c2:	80 91 97 01 	lds	r24, 0x0197
     6c6:	89 30       	cpi	r24, 0x09	; 9
     6c8:	09 f0       	breq	.+2      	; 0x6cc <main+0x184>
     6ca:	56 c0       	rjmp	.+172    	; 0x778 <main+0x230>
		{
			if (button2_is_down())
     6cc:	19 99       	sbic	0x03, 1	; 3
     6ce:	3a c0       	rjmp	.+116    	; 0x744 <main+0x1fc>
			{
				// go directly into settings mode
				mode = MODE_SETTIME_HOUR;
     6d0:	84 e0       	ldi	r24, 0x04	; 4
     6d2:	80 93 97 01 	sts	0x0197, r24
				to_sleep = 0;
     6d6:	10 92 98 01 	sts	0x0198, r1
				
				display_second = -1;
     6da:	c0 93 a5 01 	sts	0x01A5, r28
				display_minute = -1;
     6de:	c0 93 a9 01 	sts	0x01A9, r28
				display_hour = -1;
     6e2:	c0 93 a4 01 	sts	0x01A4, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e6:	41 e2       	ldi	r20, 0x21	; 33
     6e8:	4a 95       	dec	r20
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <main+0x1a0>
     6ec:	00 00       	nop
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     6ee:	35 e0       	ldi	r19, 0x05	; 5
     6f0:	ec e3       	ldi	r30, 0x3C	; 60
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	24 c0       	rjmp	.+72     	; 0x73e <main+0x1f6>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     6f6:	80 91 a0 01 	lds	r24, 0x01A0
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <main+0x1ba>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	01 c0       	rjmp	.+2      	; 0x704 <main+0x1bc>
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     708:	80 91 9f 01 	lds	r24, 0x019F
     70c:	8c 30       	cpi	r24, 0x0C	; 12
     70e:	18 f0       	brcs	.+6      	; 0x716 <main+0x1ce>
     710:	4a e3       	ldi	r20, 0x3A	; 58
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	02 c0       	rjmp	.+4      	; 0x71a <main+0x1d2>
     716:	4c e1       	ldi	r20, 0x1C	; 28
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	80 91 a0 01 	lds	r24, 0x01A0
     71e:	63 2f       	mov	r22, r19
     720:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     724:	ba 01       	movw	r22, r20
     726:	69 0f       	add	r22, r25
     728:	71 1d       	adc	r23, r1
     72a:	cb 01       	movw	r24, r22
     72c:	bf 01       	movw	r22, r30
     72e:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     732:	80 93 a9 01 	sts	0x01A9, r24
					
					// indicate current settings
					display_hour = cur_hour;
     736:	80 91 9f 01 	lds	r24, 0x019F
     73a:	80 93 a4 01 	sts	0x01A4, r24
				display_minute = -1;
				display_hour = -1;
				
				debounce();
				
				while (button2_is_down())
     73e:	19 9b       	sbis	0x03, 1	; 3
     740:	da cf       	rjmp	.-76     	; 0x6f6 <main+0x1ae>
     742:	91 c3       	rjmp	.+1826   	; 0xe66 <main+0x91e>
					display_hour = cur_hour;
				}
				
				debounce();
			}
			else if (button1_is_down())
     744:	1b 99       	sbic	0x03, 3	; 3
     746:	12 c0       	rjmp	.+36     	; 0x76c <main+0x224>
			{
				// go into time display mode
				mode = MODE_SHOW_ENTERING;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 97 01 	sts	0x0197, r24
				display_hour = -1;
     74e:	c0 93 a4 01 	sts	0x01A4, r28
				display_minute = -1;
     752:	c0 93 a9 01 	sts	0x01A9, r28
				display_second = -1;
     756:	c0 93 a5 01 	sts	0x01A5, r28
				animation_cnt = 0;
     75a:	10 92 9e 01 	sts	0x019E, r1
				to_sleep = 0;
     75e:	10 92 98 01 	sts	0x0198, r1
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	8a 95       	dec	r24
     766:	f1 f7       	brne	.-4      	; 0x764 <main+0x21c>
     768:	00 00       	nop
     76a:	62 c0       	rjmp	.+196    	; 0x830 <main+0x2e8>
				held_cnt = 0;
				debounce();
			}
			else if (mode != MODE_ALARMING)
     76c:	80 91 97 01 	lds	r24, 0x0197
     770:	89 30       	cpi	r24, 0x09	; 9
     772:	09 f0       	breq	.+2      	; 0x776 <main+0x22e>
     774:	68 c0       	rjmp	.+208    	; 0x846 <main+0x2fe>
     776:	20 c4       	rjmp	.+2112   	; 0xfb8 <main+0xa70>
			{
				to_sleep = 1;
			}
		}
		else if (mode == MODE_SHOW_ENTERING)
     778:	80 91 97 01 	lds	r24, 0x0197
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	29 f4       	brne	.+10     	; 0x78a <main+0x242>
		{
			if (battery_is_low() || 1)
     780:	82 b1       	in	r24, 0x02	; 2
			{
				mode = MODE_CURTIME_SHOWING; // save power by ignoring animation
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	80 93 97 01 	sts	0x0197, r24
     788:	17 c4       	rjmp	.+2094   	; 0xfb8 <main+0xa70>
				
				// the animation finishes when the displayed time matches the current time
				if (display_second == cur_second && display_minute == cur_minute && display_hour == cur_hour) mode = MODE_CURTIME_SHOWING;
			}
		}
		else if (mode == MODE_CURTIME_SHOWING)
     78a:	80 91 97 01 	lds	r24, 0x0197
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	09 f0       	breq	.+2      	; 0x794 <main+0x24c>
     792:	52 c0       	rjmp	.+164    	; 0x838 <main+0x2f0>
		{
			// indicate current time
			display_minute = cur_minute;
     794:	80 91 a1 01 	lds	r24, 0x01A1
     798:	80 93 a9 01 	sts	0x01A9, r24
			display_hour = cur_hour;
     79c:	80 91 9f 01 	lds	r24, 0x019F
     7a0:	80 93 a4 01 	sts	0x01A4, r24
			
			if (battery_is_low())
     7a4:	13 99       	sbic	0x02, 3	; 2
     7a6:	03 c0       	rjmp	.+6      	; 0x7ae <main+0x266>
			{
				// save some power by not showing seconds
				// this also indicates low battery status to the user
				display_second = -1;
     7a8:	c0 93 a5 01 	sts	0x01A5, r28
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <main+0x26e>
			}
			else
			{
				display_second = cur_second;
     7ae:	80 91 a0 01 	lds	r24, 0x01A0
     7b2:	80 93 a5 01 	sts	0x01A5, r24
     7b6:	41 e2       	ldi	r20, 0x21	; 33
     7b8:	4a 95       	dec	r20
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <main+0x270>
     7bc:	00 00       	nop
			}
			
			debounce(); // this delay both debounces and also helps with pacing the counters
			
			if (button1_is_down())
     7be:	1b 99       	sbic	0x03, 3	; 3
     7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <main+0x29c>
			{
				held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     7c2:	59 ec       	ldi	r21, 0xC9	; 201
     7c4:	c5 16       	cp	r12, r21
     7c6:	d1 04       	cpc	r13, r1
     7c8:	e1 04       	cpc	r14, r1
     7ca:	f1 04       	cpc	r15, r1
     7cc:	28 f4       	brcc	.+10     	; 0x7d8 <main+0x290>
     7ce:	08 94       	sec
     7d0:	c1 1c       	adc	r12, r1
     7d2:	d1 1c       	adc	r13, r1
     7d4:	e1 1c       	adc	r14, r1
     7d6:	f1 1c       	adc	r15, r1
				timeout_cnt = 0;
				to_sleep = 0;
     7d8:	10 92 98 01 	sts	0x0198, r1
			debounce(); // this delay both debounces and also helps with pacing the counters
			
			if (button1_is_down())
			{
				held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
				timeout_cnt = 0;
     7dc:	44 24       	eor	r4, r4
     7de:	55 24       	eor	r5, r5
     7e0:	32 01       	movw	r6, r4
     7e2:	ea c3       	rjmp	.+2004   	; 0xfb8 <main+0xa70>
				to_sleep = 0;
			}
			else
			{
				if (battery_is_low())
     7e4:	13 99       	sbic	0x02, 3	; 2
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <main+0x2ac>
				{
					// save power if battery is low
					// or if user holds down the button for longer than 5 seconds
					mode = MODE_SLEEPING;
     7e8:	10 92 97 01 	sts	0x0197, r1
					to_sleep = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 98 01 	sts	0x0198, r24
     7f2:	1e c0       	rjmp	.+60     	; 0x830 <main+0x2e8>
				}
				else if (held_cnt >= HOLD_CNT_THRESH)
     7f4:	68 ec       	ldi	r22, 0xC8	; 200
     7f6:	c6 16       	cp	r12, r22
     7f8:	d1 04       	cpc	r13, r1
     7fa:	e1 04       	cpc	r14, r1
     7fc:	f1 04       	cpc	r15, r1
     7fe:	88 f4       	brcc	.+34     	; 0x822 <main+0x2da>
					mode = MODE_SHOW_EXITING;
					animation_cnt = 0;
				}
				else
				{
					timeout_cnt = (timeout_cnt > TIMEOUT_THRESH) ? timeout_cnt : (timeout_cnt + 1);
     800:	79 ec       	ldi	r23, 0xC9	; 201
     802:	47 16       	cp	r4, r23
     804:	51 04       	cpc	r5, r1
     806:	61 04       	cpc	r6, r1
     808:	71 04       	cpc	r7, r1
     80a:	58 f4       	brcc	.+22     	; 0x822 <main+0x2da>
     80c:	08 94       	sec
     80e:	41 1c       	adc	r4, r1
     810:	51 1c       	adc	r5, r1
     812:	61 1c       	adc	r6, r1
     814:	71 1c       	adc	r7, r1
					if (timeout_cnt >= TIMEOUT_THRESH)
     816:	88 ec       	ldi	r24, 0xC8	; 200
     818:	48 16       	cp	r4, r24
     81a:	51 04       	cpc	r5, r1
     81c:	61 04       	cpc	r6, r1
     81e:	71 04       	cpc	r7, r1
     820:	28 f0       	brcs	.+10     	; 0x82c <main+0x2e4>
					{
						// button has been release for a sufficiently long enough time to sleep
						mode = MODE_SHOW_EXITING;
     822:	00 93 97 01 	sts	0x0197, r16
						animation_cnt = 0;
     826:	10 92 9e 01 	sts	0x019E, r1
     82a:	02 c0       	rjmp	.+4      	; 0x830 <main+0x2e8>
					}
					else
					{
						// did not timeout yet, do not sleep
						to_sleep = 0;
     82c:	10 92 98 01 	sts	0x0198, r1
					}
				}
				
				// no longer held down
				held_cnt = 0;
     830:	cc 24       	eor	r12, r12
     832:	dd 24       	eor	r13, r13
     834:	76 01       	movw	r14, r12
     836:	c0 c3       	rjmp	.+1920   	; 0xfb8 <main+0xa70>
			}
		}
		else if (mode == MODE_SHOW_EXITING)
     838:	80 91 97 01 	lds	r24, 0x0197
     83c:	83 30       	cpi	r24, 0x03	; 3
     83e:	39 f4       	brne	.+14     	; 0x84e <main+0x306>
		{
			if (battery_is_low() || 1)
     840:	82 b1       	in	r24, 0x02	; 2
			{
				// save power by ignoring animation
				mode = MODE_SLEEPING;
     842:	10 92 97 01 	sts	0x0197, r1
				to_sleep = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	80 93 98 01 	sts	0x0198, r24
     84c:	b5 c3       	rjmp	.+1898   	; 0xfb8 <main+0xa70>
					mode = MODE_SLEEPING;
					to_sleep = 1;
				}
			}
		}
		else if (mode == MODE_SETTIME_HOUR)
     84e:	80 91 97 01 	lds	r24, 0x0197
     852:	84 30       	cpi	r24, 0x04	; 4
     854:	09 f0       	breq	.+2      	; 0x858 <main+0x310>
     856:	d2 c0       	rjmp	.+420    	; 0x9fc <main+0x4b4>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     858:	80 91 a0 01 	lds	r24, 0x01A0
     85c:	80 ff       	sbrs	r24, 0
     85e:	02 c0       	rjmp	.+4      	; 0x864 <main+0x31c>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	01 c0       	rjmp	.+2      	; 0x866 <main+0x31e>
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	80 93 a5 01 	sts	0x01A5, r24
			
			// indicate AM or PM
			display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     86a:	80 91 9f 01 	lds	r24, 0x019F
     86e:	8c 30       	cpi	r24, 0x0C	; 12
     870:	18 f0       	brcs	.+6      	; 0x878 <main+0x330>
     872:	4a e3       	ldi	r20, 0x3A	; 58
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	02 c0       	rjmp	.+4      	; 0x87c <main+0x334>
     878:	4c e1       	ldi	r20, 0x1C	; 28
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	80 91 a0 01 	lds	r24, 0x01A0
     880:	65 e0       	ldi	r22, 0x05	; 5
     882:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     886:	ba 01       	movw	r22, r20
     888:	69 0f       	add	r22, r25
     88a:	71 1d       	adc	r23, r1
     88c:	cb 01       	movw	r24, r22
     88e:	6c e3       	ldi	r22, 0x3C	; 60
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     896:	80 93 a9 01 	sts	0x01A9, r24
			
			// indicate current settings
			display_hour = cur_hour;
     89a:	80 91 9f 01 	lds	r24, 0x019F
     89e:	80 93 a4 01 	sts	0x01A4, r24
			
			if (button1_is_down())
     8a2:	1b 99       	sbic	0x03, 3	; 3
     8a4:	6f c0       	rjmp	.+222    	; 0x984 <main+0x43c>
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
     8a6:	80 91 9f 01 	lds	r24, 0x019F
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	68 e1       	ldi	r22, 0x18	; 24
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     8b6:	80 93 9f 01 	sts	0x019F, r24
				display_hour = cur_hour;
     8ba:	80 91 9f 01 	lds	r24, 0x019F
     8be:	80 93 a4 01 	sts	0x01A4, r24
				
				eeprom_is_dirty = 1;
				
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     8c2:	80 91 9f 01 	lds	r24, 0x019F
     8c6:	8c 30       	cpi	r24, 0x0C	; 12
     8c8:	18 f0       	brcs	.+6      	; 0x8d0 <main+0x388>
     8ca:	2a e3       	ldi	r18, 0x3A	; 58
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <main+0x38c>
     8d0:	2c e1       	ldi	r18, 0x1C	; 28
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	80 91 a0 01 	lds	r24, 0x01A0
     8d8:	65 e0       	ldi	r22, 0x05	; 5
     8da:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     8de:	a9 01       	movw	r20, r18
     8e0:	49 0f       	add	r20, r25
     8e2:	51 1d       	adc	r21, r1
     8e4:	ca 01       	movw	r24, r20
     8e6:	6c e3       	ldi	r22, 0x3C	; 60
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     8ee:	80 93 a9 01 	sts	0x01A9, r24
     8f2:	51 e2       	ldi	r21, 0x21	; 33
     8f4:	5a 95       	dec	r21
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <main+0x3ac>
     8f8:	00 00       	nop
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     8fa:	40 e0       	ldi	r20, 0x00	; 0
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     8fc:	e5 e0       	ldi	r30, 0x05	; 5
     8fe:	7c e3       	ldi	r23, 0x3C	; 60
     900:	a7 2e       	mov	r10, r23
     902:	b1 2c       	mov	r11, r1
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     904:	29 c0       	rjmp	.+82     	; 0x958 <main+0x410>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     906:	80 91 a0 01 	lds	r24, 0x01A0
     90a:	80 ff       	sbrs	r24, 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <main+0x3ca>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	01 c0       	rjmp	.+2      	; 0x914 <main+0x3cc>
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     918:	80 91 9f 01 	lds	r24, 0x019F
     91c:	8c 30       	cpi	r24, 0x0C	; 12
     91e:	18 f0       	brcs	.+6      	; 0x926 <main+0x3de>
     920:	2a e3       	ldi	r18, 0x3A	; 58
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	02 c0       	rjmp	.+4      	; 0x92a <main+0x3e2>
     926:	2c e1       	ldi	r18, 0x1C	; 28
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	80 91 a0 01 	lds	r24, 0x01A0
     92e:	6e 2f       	mov	r22, r30
     930:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     934:	b9 01       	movw	r22, r18
     936:	69 0f       	add	r22, r25
     938:	71 1d       	adc	r23, r1
     93a:	cb 01       	movw	r24, r22
     93c:	b5 01       	movw	r22, r10
     93e:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     942:	80 93 a9 01 	sts	0x01A9, r24
					
					// indicate current settings
					display_hour = cur_hour;
     946:	80 91 9f 01 	lds	r24, 0x019F
     94a:	80 93 a4 01 	sts	0x01A4, r24
     94e:	71 e2       	ldi	r23, 0x21	; 33
     950:	7a 95       	dec	r23
     952:	f1 f7       	brne	.-4      	; 0x950 <main+0x408>
     954:	00 00       	nop
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     956:	4f 5f       	subi	r20, 0xFF	; 255
     958:	24 2f       	mov	r18, r20
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	11 23       	and	r17, r17
     95e:	19 f4       	brne	.+6      	; 0x966 <main+0x41e>
     960:	8a e0       	ldi	r24, 0x0A	; 10
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 c0       	rjmp	.+4      	; 0x96a <main+0x422>
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	28 17       	cp	r18, r24
     96c:	39 07       	cpc	r19, r25
     96e:	14 f4       	brge	.+4      	; 0x974 <main+0x42c>
     970:	1b 9b       	sbis	0x03, 3	; 3
     972:	c9 cf       	rjmp	.-110    	; 0x906 <main+0x3be>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     974:	1b 9b       	sbis	0x03, 3	; 3
     976:	10 c0       	rjmp	.+32     	; 0x998 <main+0x450>
     978:	81 e2       	ldi	r24, 0x21	; 33
     97a:	8a 95       	dec	r24
     97c:	f1 f7       	brne	.-4      	; 0x97a <main+0x432>
     97e:	00 00       	nop
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
				display_hour = cur_hour;
				
				eeprom_is_dirty = 1;
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	08 c0       	rjmp	.+16     	; 0x994 <main+0x44c>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     984:	1b 9b       	sbis	0x03, 3	; 3
     986:	0a c0       	rjmp	.+20     	; 0x99c <main+0x454>
			{
				if (button_was_down != 0)
     988:	11 23       	and	r17, r17
     98a:	41 f0       	breq	.+16     	; 0x99c <main+0x454>
     98c:	41 e2       	ldi	r20, 0x21	; 33
     98e:	4a 95       	dec	r20
     990:	f1 f7       	brne	.-4      	; 0x98e <main+0x446>
     992:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	02 c0       	rjmp	.+4      	; 0x99c <main+0x454>
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
				display_hour = cur_hour;
				
				eeprom_is_dirty = 1;
     998:	21 e0       	ldi	r18, 0x01	; 1
					display_hour = cur_hour;
					
					debounce();
				}
				
				button_was_down = 1;
     99a:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     99c:	19 99       	sbic	0x03, 1	; 3
     99e:	0c c3       	rjmp	.+1560   	; 0xfb8 <main+0xa70>
			{
				// indicate mode
				display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     9a0:	80 91 a0 01 	lds	r24, 0x01A0
     9a4:	80 ff       	sbrs	r24, 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <main+0x464>
     9a8:	85 e0       	ldi	r24, 0x05	; 5
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <main+0x466>
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	80 93 a5 01 	sts	0x01A5, r24
				
				// indicate current settings
				display_minute = cur_minute;
     9b2:	80 91 a1 01 	lds	r24, 0x01A1
     9b6:	80 93 a9 01 	sts	0x01A9, r24
				display_hour = -1;
     9ba:	c0 93 a4 01 	sts	0x01A4, r28
				
				eeprom_is_dirty = 1;
				
				// goto next mode
				mode = MODE_SETTIME_MINUTE;
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	80 93 97 01 	sts	0x0197, r24
				to_sleep = 0;
     9c4:	10 92 98 01 	sts	0x0198, r1
     9c8:	51 e2       	ldi	r21, 0x21	; 33
     9ca:	5a 95       	dec	r21
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <main+0x482>
     9ce:	00 00       	nop
     9d0:	0d c0       	rjmp	.+26     	; 0x9ec <main+0x4a4>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     9d2:	80 91 a0 01 	lds	r24, 0x01A0
     9d6:	80 ff       	sbrs	r24, 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <main+0x496>
     9da:	85 e0       	ldi	r24, 0x05	; 5
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <main+0x498>
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate current settings
					display_minute = cur_minute;
     9e4:	80 91 a1 01 	lds	r24, 0x01A1
     9e8:	80 93 a9 01 	sts	0x01A9, r24
				mode = MODE_SETTIME_MINUTE;
				to_sleep = 0;
				
				debounce();
				
				while (button2_is_down())
     9ec:	19 9b       	sbis	0x03, 1	; 3
     9ee:	f1 cf       	rjmp	.-30     	; 0x9d2 <main+0x48a>
     9f0:	61 e2       	ldi	r22, 0x21	; 33
     9f2:	6a 95       	dec	r22
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <main+0x4aa>
     9f6:	00 00       	nop
				
				// indicate current settings
				display_minute = cur_minute;
				display_hour = -1;
				
				eeprom_is_dirty = 1;
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	de c2       	rjmp	.+1468   	; 0xfb8 <main+0xa70>
				}
				
				debounce();
			}
		}
		else if (mode == MODE_SETTIME_MINUTE)
     9fc:	80 91 97 01 	lds	r24, 0x0197
     a00:	85 30       	cpi	r24, 0x05	; 5
     a02:	09 f0       	breq	.+2      	; 0xa06 <main+0x4be>
     a04:	c7 c0       	rjmp	.+398    	; 0xb94 <main+0x64c>
		{			
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     a06:	80 91 a0 01 	lds	r24, 0x01A0
     a0a:	80 ff       	sbrs	r24, 0
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <main+0x4ca>
     a0e:	85 e0       	ldi	r24, 0x05	; 5
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <main+0x4cc>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	80 93 a5 01 	sts	0x01A5, r24
			
			// turn off
			display_hour = -1;
     a18:	c0 93 a4 01 	sts	0x01A4, r28
			
			// show current settings
			display_minute = cur_minute;
     a1c:	80 91 a1 01 	lds	r24, 0x01A1
     a20:	80 93 a9 01 	sts	0x01A9, r24
			
			if (button1_is_down())
     a24:	1b 99       	sbic	0x03, 3	; 3
     a26:	3c c0       	rjmp	.+120    	; 0xaa0 <main+0x558>
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
     a28:	80 91 a1 01 	lds	r24, 0x01A1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	6c e3       	ldi	r22, 0x3C	; 60
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     a38:	80 93 a1 01 	sts	0x01A1, r24
				display_minute = cur_minute;
     a3c:	80 91 a1 01 	lds	r24, 0x01A1
     a40:	80 93 a9 01 	sts	0x01A9, r24
     a44:	71 e2       	ldi	r23, 0x21	; 33
     a46:	7a 95       	dec	r23
     a48:	f1 f7       	brne	.-4      	; 0xa46 <main+0x4fe>
     a4a:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	12 c0       	rjmp	.+36     	; 0xa74 <main+0x52c>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     a50:	80 91 a0 01 	lds	r24, 0x01A0
     a54:	80 ff       	sbrs	r24, 0
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <main+0x514>
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <main+0x516>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	80 93 a5 01 	sts	0x01A5, r24
					
					// show current settings
					display_minute = cur_minute;
     a62:	80 91 a1 01 	lds	r24, 0x01A1
     a66:	80 93 a9 01 	sts	0x01A9, r24
     a6a:	81 e2       	ldi	r24, 0x21	; 33
     a6c:	8a 95       	dec	r24
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <main+0x524>
     a70:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     a72:	4f 5f       	subi	r20, 0xFF	; 255
     a74:	24 2f       	mov	r18, r20
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	11 23       	and	r17, r17
     a7a:	19 f4       	brne	.+6      	; 0xa82 <main+0x53a>
     a7c:	8a e0       	ldi	r24, 0x0A	; 10
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <main+0x53e>
     a82:	85 e0       	ldi	r24, 0x05	; 5
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	28 17       	cp	r18, r24
     a88:	39 07       	cpc	r19, r25
     a8a:	14 f4       	brge	.+4      	; 0xa90 <main+0x548>
     a8c:	1b 9b       	sbis	0x03, 3	; 3
     a8e:	e0 cf       	rjmp	.-64     	; 0xa50 <main+0x508>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     a90:	1b 9b       	sbis	0x03, 3	; 3
     a92:	10 c0       	rjmp	.+32     	; 0xab4 <main+0x56c>
     a94:	41 e2       	ldi	r20, 0x21	; 33
     a96:	4a 95       	dec	r20
     a98:	f1 f7       	brne	.-4      	; 0xa96 <main+0x54e>
     a9a:	00 00       	nop
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
				display_minute = cur_minute;
				
				eeprom_is_dirty = 1;
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <main+0x568>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     aa0:	1b 9b       	sbis	0x03, 3	; 3
     aa2:	0a c0       	rjmp	.+20     	; 0xab8 <main+0x570>
			{
				if (button_was_down != 0)
     aa4:	11 23       	and	r17, r17
     aa6:	41 f0       	breq	.+16     	; 0xab8 <main+0x570>
     aa8:	51 e2       	ldi	r21, 0x21	; 33
     aaa:	5a 95       	dec	r21
     aac:	f1 f7       	brne	.-4      	; 0xaaa <main+0x562>
     aae:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <main+0x570>
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
				display_minute = cur_minute;
				
				eeprom_is_dirty = 1;
     ab4:	21 e0       	ldi	r18, 0x01	; 1
					// show current settings
					display_minute = cur_minute;
					debounce();
				}
				
				button_was_down = 1;
     ab6:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     ab8:	19 99       	sbic	0x03, 1	; 3
     aba:	7e c2       	rjmp	.+1276   	; 0xfb8 <main+0xa70>
			{
				// clear display
				display_second = -1;
     abc:	c0 93 a5 01 	sts	0x01A5, r28
				display_minute = -1;
     ac0:	c0 93 a9 01 	sts	0x01A9, r28
				display_hour = -1;
     ac4:	c0 93 a4 01 	sts	0x01A4, r28
				
				if (alarm_enabled == 0)
     ac8:	80 91 9d 01 	lds	r24, 0x019D
     acc:	88 23       	and	r24, r24
     ace:	79 f5       	brne	.+94     	; 0xb2e <main+0x5e6>
				{
					// skip alarm time set modes, instead go to enable/disable alarm mode
					mode = MODE_SETALARM_ONOFF;
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	80 93 97 01 	sts	0x0197, r24
					to_sleep = 0;
     ad6:	10 92 98 01 	sts	0x0198, r1
     ada:	61 e2       	ldi	r22, 0x21	; 33
     adc:	6a 95       	dec	r22
     ade:	f1 f7       	brne	.-4      	; 0xadc <main+0x594>
     ae0:	00 00       	nop
     ae2:	22 c0       	rjmp	.+68     	; 0xb28 <main+0x5e0>
					debounce();
					while (button2_is_down())
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     ae4:	80 91 a0 01 	lds	r24, 0x01A0
     ae8:	80 ff       	sbrs	r24, 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <main+0x5a8>
     aec:	84 e1       	ldi	r24, 0x14	; 20
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <main+0x5aa>
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	80 93 a5 01 	sts	0x01A5, r24
						
						// indicate alarm enabled status
						display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     af6:	80 91 9d 01 	lds	r24, 0x019D
     afa:	88 23       	and	r24, r24
     afc:	39 f0       	breq	.+14     	; 0xb0c <main+0x5c4>
     afe:	80 91 a0 01 	lds	r24, 0x01A0
     b02:	6d 2f       	mov	r22, r29
     b04:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     b08:	9b 5f       	subi	r25, 0xFB	; 251
     b0a:	0c c0       	rjmp	.+24     	; 0xb24 <main+0x5dc>
     b0c:	80 91 a0 01 	lds	r24, 0x01A0
     b10:	6d 2f       	mov	r22, r29
     b12:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     b16:	89 2f       	mov	r24, r25
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0b 96       	adiw	r24, 0x0b	; 11
     b1c:	b4 01       	movw	r22, r8
     b1e:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     b22:	98 2f       	mov	r25, r24
     b24:	90 93 a4 01 	sts	0x01A4, r25
				{
					// skip alarm time set modes, instead go to enable/disable alarm mode
					mode = MODE_SETALARM_ONOFF;
					to_sleep = 0;
					debounce();
					while (button2_is_down())
     b28:	19 9b       	sbis	0x03, 1	; 3
     b2a:	dc cf       	rjmp	.-72     	; 0xae4 <main+0x59c>
     b2c:	9c c1       	rjmp	.+824    	; 0xe66 <main+0x91e>
					debounce();
				}
				else
				{
					// goto alarm time set mode
					mode = MODE_SETALARM_HOUR;
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	80 93 97 01 	sts	0x0197, r24
					to_sleep = 0;
     b34:	10 92 98 01 	sts	0x0198, r1
     b38:	81 e2       	ldi	r24, 0x21	; 33
     b3a:	8a 95       	dec	r24
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <main+0x5f2>
     b3e:	00 00       	nop
     b40:	22 c0       	rjmp	.+68     	; 0xb86 <main+0x63e>
					debounce();
					while (button2_is_down())
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     b42:	80 91 a0 01 	lds	r24, 0x01A0
     b46:	80 ff       	sbrs	r24, 0
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <main+0x606>
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <main+0x608>
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	80 93 a5 01 	sts	0x01A5, r24
						
						// indicate alarm enabled status
						display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     b54:	80 91 9d 01 	lds	r24, 0x019D
     b58:	88 23       	and	r24, r24
     b5a:	39 f0       	breq	.+14     	; 0xb6a <main+0x622>
     b5c:	80 91 a0 01 	lds	r24, 0x01A0
     b60:	6d 2f       	mov	r22, r29
     b62:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     b66:	9b 5f       	subi	r25, 0xFB	; 251
     b68:	0c c0       	rjmp	.+24     	; 0xb82 <main+0x63a>
     b6a:	80 91 a0 01 	lds	r24, 0x01A0
     b6e:	6d 2f       	mov	r22, r29
     b70:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     b74:	89 2f       	mov	r24, r25
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0b 96       	adiw	r24, 0x0b	; 11
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     b80:	98 2f       	mov	r25, r24
     b82:	90 93 a4 01 	sts	0x01A4, r25
				{
					// goto alarm time set mode
					mode = MODE_SETALARM_HOUR;
					to_sleep = 0;
					debounce();
					while (button2_is_down())
     b86:	19 9b       	sbis	0x03, 1	; 3
     b88:	dc cf       	rjmp	.-72     	; 0xb42 <main+0x5fa>
     b8a:	41 e2       	ldi	r20, 0x21	; 33
     b8c:	4a 95       	dec	r20
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <main+0x644>
     b90:	00 00       	nop
     b92:	12 c2       	rjmp	.+1060   	; 0xfb8 <main+0xa70>
					}
					debounce();
				}
			}
		}
		else if (mode == MODE_SETALARM_HOUR)
     b94:	80 91 97 01 	lds	r24, 0x0197
     b98:	86 30       	cpi	r24, 0x06	; 6
     b9a:	09 f0       	breq	.+2      	; 0xb9e <main+0x656>
     b9c:	d0 c0       	rjmp	.+416    	; 0xd3e <main+0x7f6>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     b9e:	80 91 a0 01 	lds	r24, 0x01A0
     ba2:	80 ff       	sbrs	r24, 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <main+0x662>
     ba6:	8a e0       	ldi	r24, 0x0A	; 10
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <main+0x664>
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	80 93 a5 01 	sts	0x01A5, r24
			
			// indicate AM or PM
			display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     bb0:	80 91 9c 01 	lds	r24, 0x019C
     bb4:	8c 30       	cpi	r24, 0x0C	; 12
     bb6:	18 f0       	brcs	.+6      	; 0xbbe <main+0x676>
     bb8:	4a e3       	ldi	r20, 0x3A	; 58
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <main+0x67a>
     bbe:	4c e1       	ldi	r20, 0x1C	; 28
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	80 91 a0 01 	lds	r24, 0x01A0
     bc6:	65 e0       	ldi	r22, 0x05	; 5
     bc8:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     bcc:	ba 01       	movw	r22, r20
     bce:	69 0f       	add	r22, r25
     bd0:	71 1d       	adc	r23, r1
     bd2:	cb 01       	movw	r24, r22
     bd4:	6c e3       	ldi	r22, 0x3C	; 60
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     bdc:	80 93 a9 01 	sts	0x01A9, r24
			
			// indicate current settings
			display_hour = alarm_hour;
     be0:	80 91 9c 01 	lds	r24, 0x019C
     be4:	80 93 a4 01 	sts	0x01A4, r24
			
			if (button1_is_down())
     be8:	1b 99       	sbic	0x03, 3	; 3
     bea:	6f c0       	rjmp	.+222    	; 0xcca <main+0x782>
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
     bec:	80 91 9c 01 	lds	r24, 0x019C
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	68 e1       	ldi	r22, 0x18	; 24
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     bfc:	80 93 9c 01 	sts	0x019C, r24
				display_hour = alarm_hour;
     c00:	80 91 9c 01 	lds	r24, 0x019C
     c04:	80 93 a4 01 	sts	0x01A4, r24
				
				eeprom_is_dirty = 1;
				
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     c08:	80 91 9c 01 	lds	r24, 0x019C
     c0c:	8c 30       	cpi	r24, 0x0C	; 12
     c0e:	18 f0       	brcs	.+6      	; 0xc16 <main+0x6ce>
     c10:	2a e3       	ldi	r18, 0x3A	; 58
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <main+0x6d2>
     c16:	2c e1       	ldi	r18, 0x1C	; 28
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	80 91 a0 01 	lds	r24, 0x01A0
     c1e:	65 e0       	ldi	r22, 0x05	; 5
     c20:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     c24:	a9 01       	movw	r20, r18
     c26:	49 0f       	add	r20, r25
     c28:	51 1d       	adc	r21, r1
     c2a:	ca 01       	movw	r24, r20
     c2c:	6c e3       	ldi	r22, 0x3C	; 60
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     c34:	80 93 a9 01 	sts	0x01A9, r24
     c38:	51 e2       	ldi	r21, 0x21	; 33
     c3a:	5a 95       	dec	r21
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <main+0x6f2>
     c3e:	00 00       	nop
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     c40:	40 e0       	ldi	r20, 0x00	; 0
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 10 : -1;
					
					// indicate AM or PM
					display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     c42:	e5 e0       	ldi	r30, 0x05	; 5
     c44:	6c e3       	ldi	r22, 0x3C	; 60
     c46:	a6 2e       	mov	r10, r22
     c48:	b1 2c       	mov	r11, r1
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     c4a:	29 c0       	rjmp	.+82     	; 0xc9e <main+0x756>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     c4c:	80 91 a0 01 	lds	r24, 0x01A0
     c50:	80 ff       	sbrs	r24, 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <main+0x710>
     c54:	8a e0       	ldi	r24, 0x0A	; 10
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <main+0x712>
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate AM or PM
					display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     c5e:	80 91 9c 01 	lds	r24, 0x019C
     c62:	8c 30       	cpi	r24, 0x0C	; 12
     c64:	18 f0       	brcs	.+6      	; 0xc6c <main+0x724>
     c66:	2a e3       	ldi	r18, 0x3A	; 58
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <main+0x728>
     c6c:	2c e1       	ldi	r18, 0x1C	; 28
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	80 91 a0 01 	lds	r24, 0x01A0
     c74:	6e 2f       	mov	r22, r30
     c76:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     c7a:	b9 01       	movw	r22, r18
     c7c:	69 0f       	add	r22, r25
     c7e:	71 1d       	adc	r23, r1
     c80:	cb 01       	movw	r24, r22
     c82:	b5 01       	movw	r22, r10
     c84:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     c88:	80 93 a9 01 	sts	0x01A9, r24
					
					// indicate current settings
					display_hour = alarm_hour;
     c8c:	80 91 9c 01 	lds	r24, 0x019C
     c90:	80 93 a4 01 	sts	0x01A4, r24
     c94:	71 e2       	ldi	r23, 0x21	; 33
     c96:	7a 95       	dec	r23
     c98:	f1 f7       	brne	.-4      	; 0xc96 <main+0x74e>
     c9a:	00 00       	nop
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     c9c:	4f 5f       	subi	r20, 0xFF	; 255
     c9e:	24 2f       	mov	r18, r20
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	11 23       	and	r17, r17
     ca4:	19 f4       	brne	.+6      	; 0xcac <main+0x764>
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <main+0x768>
     cac:	85 e0       	ldi	r24, 0x05	; 5
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	14 f4       	brge	.+4      	; 0xcba <main+0x772>
     cb6:	1b 9b       	sbis	0x03, 3	; 3
     cb8:	c9 cf       	rjmp	.-110    	; 0xc4c <main+0x704>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     cba:	1b 9b       	sbis	0x03, 3	; 3
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <main+0x796>
     cbe:	81 e2       	ldi	r24, 0x21	; 33
     cc0:	8a 95       	dec	r24
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <main+0x778>
     cc4:	00 00       	nop
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
				display_hour = alarm_hour;
				
				eeprom_is_dirty = 1;
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <main+0x792>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     cca:	1b 9b       	sbis	0x03, 3	; 3
     ccc:	0a c0       	rjmp	.+20     	; 0xce2 <main+0x79a>
			{
				if (button_was_down != 0)
     cce:	11 23       	and	r17, r17
     cd0:	41 f0       	breq	.+16     	; 0xce2 <main+0x79a>
     cd2:	41 e2       	ldi	r20, 0x21	; 33
     cd4:	4a 95       	dec	r20
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <main+0x78c>
     cd8:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <main+0x79a>
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
				display_hour = alarm_hour;
				
				eeprom_is_dirty = 1;
     cde:	21 e0       	ldi	r18, 0x01	; 1
					display_hour = alarm_hour;
					
					debounce();
				}
				
				button_was_down = 1;
     ce0:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     ce2:	19 99       	sbic	0x03, 1	; 3
     ce4:	69 c1       	rjmp	.+722    	; 0xfb8 <main+0xa70>
			{
				// indicate mode
				display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     ce6:	80 91 a0 01 	lds	r24, 0x01A0
     cea:	80 ff       	sbrs	r24, 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <main+0x7aa>
     cee:	8f e0       	ldi	r24, 0x0F	; 15
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <main+0x7ac>
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	80 93 a5 01 	sts	0x01A5, r24
				
				// indicate current settings
				display_minute = alarm_minute;
     cf8:	80 91 a2 01 	lds	r24, 0x01A2
     cfc:	80 93 a9 01 	sts	0x01A9, r24
				display_hour = -1;
     d00:	c0 93 a4 01 	sts	0x01A4, r28
				
				// goto next mode
				mode = MODE_SETALARM_MINUTE;
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	80 93 97 01 	sts	0x0197, r24
				to_sleep = 0;
     d0a:	10 92 98 01 	sts	0x0198, r1
     d0e:	51 e2       	ldi	r21, 0x21	; 33
     d10:	5a 95       	dec	r21
     d12:	f1 f7       	brne	.-4      	; 0xd10 <main+0x7c8>
     d14:	00 00       	nop
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <main+0x7ea>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     d18:	80 91 a0 01 	lds	r24, 0x01A0
     d1c:	80 ff       	sbrs	r24, 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <main+0x7dc>
     d20:	8f e0       	ldi	r24, 0x0F	; 15
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <main+0x7de>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate current settings
					display_minute = cur_minute;
     d2a:	80 91 a1 01 	lds	r24, 0x01A1
     d2e:	80 93 a9 01 	sts	0x01A9, r24
				mode = MODE_SETALARM_MINUTE;
				to_sleep = 0;
				
				debounce();
				
				while (button2_is_down())
     d32:	19 9b       	sbis	0x03, 1	; 3
     d34:	f1 cf       	rjmp	.-30     	; 0xd18 <main+0x7d0>
     d36:	61 e2       	ldi	r22, 0x21	; 33
     d38:	6a 95       	dec	r22
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <main+0x7f0>
     d3c:	29 cf       	rjmp	.-430    	; 0xb90 <main+0x648>
				}
				
				debounce();
			}
		}
		else if (mode == MODE_SETALARM_MINUTE)
     d3e:	80 91 97 01 	lds	r24, 0x0197
     d42:	87 30       	cpi	r24, 0x07	; 7
     d44:	09 f0       	breq	.+2      	; 0xd48 <main+0x800>
     d46:	93 c0       	rjmp	.+294    	; 0xe6e <main+0x926>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     d48:	80 91 a0 01 	lds	r24, 0x01A0
     d4c:	80 ff       	sbrs	r24, 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <main+0x80c>
     d50:	8f e0       	ldi	r24, 0x0F	; 15
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <main+0x80e>
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	80 93 a5 01 	sts	0x01A5, r24
			
			// turn off
			display_hour = -1;
     d5a:	c0 93 a4 01 	sts	0x01A4, r28
			
			// show current settings
			display_minute = alarm_minute;
     d5e:	80 91 a2 01 	lds	r24, 0x01A2
     d62:	80 93 a9 01 	sts	0x01A9, r24
			
			if (button1_is_down())
     d66:	1b 99       	sbic	0x03, 3	; 3
     d68:	3c c0       	rjmp	.+120    	; 0xde2 <main+0x89a>
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
     d6a:	80 91 a2 01 	lds	r24, 0x01A2
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	6c e3       	ldi	r22, 0x3C	; 60
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     d7a:	80 93 a2 01 	sts	0x01A2, r24
				display_minute = alarm_minute;
     d7e:	80 91 a2 01 	lds	r24, 0x01A2
     d82:	80 93 a9 01 	sts	0x01A9, r24
     d86:	71 e2       	ldi	r23, 0x21	; 33
     d88:	7a 95       	dec	r23
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <main+0x840>
     d8c:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	12 c0       	rjmp	.+36     	; 0xdb6 <main+0x86e>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     d92:	80 91 a0 01 	lds	r24, 0x01A0
     d96:	80 ff       	sbrs	r24, 0
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <main+0x856>
     d9a:	8f e0       	ldi	r24, 0x0F	; 15
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <main+0x858>
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	80 93 a5 01 	sts	0x01A5, r24
					
					// show current settings
					display_minute = alarm_minute;
     da4:	80 91 a2 01 	lds	r24, 0x01A2
     da8:	80 93 a9 01 	sts	0x01A9, r24
     dac:	81 e2       	ldi	r24, 0x21	; 33
     dae:	8a 95       	dec	r24
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0x866>
     db2:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     db4:	4f 5f       	subi	r20, 0xFF	; 255
     db6:	24 2f       	mov	r18, r20
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	11 23       	and	r17, r17
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <main+0x87c>
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <main+0x880>
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	28 17       	cp	r18, r24
     dca:	39 07       	cpc	r19, r25
     dcc:	14 f4       	brge	.+4      	; 0xdd2 <main+0x88a>
     dce:	1b 9b       	sbis	0x03, 3	; 3
     dd0:	e0 cf       	rjmp	.-64     	; 0xd92 <main+0x84a>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     dd2:	1b 9b       	sbis	0x03, 3	; 3
     dd4:	10 c0       	rjmp	.+32     	; 0xdf6 <main+0x8ae>
     dd6:	41 e2       	ldi	r20, 0x21	; 33
     dd8:	4a 95       	dec	r20
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <main+0x890>
     ddc:	00 00       	nop
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
				display_minute = alarm_minute;
				
				eeprom_is_dirty = 1;
     dde:	21 e0       	ldi	r18, 0x01	; 1
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <main+0x8aa>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     de2:	1b 9b       	sbis	0x03, 3	; 3
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <main+0x8b2>
			{
				if (button_was_down != 0)
     de6:	11 23       	and	r17, r17
     de8:	41 f0       	breq	.+16     	; 0xdfa <main+0x8b2>
     dea:	51 e2       	ldi	r21, 0x21	; 33
     dec:	5a 95       	dec	r21
     dee:	f1 f7       	brne	.-4      	; 0xdec <main+0x8a4>
     df0:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <main+0x8b2>
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
				display_minute = alarm_minute;
				
				eeprom_is_dirty = 1;
     df6:	21 e0       	ldi	r18, 0x01	; 1
					// show current settings
					display_minute = alarm_minute;
					debounce();
				}
				
				button_was_down = 1;
     df8:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     dfa:	19 99       	sbic	0x03, 1	; 3
     dfc:	dd c0       	rjmp	.+442    	; 0xfb8 <main+0xa70>
			{
				// clear display
				display_second = -1;
     dfe:	c0 93 a5 01 	sts	0x01A5, r28
				display_minute = -1;
     e02:	c0 93 a9 01 	sts	0x01A9, r28
				display_hour = -1;
     e06:	c0 93 a4 01 	sts	0x01A4, r28
				
				// goto next mode
				mode = MODE_SETALARM_ONOFF;
     e0a:	88 e0       	ldi	r24, 0x08	; 8
     e0c:	80 93 97 01 	sts	0x0197, r24
				to_sleep = 0;
     e10:	10 92 98 01 	sts	0x0198, r1
     e14:	61 e2       	ldi	r22, 0x21	; 33
     e16:	6a 95       	dec	r22
     e18:	f1 f7       	brne	.-4      	; 0xe16 <main+0x8ce>
     e1a:	00 00       	nop
     e1c:	22 c0       	rjmp	.+68     	; 0xe62 <main+0x91a>
				debounce();
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     e1e:	80 91 a0 01 	lds	r24, 0x01A0
     e22:	80 ff       	sbrs	r24, 0
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <main+0x8e2>
     e26:	84 e1       	ldi	r24, 0x14	; 20
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <main+0x8e4>
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     e30:	80 91 9d 01 	lds	r24, 0x019D
     e34:	88 23       	and	r24, r24
     e36:	39 f0       	breq	.+14     	; 0xe46 <main+0x8fe>
     e38:	80 91 a0 01 	lds	r24, 0x01A0
     e3c:	6d 2f       	mov	r22, r29
     e3e:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     e42:	9b 5f       	subi	r25, 0xFB	; 251
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <main+0x916>
     e46:	80 91 a0 01 	lds	r24, 0x01A0
     e4a:	6d 2f       	mov	r22, r29
     e4c:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     e50:	89 2f       	mov	r24, r25
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0b 96       	adiw	r24, 0x0b	; 11
     e56:	b4 01       	movw	r22, r8
     e58:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     e5c:	98 2f       	mov	r25, r24
     e5e:	90 93 a4 01 	sts	0x01A4, r25
				
				// goto next mode
				mode = MODE_SETALARM_ONOFF;
				to_sleep = 0;
				debounce();
				while (button2_is_down())
     e62:	19 9b       	sbis	0x03, 1	; 3
     e64:	dc cf       	rjmp	.-72     	; 0xe1e <main+0x8d6>
     e66:	71 e2       	ldi	r23, 0x21	; 33
     e68:	7a 95       	dec	r23
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <main+0x920>
     e6c:	91 ce       	rjmp	.-734    	; 0xb90 <main+0x648>
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				}
				debounce();
			}
		}
		else if (mode == MODE_SETALARM_ONOFF)
     e6e:	80 91 97 01 	lds	r24, 0x0197
     e72:	88 30       	cpi	r24, 0x08	; 8
     e74:	09 f0       	breq	.+2      	; 0xe78 <main+0x930>
     e76:	85 c0       	rjmp	.+266    	; 0xf82 <main+0xa3a>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     e78:	80 91 a0 01 	lds	r24, 0x01A0
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <main+0x93c>
     e80:	84 e1       	ldi	r24, 0x14	; 20
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <main+0x93e>
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	80 93 a5 01 	sts	0x01A5, r24
			
			display_minute = -1; // turn off
     e8a:	c0 93 a9 01 	sts	0x01A9, r28
			
			// indicate alarm enabled status
			display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     e8e:	80 91 9d 01 	lds	r24, 0x019D
     e92:	88 23       	and	r24, r24
     e94:	39 f0       	breq	.+14     	; 0xea4 <main+0x95c>
     e96:	80 91 a0 01 	lds	r24, 0x01A0
     e9a:	6d 2f       	mov	r22, r29
     e9c:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     ea0:	9b 5f       	subi	r25, 0xFB	; 251
     ea2:	0c c0       	rjmp	.+24     	; 0xebc <main+0x974>
     ea4:	80 91 a0 01 	lds	r24, 0x01A0
     ea8:	6d 2f       	mov	r22, r29
     eaa:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     eae:	89 2f       	mov	r24, r25
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0b 96       	adiw	r24, 0x0b	; 11
     eb4:	b4 01       	movw	r22, r8
     eb6:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     eba:	98 2f       	mov	r25, r24
     ebc:	90 93 a4 01 	sts	0x01A4, r25
			
			if (button1_is_down())
     ec0:	1b 99       	sbic	0x03, 3	; 3
     ec2:	4e c0       	rjmp	.+156    	; 0xf60 <main+0xa18>
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
     ec4:	90 91 9d 01 	lds	r25, 0x019D
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	91 11       	cpse	r25, r1
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	80 93 9d 01 	sts	0x019D, r24
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     ed2:	80 91 9d 01 	lds	r24, 0x019D
     ed6:	88 23       	and	r24, r24
     ed8:	39 f0       	breq	.+14     	; 0xee8 <main+0x9a0>
     eda:	80 91 a0 01 	lds	r24, 0x01A0
     ede:	6d 2f       	mov	r22, r29
     ee0:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     ee4:	9b 5f       	subi	r25, 0xFB	; 251
     ee6:	0c c0       	rjmp	.+24     	; 0xf00 <main+0x9b8>
     ee8:	80 91 a0 01 	lds	r24, 0x01A0
     eec:	6d 2f       	mov	r22, r29
     eee:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     ef2:	89 2f       	mov	r24, r25
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0b 96       	adiw	r24, 0x0b	; 11
     ef8:	b4 01       	movw	r22, r8
     efa:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     efe:	98 2f       	mov	r25, r24
     f00:	90 93 a4 01 	sts	0x01A4, r25
     f04:	81 e2       	ldi	r24, 0x21	; 33
     f06:	8a 95       	dec	r24
     f08:	f1 f7       	brne	.-4      	; 0xf06 <main+0x9be>
     f0a:	00 00       	nop
     f0c:	22 c0       	rjmp	.+68     	; 0xf52 <main+0xa0a>
				eeprom_is_dirty = 1;
				debounce();
				while (button1_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     f0e:	80 91 a0 01 	lds	r24, 0x01A0
     f12:	80 ff       	sbrs	r24, 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <main+0x9d2>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <main+0x9d4>
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	80 93 a5 01 	sts	0x01A5, r24
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     f20:	80 91 9d 01 	lds	r24, 0x019D
     f24:	88 23       	and	r24, r24
     f26:	39 f0       	breq	.+14     	; 0xf36 <main+0x9ee>
     f28:	80 91 a0 01 	lds	r24, 0x01A0
     f2c:	6d 2f       	mov	r22, r29
     f2e:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     f32:	9b 5f       	subi	r25, 0xFB	; 251
     f34:	0c c0       	rjmp	.+24     	; 0xf4e <main+0xa06>
     f36:	80 91 a0 01 	lds	r24, 0x01A0
     f3a:	6d 2f       	mov	r22, r29
     f3c:	0e 94 20 08 	call	0x1040	; 0x1040 <__udivmodqi4>
     f40:	89 2f       	mov	r24, r25
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0b 96       	adiw	r24, 0x0b	; 11
     f46:	b4 01       	movw	r22, r8
     f48:	0e 94 39 08 	call	0x1072	; 0x1072 <__divmodhi4>
     f4c:	98 2f       	mov	r25, r24
     f4e:	90 93 a4 01 	sts	0x01A4, r25
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				eeprom_is_dirty = 1;
				debounce();
				while (button1_is_down())
     f52:	1b 9b       	sbis	0x03, 3	; 3
     f54:	dc cf       	rjmp	.-72     	; 0xf0e <main+0x9c6>
     f56:	41 e2       	ldi	r20, 0x21	; 33
     f58:	4a 95       	dec	r20
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <main+0xa10>
     f5c:	00 00       	nop
			
			if (button1_is_down())
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				eeprom_is_dirty = 1;
     f5e:	21 e0       	ldi	r18, 0x01	; 1
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				}
				debounce();
			}
			
			if (button2_is_down())
     f60:	19 99       	sbic	0x03, 1	; 3
     f62:	2a c0       	rjmp	.+84     	; 0xfb8 <main+0xa70>
			{
				// go to sleep
				display_second = -1;
     f64:	c0 93 a5 01 	sts	0x01A5, r28
				display_minute = -1;
     f68:	c0 93 a9 01 	sts	0x01A9, r28
				display_hour = -1;
     f6c:	c0 93 a4 01 	sts	0x01A4, r28
				mode = MODE_SLEEPING;
     f70:	10 92 97 01 	sts	0x0197, r1
				to_sleep = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 98 01 	sts	0x0198, r24
     f7a:	51 e2       	ldi	r21, 0x21	; 33
     f7c:	5a 95       	dec	r21
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <main+0xa34>
     f80:	07 ce       	rjmp	.-1010   	; 0xb90 <main+0x648>
				debounce();
			}
		}
		else if (mode == MODE_ALARMING)
     f82:	80 91 97 01 	lds	r24, 0x0197
     f86:	89 30       	cpi	r24, 0x09	; 9
     f88:	b9 f4       	brne	.+46     	; 0xfb8 <main+0xa70>
		{
			if (bit_is_set(cur_second, 0))
     f8a:	80 91 a0 01 	lds	r24, 0x01A0
     f8e:	80 ff       	sbrs	r24, 0
     f90:	07 c0       	rjmp	.+14     	; 0xfa0 <main+0xa58>
			{
				display_second = -1;
     f92:	c0 93 a5 01 	sts	0x01A5, r28
				display_minute = -1;
     f96:	c0 93 a9 01 	sts	0x01A9, r28
				display_hour = -1;
     f9a:	c0 93 a4 01 	sts	0x01A4, r28
     f9e:	0c c0       	rjmp	.+24     	; 0xfb8 <main+0xa70>
			}
			else
			{
				display_second = cur_second;
     fa0:	80 91 a0 01 	lds	r24, 0x01A0
     fa4:	80 93 a5 01 	sts	0x01A5, r24
				display_minute = cur_minute;
     fa8:	80 91 a1 01 	lds	r24, 0x01A1
     fac:	80 93 a9 01 	sts	0x01A9, r24
				display_hour = cur_hour;
     fb0:	80 91 9f 01 	lds	r24, 0x019F
     fb4:	80 93 a4 01 	sts	0x01A4, r24
			}
		}
		
		if (to_sleep)
     fb8:	80 91 98 01 	lds	r24, 0x0198
     fbc:	88 23       	and	r24, r24
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <main+0xa7a>
     fc0:	7c cb       	rjmp	.-2312   	; 0x6ba <main+0x172>
		{
			// nothing to do, disable LEDs and go to sleep
			display_second = -1;
     fc2:	c0 93 a5 01 	sts	0x01A5, r28
			display_minute = -1;
     fc6:	c0 93 a9 01 	sts	0x01A9, r28
			display_hour = -1;
     fca:	c0 93 a4 01 	sts	0x01A4, r28
			mode = MODE_SLEEPING;
     fce:	10 92 97 01 	sts	0x0197, r1
			
			// save data if required
			if (eeprom_is_dirty)
     fd2:	22 23       	and	r18, r18
     fd4:	21 f1       	breq	.+72     	; 0x101e <main+0xad6>
			{
				eeprom_update_byte(0, cur_second);
     fd6:	60 91 a0 01 	lds	r22, 0x01A0
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__eeupd_byte_m165pa>
				eeprom_update_byte(1, cur_minute);
     fe2:	60 91 a1 01 	lds	r22, 0x01A1
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__eeupd_byte_m165pa>
				eeprom_update_byte(2, cur_hour);
     fee:	60 91 9f 01 	lds	r22, 0x019F
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__eeupd_byte_m165pa>
				eeprom_update_byte(3, alarm_minute);
     ffa:	60 91 a2 01 	lds	r22, 0x01A2
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__eeupd_byte_m165pa>
				eeprom_update_byte(4, alarm_hour);
    1006:	60 91 9c 01 	lds	r22, 0x019C
    100a:	84 e0       	ldi	r24, 0x04	; 4
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__eeupd_byte_m165pa>
				eeprom_update_byte(5, alarm_enabled);
    1012:	60 91 9d 01 	lds	r22, 0x019D
    1016:	85 e0       	ldi	r24, 0x05	; 5
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__eeupd_byte_m165pa>
				
				eeprom_is_dirty = 0;
			}
			
			if (alarm_active == 0)
    101e:	80 91 a8 01 	lds	r24, 0x01A8
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <main+0xae0>
    1026:	48 cb       	rjmp	.-2416   	; 0x6b8 <main+0x170>
			{
				TIMSK0 = 0; // disable interrupt to save power
    1028:	10 92 6e 00 	sts	0x006E, r1
				sleep_enable(); // SMCR |= _BV(SE); // enable sleep
    102c:	83 b7       	in	r24, 0x33	; 51
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	83 bf       	out	0x33, r24	; 51
				sleep_cpu();
    1032:	88 95       	sleep
				sleep_disable(); // SMCR &= ~_BV(SE); // disable sleep, prevent accidental sleep
    1034:	83 b7       	in	r24, 0x33	; 51
    1036:	8e 7f       	andi	r24, 0xFE	; 254
    1038:	83 bf       	out	0x33, r24	; 51
				TIMSK0 = _BV(TOIE0) | _BV(OCIE0A); // re-enable interrupt
    103a:	d0 93 6e 00 	sts	0x006E, r29
    103e:	3c cb       	rjmp	.-2440   	; 0x6b8 <main+0x170>

00001040 <__udivmodqi4>:
    1040:	99 1b       	sub	r25, r25
    1042:	79 e0       	ldi	r23, 0x09	; 9
    1044:	04 c0       	rjmp	.+8      	; 0x104e <__udivmodqi4_ep>

00001046 <__udivmodqi4_loop>:
    1046:	99 1f       	adc	r25, r25
    1048:	96 17       	cp	r25, r22
    104a:	08 f0       	brcs	.+2      	; 0x104e <__udivmodqi4_ep>
    104c:	96 1b       	sub	r25, r22

0000104e <__udivmodqi4_ep>:
    104e:	88 1f       	adc	r24, r24
    1050:	7a 95       	dec	r23
    1052:	c9 f7       	brne	.-14     	; 0x1046 <__udivmodqi4_loop>
    1054:	80 95       	com	r24
    1056:	08 95       	ret

00001058 <__divmodqi4>:
    1058:	87 fb       	bst	r24, 7
    105a:	08 2e       	mov	r0, r24
    105c:	06 26       	eor	r0, r22
    105e:	87 fd       	sbrc	r24, 7
    1060:	81 95       	neg	r24
    1062:	67 fd       	sbrc	r22, 7
    1064:	61 95       	neg	r22
    1066:	ec df       	rcall	.-40     	; 0x1040 <__udivmodqi4>
    1068:	0e f4       	brtc	.+2      	; 0x106c <__divmodqi4_1>
    106a:	91 95       	neg	r25

0000106c <__divmodqi4_1>:
    106c:	07 fc       	sbrc	r0, 7
    106e:	81 95       	neg	r24

00001070 <__divmodqi4_exit>:
    1070:	08 95       	ret

00001072 <__divmodhi4>:
    1072:	97 fb       	bst	r25, 7
    1074:	09 2e       	mov	r0, r25
    1076:	07 26       	eor	r0, r23
    1078:	0a d0       	rcall	.+20     	; 0x108e <__divmodhi4_neg1>
    107a:	77 fd       	sbrc	r23, 7
    107c:	04 d0       	rcall	.+8      	; 0x1086 <__divmodhi4_neg2>
    107e:	0c d0       	rcall	.+24     	; 0x1098 <__udivmodhi4>
    1080:	06 d0       	rcall	.+12     	; 0x108e <__divmodhi4_neg1>
    1082:	00 20       	and	r0, r0
    1084:	1a f4       	brpl	.+6      	; 0x108c <__divmodhi4_exit>

00001086 <__divmodhi4_neg2>:
    1086:	70 95       	com	r23
    1088:	61 95       	neg	r22
    108a:	7f 4f       	sbci	r23, 0xFF	; 255

0000108c <__divmodhi4_exit>:
    108c:	08 95       	ret

0000108e <__divmodhi4_neg1>:
    108e:	f6 f7       	brtc	.-4      	; 0x108c <__divmodhi4_exit>
    1090:	90 95       	com	r25
    1092:	81 95       	neg	r24
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	08 95       	ret

00001098 <__udivmodhi4>:
    1098:	aa 1b       	sub	r26, r26
    109a:	bb 1b       	sub	r27, r27
    109c:	51 e1       	ldi	r21, 0x11	; 17
    109e:	07 c0       	rjmp	.+14     	; 0x10ae <__udivmodhi4_ep>

000010a0 <__udivmodhi4_loop>:
    10a0:	aa 1f       	adc	r26, r26
    10a2:	bb 1f       	adc	r27, r27
    10a4:	a6 17       	cp	r26, r22
    10a6:	b7 07       	cpc	r27, r23
    10a8:	10 f0       	brcs	.+4      	; 0x10ae <__udivmodhi4_ep>
    10aa:	a6 1b       	sub	r26, r22
    10ac:	b7 0b       	sbc	r27, r23

000010ae <__udivmodhi4_ep>:
    10ae:	88 1f       	adc	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	5a 95       	dec	r21
    10b4:	a9 f7       	brne	.-22     	; 0x10a0 <__udivmodhi4_loop>
    10b6:	80 95       	com	r24
    10b8:	90 95       	com	r25
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	08 95       	ret

000010c0 <__eerd_byte_m165pa>:
    10c0:	f9 99       	sbic	0x1f, 1	; 31
    10c2:	fe cf       	rjmp	.-4      	; 0x10c0 <__eerd_byte_m165pa>
    10c4:	92 bd       	out	0x22, r25	; 34
    10c6:	81 bd       	out	0x21, r24	; 33
    10c8:	f8 9a       	sbi	0x1f, 0	; 31
    10ca:	99 27       	eor	r25, r25
    10cc:	80 b5       	in	r24, 0x20	; 32
    10ce:	08 95       	ret

000010d0 <__eeupd_byte_m165pa>:
    10d0:	26 2f       	mov	r18, r22

000010d2 <__eeupd_r18_m165pa>:
    10d2:	f9 99       	sbic	0x1f, 1	; 31
    10d4:	fe cf       	rjmp	.-4      	; 0x10d2 <__eeupd_r18_m165pa>
    10d6:	92 bd       	out	0x22, r25	; 34
    10d8:	81 bd       	out	0x21, r24	; 33
    10da:	f8 9a       	sbi	0x1f, 0	; 31
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	00 b4       	in	r0, 0x20	; 32
    10e0:	02 16       	cp	r0, r18
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <__eeupd_r18_m165pa+0x1e>
    10e4:	20 bd       	out	0x20, r18	; 32
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	fa 9a       	sbi	0x1f, 2	; 31
    10ec:	f9 9a       	sbi	0x1f, 1	; 31
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	08 95       	ret

000010f2 <_exit>:
    10f2:	f8 94       	cli

000010f4 <__stop_program>:
    10f4:	ff cf       	rjmp	.-2      	; 0x10f4 <__stop_program>

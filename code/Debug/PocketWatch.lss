
PocketWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00001614  000016a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080019e  0080019e  00001746  2**0
                  ALLOC
  3 .stab         00000864  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014c  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000258  00000000  00000000  000020f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c13  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004da  00000000  00000000  00003f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118e  00000000  00000000  0000443d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  000055cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010de  00000000  00000000  00005cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00006d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_3>
      10:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_4>
      14:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_5>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_10>
      2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_11>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000058 <__ctors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf ef       	ldi	r28, 0xFF	; 255
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	11 e0       	ldi	r17, 0x01	; 1
      66:	a0 e0       	ldi	r26, 0x00	; 0
      68:	b1 e0       	ldi	r27, 0x01	; 1
      6a:	e4 e1       	ldi	r30, 0x14	; 20
      6c:	f6 e1       	ldi	r31, 0x16	; 22
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	ae 39       	cpi	r26, 0x9E	; 158
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	ae e9       	ldi	r26, 0x9E	; 158
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a2 3b       	cpi	r26, 0xB2	; 178
      86:	b1 07       	cpc	r27, r17
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>
      8a:	0e 94 a4 02 	call	0x548	; 0x548 <main>
      8e:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <set_hour_led>:
volatile uint8_t* last_led_port;
volatile uint8_t* last_led_ddr;
volatile uint8_t last_led_pin;

void set_hour_led(int8_t number)
{
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
      a0:	e0 91 a1 01 	lds	r30, 0x01A1
      a4:	f0 91 a2 01 	lds	r31, 0x01A2
      a8:	20 81       	ld	r18, Z
      aa:	90 91 ab 01 	lds	r25, 0x01AB
      ae:	90 95       	com	r25
      b0:	92 23       	and	r25, r18
      b2:	90 83       	st	Z, r25
	*last_led_ddr &= ~last_led_pin;
      b4:	e0 91 ae 01 	lds	r30, 0x01AE
      b8:	f0 91 af 01 	lds	r31, 0x01AF
      bc:	20 81       	ld	r18, Z
      be:	90 91 ab 01 	lds	r25, 0x01AB
      c2:	90 95       	com	r25
      c4:	92 23       	and	r25, r18
      c6:	90 83       	st	Z, r25
	
	if (number >= 0)
      c8:	87 fd       	sbrc	r24, 7
      ca:	3c c0       	rjmp	.+120    	; 0x144 <set_hour_led+0xae>
	{
		// put the ring low
		PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_HOUR)) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
      cc:	91 b3       	in	r25, 0x11	; 17
      ce:	98 7c       	andi	r25, 0xC8	; 200
      d0:	93 63       	ori	r25, 0x33	; 51
      d2:	91 bb       	out	0x11, r25	; 17

		// calculate appropriate index
		idx = (number % 12) * 5;
      d4:	6c e0       	ldi	r22, 0x0C	; 12
      d6:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divmodqi4>
      da:	89 2f       	mov	r24, r25
      dc:	88 0f       	add	r24, r24
      de:	88 0f       	add	r24, r24
      e0:	89 0f       	add	r24, r25
      e2:	89 83       	std	Y+1, r24	; 0x01
		idx /= 2;
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	86 95       	lsr	r24
      e8:	89 83       	std	Y+1, r24	; 0x01

		// set the LED on and remember which one
		last_led_port = portx[idx];
      ea:	e9 81       	ldd	r30, Y+1	; 0x01
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	ee 0f       	add	r30, r30
      f0:	ff 1f       	adc	r31, r31
      f2:	e6 5a       	subi	r30, 0xA6	; 166
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	a0 81       	ld	r26, Z
      f8:	b1 81       	ldd	r27, Z+1	; 0x01
      fa:	b0 93 a2 01 	sts	0x01A2, r27
      fe:	a0 93 a1 01 	sts	0x01A1, r26
		last_led_ddr = ddrx[idx];
     102:	e9 81       	ldd	r30, Y+1	; 0x01
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	e2 5e       	subi	r30, 0xE2	; 226
     10c:	fe 4f       	sbci	r31, 0xFE	; 254
     10e:	80 81       	ld	r24, Z
     110:	91 81       	ldd	r25, Z+1	; 0x01
     112:	90 93 af 01 	sts	0x01AF, r25
     116:	80 93 ae 01 	sts	0x01AE, r24
		last_led_pin = pins[idx];
     11a:	e9 81       	ldd	r30, Y+1	; 0x01
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	e0 50       	subi	r30, 0x00	; 0
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	80 81       	ld	r24, Z
     124:	80 93 ab 01 	sts	0x01AB, r24
		*last_led_port |= last_led_pin;
     128:	8c 91       	ld	r24, X
     12a:	90 91 ab 01 	lds	r25, 0x01AB
     12e:	89 2b       	or	r24, r25
     130:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     132:	e0 91 ae 01 	lds	r30, 0x01AE
     136:	f0 91 af 01 	lds	r31, 0x01AF
     13a:	80 81       	ld	r24, Z
     13c:	90 91 ab 01 	lds	r25, 0x01AB
     140:	89 2b       	or	r24, r25
     142:	80 83       	st	Z, r24
	}
}
     144:	0f 90       	pop	r0
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <set_minute_led>:

void set_minute_led(int8_t number)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	00 d0       	rcall	.+0      	; 0x152 <set_minute_led+0x6>
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
     158:	e0 91 a1 01 	lds	r30, 0x01A1
     15c:	f0 91 a2 01 	lds	r31, 0x01A2
     160:	90 81       	ld	r25, Z
     162:	80 91 ab 01 	lds	r24, 0x01AB
     166:	80 95       	com	r24
     168:	89 23       	and	r24, r25
     16a:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     16c:	e0 91 ae 01 	lds	r30, 0x01AE
     170:	f0 91 af 01 	lds	r31, 0x01AF
     174:	90 81       	ld	r25, Z
     176:	80 91 ab 01 	lds	r24, 0x01AB
     17a:	80 95       	com	r24
     17c:	89 23       	and	r24, r25
     17e:	80 83       	st	Z, r24
	
	if (number >= 0)
     180:	8a 81       	ldd	r24, Y+2	; 0x02
     182:	87 fd       	sbrc	r24, 7
     184:	40 c0       	rjmp	.+128    	; 0x206 <set_minute_led+0xba>
	{
		// put the ring low, depending on which one is needed
		if (bit_is_clear(number, 0))
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	80 fd       	sbrc	r24, 0
     18a:	04 c0       	rjmp	.+8      	; 0x194 <set_minute_led+0x48>
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_MINUTE_EVEN)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_MINUTE_ODD) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
     18c:	81 b3       	in	r24, 0x11	; 17
     18e:	88 7c       	andi	r24, 0xC8	; 200
     190:	87 61       	ori	r24, 0x17	; 23
     192:	03 c0       	rjmp	.+6      	; 0x19a <set_minute_led+0x4e>
		}
		else
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_MINUTE_ODD)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
     194:	81 b3       	in	r24, 0x11	; 17
     196:	88 7c       	andi	r24, 0xC8	; 200
     198:	87 62       	ori	r24, 0x27	; 39
     19a:	81 bb       	out	0x11, r24	; 17
		}
		
		// calculate appropriate index
		idx = number % 60;
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	6c e3       	ldi	r22, 0x3C	; 60
     1a0:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divmodqi4>
     1a4:	99 83       	std	Y+1, r25	; 0x01
		idx /= 2;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	86 95       	lsr	r24
     1aa:	89 83       	std	Y+1, r24	; 0x01
		
		// set the LED on and remember which one
		last_led_port = portx[idx];
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e6 5a       	subi	r30, 0xA6	; 166
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	a0 81       	ld	r26, Z
     1ba:	b1 81       	ldd	r27, Z+1	; 0x01
     1bc:	b0 93 a2 01 	sts	0x01A2, r27
     1c0:	a0 93 a1 01 	sts	0x01A1, r26
		last_led_ddr = ddrx[idx];
     1c4:	e9 81       	ldd	r30, Y+1	; 0x01
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	e2 5e       	subi	r30, 0xE2	; 226
     1ce:	fe 4f       	sbci	r31, 0xFE	; 254
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	90 93 af 01 	sts	0x01AF, r25
     1d8:	80 93 ae 01 	sts	0x01AE, r24
		last_led_pin = pins[idx];
     1dc:	e9 81       	ldd	r30, Y+1	; 0x01
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	e0 50       	subi	r30, 0x00	; 0
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	80 81       	ld	r24, Z
     1e6:	80 93 ab 01 	sts	0x01AB, r24
		*last_led_port |= last_led_pin;
     1ea:	8c 91       	ld	r24, X
     1ec:	90 91 ab 01 	lds	r25, 0x01AB
     1f0:	89 2b       	or	r24, r25
     1f2:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     1f4:	e0 91 ae 01 	lds	r30, 0x01AE
     1f8:	f0 91 af 01 	lds	r31, 0x01AF
     1fc:	80 81       	ld	r24, Z
     1fe:	90 91 ab 01 	lds	r25, 0x01AB
     202:	89 2b       	or	r24, r25
     204:	80 83       	st	Z, r24
	}
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <set_second_led>:

void set_second_led(int8_t number)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <set_second_led+0x6>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
     21c:	e0 91 a1 01 	lds	r30, 0x01A1
     220:	f0 91 a2 01 	lds	r31, 0x01A2
     224:	90 81       	ld	r25, Z
     226:	80 91 ab 01 	lds	r24, 0x01AB
     22a:	80 95       	com	r24
     22c:	89 23       	and	r24, r25
     22e:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     230:	e0 91 ae 01 	lds	r30, 0x01AE
     234:	f0 91 af 01 	lds	r31, 0x01AF
     238:	90 81       	ld	r25, Z
     23a:	80 91 ab 01 	lds	r24, 0x01AB
     23e:	80 95       	com	r24
     240:	89 23       	and	r24, r25
     242:	80 83       	st	Z, r24
	
	if (number >= 0)
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	87 fd       	sbrc	r24, 7
     248:	40 c0       	rjmp	.+128    	; 0x2ca <set_second_led+0xba>
	{
		// put the ring low, depending on which one is needed
		if (bit_is_clear(number, 0))
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	80 fd       	sbrc	r24, 0
     24e:	04 c0       	rjmp	.+8      	; 0x258 <set_second_led+0x48>
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_SECOND_EVEN)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     250:	81 b3       	in	r24, 0x11	; 17
     252:	88 7c       	andi	r24, 0xC8	; 200
     254:	85 63       	ori	r24, 0x35	; 53
     256:	03 c0       	rjmp	.+6      	; 0x25e <set_second_led+0x4e>
		}
		else
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_SECOND_ODD)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     258:	81 b3       	in	r24, 0x11	; 17
     25a:	88 7c       	andi	r24, 0xC8	; 200
     25c:	86 63       	ori	r24, 0x36	; 54
     25e:	81 bb       	out	0x11, r24	; 17
		}
		
		// calculate appropriate index
		idx = number % 60;
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	6c e3       	ldi	r22, 0x3C	; 60
     264:	0e 94 65 09 	call	0x12ca	; 0x12ca <__divmodqi4>
     268:	99 83       	std	Y+1, r25	; 0x01
		idx /= 2;
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	86 95       	lsr	r24
     26e:	89 83       	std	Y+1, r24	; 0x01
		
		// set the LED on and remember which one
		last_led_port = portx[idx];
     270:	e9 81       	ldd	r30, Y+1	; 0x01
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e6 5a       	subi	r30, 0xA6	; 166
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	a0 81       	ld	r26, Z
     27e:	b1 81       	ldd	r27, Z+1	; 0x01
     280:	b0 93 a2 01 	sts	0x01A2, r27
     284:	a0 93 a1 01 	sts	0x01A1, r26
		last_led_ddr = ddrx[idx];
     288:	e9 81       	ldd	r30, Y+1	; 0x01
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ee 0f       	add	r30, r30
     28e:	ff 1f       	adc	r31, r31
     290:	e2 5e       	subi	r30, 0xE2	; 226
     292:	fe 4f       	sbci	r31, 0xFE	; 254
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	90 93 af 01 	sts	0x01AF, r25
     29c:	80 93 ae 01 	sts	0x01AE, r24
		last_led_pin = pins[idx];
     2a0:	e9 81       	ldd	r30, Y+1	; 0x01
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	e0 50       	subi	r30, 0x00	; 0
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	80 81       	ld	r24, Z
     2aa:	80 93 ab 01 	sts	0x01AB, r24
		*last_led_port |= last_led_pin;
     2ae:	8c 91       	ld	r24, X
     2b0:	90 91 ab 01 	lds	r25, 0x01AB
     2b4:	89 2b       	or	r24, r25
     2b6:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     2b8:	e0 91 ae 01 	lds	r30, 0x01AE
     2bc:	f0 91 af 01 	lds	r31, 0x01AF
     2c0:	80 81       	ld	r24, Z
     2c2:	90 91 ab 01 	lds	r25, 0x01AB
     2c6:	89 2b       	or	r24, r25
     2c8:	80 83       	st	Z, r24
	}
}
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <clear_leds>:

void clear_leds()
{
	// turn off all the LEDs
	*last_led_port &= ~last_led_pin;
     2d4:	e0 91 a1 01 	lds	r30, 0x01A1
     2d8:	f0 91 a2 01 	lds	r31, 0x01A2
     2dc:	90 81       	ld	r25, Z
     2de:	80 91 ab 01 	lds	r24, 0x01AB
     2e2:	80 95       	com	r24
     2e4:	89 23       	and	r24, r25
     2e6:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     2e8:	e0 91 ae 01 	lds	r30, 0x01AE
     2ec:	f0 91 af 01 	lds	r31, 0x01AF
     2f0:	90 81       	ld	r25, Z
     2f2:	80 91 ab 01 	lds	r24, 0x01AB
     2f6:	80 95       	com	r24
     2f8:	89 23       	and	r24, r25
     2fa:	80 83       	st	Z, r24
	PORTx_RINGS = PORTx_RINGS | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     2fc:	81 b3       	in	r24, 0x11	; 17
     2fe:	87 63       	ori	r24, 0x37	; 55
     300:	81 bb       	out	0x11, r24	; 17
}
     302:	08 95       	ret

00000304 <__vector_5>:

volatile uint8_t to_sleep = 0;
volatile mode_t mode = MODE_SLEEPING;

ISR(TIMER2_OVF_vect)
{
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
	// one second event, add to time
	cur_second++;
     312:	80 91 a8 01 	lds	r24, 0x01A8
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 a8 01 	sts	0x01A8, r24
	if (cur_second >= 60)
     31c:	80 91 a8 01 	lds	r24, 0x01A8
     320:	8c 33       	cpi	r24, 0x3C	; 60
     322:	c0 f0       	brcs	.+48     	; 0x354 <__vector_5+0x50>
	{
		cur_second = 0;
     324:	10 92 a8 01 	sts	0x01A8, r1
		cur_minute++;
     328:	80 91 a9 01 	lds	r24, 0x01A9
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 a9 01 	sts	0x01A9, r24
		if (cur_minute >= 60)
     332:	80 91 a9 01 	lds	r24, 0x01A9
     336:	8c 33       	cpi	r24, 0x3C	; 60
     338:	68 f0       	brcs	.+26     	; 0x354 <__vector_5+0x50>
		{
			cur_minute = 0;
     33a:	10 92 a9 01 	sts	0x01A9, r1
			cur_hour++;
     33e:	80 91 a7 01 	lds	r24, 0x01A7
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 a7 01 	sts	0x01A7, r24
			if (cur_hour >= 24)
     348:	80 91 a7 01 	lds	r24, 0x01A7
     34c:	88 31       	cpi	r24, 0x18	; 24
     34e:	10 f0       	brcs	.+4      	; 0x354 <__vector_5+0x50>
			{
				cur_hour = 0;
     350:	10 92 a7 01 	sts	0x01A7, r1
			}
		}
	}
	
	if (battery_is_low() == 0 && (mode == MODE_CURTIME_SHOWING || mode == MODE_SHOW_ENTERING || alarm_active != 0))
     354:	13 9b       	sbis	0x02, 3	; 2
     356:	0c c0       	rjmp	.+24     	; 0x370 <__vector_5+0x6c>
     358:	80 91 9f 01 	lds	r24, 0x019F
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	39 f0       	breq	.+14     	; 0x36e <__vector_5+0x6a>
     360:	80 91 9f 01 	lds	r24, 0x019F
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	19 f0       	breq	.+6      	; 0x36e <__vector_5+0x6a>
     368:	80 91 b0 01 	lds	r24, 0x01B0
     36c:	81 11       	cpse	r24, r1
	{
		PORTx_MOTOR |= _BV(PIN_MOTOR); // turn on the motor
     36e:	16 9a       	sbi	0x02, 6	; 2
	}
	
	// check if alarm should go off
	if (alarm_enabled != 0 && alarm_hour == cur_hour && alarm_minute == cur_minute)
     370:	80 91 a5 01 	lds	r24, 0x01A5
     374:	88 23       	and	r24, r24
     376:	01 f1       	breq	.+64     	; 0x3b8 <__vector_5+0xb4>
     378:	90 91 a4 01 	lds	r25, 0x01A4
     37c:	80 91 a7 01 	lds	r24, 0x01A7
     380:	98 17       	cp	r25, r24
     382:	d1 f4       	brne	.+52     	; 0x3b8 <__vector_5+0xb4>
     384:	90 91 aa 01 	lds	r25, 0x01AA
     388:	80 91 a9 01 	lds	r24, 0x01A9
     38c:	98 17       	cp	r25, r24
     38e:	a1 f4       	brne	.+40     	; 0x3b8 <__vector_5+0xb4>
	{
		if (alarm_already_off == 0)
     390:	80 91 a3 01 	lds	r24, 0x01A3
     394:	88 23       	and	r24, r24
     396:	91 f4       	brne	.+36     	; 0x3bc <__vector_5+0xb8>
		{
			alarm_active = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 b0 01 	sts	0x01B0, r24
			alarm_already_off = 1;
     39e:	80 93 a3 01 	sts	0x01A3, r24
			DDRx_BUZZER |= _BV(PIN_BUZZER);
     3a2:	0c 9a       	sbi	0x01, 4	; 1
			if (mode == MODE_SLEEPING)
     3a4:	80 91 9f 01 	lds	r24, 0x019F
     3a8:	88 23       	and	r24, r24
     3aa:	41 f4       	brne	.+16     	; 0x3bc <__vector_5+0xb8>
			{
				mode = MODE_ALARMING;
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     3b2:	10 92 a0 01 	sts	0x01A0, r1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <__vector_5+0xb8>
			}
		}
	}
	else
	{
		alarm_already_off = 0;
     3b8:	10 92 a3 01 	sts	0x01A3, r1
	}
	
	if (mode == MODE_SLEEPING)
     3bc:	80 91 9f 01 	lds	r24, 0x019F
     3c0:	88 23       	and	r24, r24
     3c2:	19 f4       	brne	.+6      	; 0x3ca <__vector_5+0xc6>
	{
		// should go back to sleep, nothing to do
		to_sleep = 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 a0 01 	sts	0x01A0, r24
	}
}
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     3d8:	1f 92       	push	r1
     3da:	0f 92       	push	r0
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	0f 92       	push	r0
     3e0:	11 24       	eor	r1, r1
     3e2:	8f 93       	push	r24
	if (alarm_active == 0)
     3e4:	80 91 b0 01 	lds	r24, 0x01B0
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <__vector_4+0x16>
	{
		PORTx_MOTOR &= ~_BV(PIN_MOTOR); // turn off motor
     3ec:	16 98       	cbi	0x02, 6	; 2
	}
}
     3ee:	8f 91       	pop	r24
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <__vector_11>:

volatile uint8_t animation_cnt;
volatile uint8_t ovf_cnt = 0;

ISR(TIMER0_OVF_vect)
{
     3fa:	1f 92       	push	r1
     3fc:	0f 92       	push	r0
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	ef 93       	push	r30
     41a:	ff 93       	push	r31
	// 2.05 KHz event
	
	if (alarm_active)
     41c:	80 91 b0 01 	lds	r24, 0x01B0
     420:	88 23       	and	r24, r24
     422:	19 f0       	breq	.+6      	; 0x42a <__vector_11+0x30>
	{
		// buzz the alarm buzzer, set pin high, use the compare match to set pin low for 4.1 KHz
		PORTx_BUZZER |= _BV(PIN_BUZZER);
     424:	14 9a       	sbi	0x02, 4	; 2
		if (battery_is_low() == 0) PORTx_MOTOR |= _BV(PIN_MOTOR);
     426:	13 99       	sbic	0x02, 3	; 2
     428:	16 9a       	sbi	0x02, 6	; 2
	}
	
	if (mode != MODE_SLEEPING && mode != MODE_ALARMING)
     42a:	80 91 9f 01 	lds	r24, 0x019F
     42e:	88 23       	and	r24, r24
     430:	b1 f1       	breq	.+108    	; 0x49e <__vector_11+0xa4>
     432:	80 91 9f 01 	lds	r24, 0x019F
     436:	8a 30       	cpi	r24, 0x0A	; 10
     438:	91 f1       	breq	.+100    	; 0x49e <__vector_11+0xa4>
	{
		// display LEDs if not sleeping

		uint8_t which_ring = ovf_cnt % 3; // each ring will only get 1/3 duty cycle
     43a:	80 91 9e 01 	lds	r24, 0x019E
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
		
		if (which_ring == 0) // hour
     444:	99 23       	and	r25, r25
     446:	41 f4       	brne	.+16     	; 0x458 <__vector_11+0x5e>
		{
			set_hour_led(display_hour);
     448:	80 91 ac 01 	lds	r24, 0x01AC
     44c:	99 27       	eor	r25, r25
     44e:	87 fd       	sbrc	r24, 7
     450:	90 95       	com	r25
     452:	0e 94 4b 00 	call	0x96	; 0x96 <set_hour_led>
     456:	16 c0       	rjmp	.+44     	; 0x484 <__vector_11+0x8a>
		}
		else if (which_ring == 1) // minute
     458:	91 30       	cpi	r25, 0x01	; 1
     45a:	41 f4       	brne	.+16     	; 0x46c <__vector_11+0x72>
		{
			set_minute_led(display_minute);
     45c:	80 91 b1 01 	lds	r24, 0x01B1
     460:	99 27       	eor	r25, r25
     462:	87 fd       	sbrc	r24, 7
     464:	90 95       	com	r25
     466:	0e 94 a6 00 	call	0x14c	; 0x14c <set_minute_led>
     46a:	0c c0       	rjmp	.+24     	; 0x484 <__vector_11+0x8a>
		}
		else if (which_ring == 2) // second
		{
			set_second_led(display_second);
     46c:	80 91 ad 01 	lds	r24, 0x01AD
     470:	99 27       	eor	r25, r25
     472:	87 fd       	sbrc	r24, 7
     474:	90 95       	com	r25
     476:	0e 94 08 01 	call	0x210	; 0x210 <set_second_led>
			animation_cnt++;
     47a:	80 91 a6 01 	lds	r24, 0x01A6
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	80 93 a6 01 	sts	0x01A6, r24
		}
		
		if (ovf_cnt >= 125)
     484:	80 91 9e 01 	lds	r24, 0x019E
     488:	8d 37       	cpi	r24, 0x7D	; 125
     48a:	18 f0       	brcs	.+6      	; 0x492 <__vector_11+0x98>
		{
			ovf_cnt = 0;
     48c:	10 92 9e 01 	sts	0x019E, r1
     490:	0b c0       	rjmp	.+22     	; 0x4a8 <__vector_11+0xae>
		}
		else
		{
			ovf_cnt++;
     492:	80 91 9e 01 	lds	r24, 0x019E
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	80 93 9e 01 	sts	0x019E, r24
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__vector_11+0xae>
		}
	}
	else
	{
		// should go back to sleep, nothing to do
		clear_leds();
     49e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <clear_leds>
		to_sleep = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 a0 01 	sts	0x01A0, r24
	}
}
     4a8:	ff 91       	pop	r31
     4aa:	ef 91       	pop	r30
     4ac:	bf 91       	pop	r27
     4ae:	af 91       	pop	r26
     4b0:	9f 91       	pop	r25
     4b2:	8f 91       	pop	r24
     4b4:	7f 91       	pop	r23
     4b6:	6f 91       	pop	r22
     4b8:	5f 91       	pop	r21
     4ba:	4f 91       	pop	r20
     4bc:	3f 91       	pop	r19
     4be:	2f 91       	pop	r18
     4c0:	0f 90       	pop	r0
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	0f 90       	pop	r0
     4c6:	1f 90       	pop	r1
     4c8:	18 95       	reti

000004ca <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	2f 93       	push	r18
     4d6:	3f 93       	push	r19
     4d8:	4f 93       	push	r20
     4da:	5f 93       	push	r21
     4dc:	6f 93       	push	r22
     4de:	7f 93       	push	r23
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
	if (alarm_active)
     4ec:	80 91 b0 01 	lds	r24, 0x01B0
     4f0:	88 23       	and	r24, r24
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <__vector_10+0x2e>
	{
		// toggle the buzzer pin again, this makes the buzzer frequency about 4.1 KHz
		PORTx_BUZZER &= ~_BV(PIN_BUZZER);
     4f4:	14 98       	cbi	0x02, 4	; 2
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <__stack+0xb>
	}
	else if (mode == MODE_SLEEPING)
     4f8:	80 91 9f 01 	lds	r24, 0x019F
     4fc:	88 23       	and	r24, r24
     4fe:	29 f4       	brne	.+10     	; 0x50a <__stack+0xb>
	{
		// should go back to sleep, nothing to do
		clear_leds();
     500:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <clear_leds>
		to_sleep = 1;
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 a0 01 	sts	0x01A0, r24
	}
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0f be       	out	0x3f, r0	; 63
     526:	0f 90       	pop	r0
     528:	1f 90       	pop	r1
     52a:	18 95       	reti

0000052c <__vector_3>:

ISR(PCINT1_vect)
{
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
	// turn off alarm
	alarm_active = 0;
     536:	10 92 b0 01 	sts	0x01B0, r1
	
	// disable the output on buzzer but leave pull-up resistor on to save power
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     53a:	14 9a       	sbi	0x02, 4	; 2
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
     53c:	0c 98       	cbi	0x01, 4	; 1
	
	// at this point, the processor has woken up
}
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <main>:
}

int main()
{
	// read in time from eeprom, to keep things interesting during development
	cur_second = (eeprom_read_byte(0) & 0x7F) % 60;
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__eerd_byte_m165pa>
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	8f 77       	andi	r24, 0x7F	; 127
     554:	90 70       	andi	r25, 0x00	; 0
     556:	cc e3       	ldi	r28, 0x3C	; 60
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	be 01       	movw	r22, r28
     55c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     560:	80 93 a8 01 	sts	0x01A8, r24
	cur_minute = (eeprom_read_byte(1) & 0x7F) % 60;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__eerd_byte_m165pa>
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	8f 77       	andi	r24, 0x7F	; 127
     570:	90 70       	andi	r25, 0x00	; 0
     572:	be 01       	movw	r22, r28
     574:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     578:	80 93 a9 01 	sts	0x01A9, r24
	cur_hour   = (eeprom_read_byte(2) & 0x7F) % 24;
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__eerd_byte_m165pa>
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	8f 77       	andi	r24, 0x7F	; 127
     588:	90 70       	andi	r25, 0x00	; 0
     58a:	08 e1       	ldi	r16, 0x18	; 24
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	b8 01       	movw	r22, r16
     590:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     594:	80 93 a7 01 	sts	0x01A7, r24
	
	// read in alarm settings from eeprom
	alarm_minute  = (eeprom_read_byte(3) & 0x7F) % 60;
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__eerd_byte_m165pa>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	8f 77       	andi	r24, 0x7F	; 127
     5a4:	90 70       	andi	r25, 0x00	; 0
     5a6:	be 01       	movw	r22, r28
     5a8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     5ac:	80 93 aa 01 	sts	0x01AA, r24
	alarm_hour    = (eeprom_read_byte(4) & 0x7F) % 24;
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__eerd_byte_m165pa>
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	8f 77       	andi	r24, 0x7F	; 127
     5bc:	90 70       	andi	r25, 0x00	; 0
     5be:	b8 01       	movw	r22, r16
     5c0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     5c4:	80 93 a4 01 	sts	0x01A4, r24
	alarm_enabled = (eeprom_read_byte(5) & 0x7F);
     5c8:	85 e0       	ldi	r24, 0x05	; 5
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__eerd_byte_m165pa>
     5d0:	8f 77       	andi	r24, 0x7F	; 127
     5d2:	80 93 a5 01 	sts	0x01A5, r24
	
	// ground all grounded pins
	DDRA  = 0x00;
     5d6:	11 b8       	out	0x01, r1	; 1
	DDRB  = 0x00;
     5d8:	14 b8       	out	0x04, r1	; 4
	DDRC  = 0x00;
     5da:	17 b8       	out	0x07, r1	; 7
	DDRD  = 0x00;
     5dc:	1a b8       	out	0x0a, r1	; 10
	DDRE  = 0x00;
     5de:	1d b8       	out	0x0d, r1	; 13
	DDRG  = 0x00;
     5e0:	13 ba       	out	0x13, r1	; 19
	PORTA = 0x00;
     5e2:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;
     5e4:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
     5e6:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     5e8:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
     5ea:	1e b8       	out	0x0e, r1	; 14
	PORTG = 0x00;
     5ec:	14 ba       	out	0x14, r1	; 20
	
	// setup pins
	DDRx_RINGS  = _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     5ee:	87 e3       	ldi	r24, 0x37	; 55
     5f0:	80 bb       	out	0x10, r24	; 16
	PORTx_RINGS = _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     5f2:	81 bb       	out	0x11, r24	; 17
	
	// setup inputs and outputs
	DDRx_BUTTON1 &= ~_BV(PIN_BUTTON1);
     5f4:	23 98       	cbi	0x04, 3	; 4
	DDRx_BUTTON2 &= ~_BV(PIN_BUTTON2);
     5f6:	21 98       	cbi	0x04, 1	; 4
	PORTx_BUTTON1 |= _BV(PIN_BUTTON1);
     5f8:	2b 9a       	sbi	0x05, 3	; 5
	PORTx_BUTTON2 |= _BV(PIN_BUTTON2);
     5fa:	29 9a       	sbi	0x05, 1	; 5
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     5fc:	14 9a       	sbi	0x02, 4	; 2
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
     5fe:	0c 98       	cbi	0x01, 4	; 1
	DDRx_MOTOR |= _BV(PIN_MOTOR);
     600:	0e 9a       	sbi	0x01, 6	; 1
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
     602:	13 9a       	sbi	0x02, 3	; 2
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
     604:	0b 98       	cbi	0x01, 3	; 1
     606:	ea e5       	ldi	r30, 0x5A	; 90
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	ae e1       	ldi	r26, 0x1E	; 30
     60c:	b1 e0       	ldi	r27, 0x01	; 1
     60e:	00 e0       	ldi	r16, 0x00	; 0
     610:	11 e0       	ldi	r17, 0x01	; 1
     612:	4e e1       	ldi	r20, 0x1E	; 30
	for (uint8_t i = 0; i < 30; i++)
	{
		uint8_t* p = portx[i];
     614:	30 81       	ld	r19, Z
     616:	21 81       	ldd	r18, Z+1	; 0x01
     618:	32 96       	adiw	r30, 0x02	; 2
     61a:	83 2f       	mov	r24, r19
     61c:	92 2f       	mov	r25, r18
	*last_led_port &= ~last_led_pin;
	*last_led_ddr &= ~last_led_pin;
	PORTx_RINGS = PORTx_RINGS | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
}

int main()
     61e:	98 01       	movw	r18, r16
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
	for (uint8_t i = 0; i < 30; i++)
	{
		uint8_t* p = portx[i];
		*p &= ~pins[i];
     620:	e8 01       	movw	r28, r16
     622:	69 91       	ld	r22, Y+
     624:	8e 01       	movw	r16, r28
     626:	60 95       	com	r22
     628:	ec 01       	movw	r28, r24
     62a:	58 81       	ld	r21, Y
     62c:	56 23       	and	r21, r22
     62e:	58 83       	st	Y, r21
		uint8_t* d = ddrx[i];
     630:	6c 91       	ld	r22, X
     632:	11 96       	adiw	r26, 0x01	; 1
     634:	5c 91       	ld	r21, X
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	86 2f       	mov	r24, r22
     63c:	95 2f       	mov	r25, r21
		*d &= ~pins[i];
     63e:	e9 01       	movw	r28, r18
     640:	38 81       	ld	r19, Y
     642:	30 95       	com	r19
     644:	ec 01       	movw	r28, r24
     646:	28 81       	ld	r18, Y
     648:	23 23       	and	r18, r19
     64a:	28 83       	st	Y, r18
     64c:	41 50       	subi	r20, 0x01	; 1
	PORTx_BUZZER |= _BV(PIN_BUZZER);
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
	DDRx_MOTOR |= _BV(PIN_MOTOR);
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
	for (uint8_t i = 0; i < 30; i++)
     64e:	11 f7       	brne	.-60     	; 0x614 <main+0xcc>
		uint8_t* p = portx[i];
		*p &= ~pins[i];
		uint8_t* d = ddrx[i];
		*d &= ~pins[i];
	}
	last_led_port = portx[0];
     650:	80 91 5a 01 	lds	r24, 0x015A
     654:	90 91 5b 01 	lds	r25, 0x015B
     658:	90 93 a2 01 	sts	0x01A2, r25
     65c:	80 93 a1 01 	sts	0x01A1, r24
	last_led_ddr = ddrx[0];
     660:	80 91 1e 01 	lds	r24, 0x011E
     664:	90 91 1f 01 	lds	r25, 0x011F
     668:	90 93 af 01 	sts	0x01AF, r25
     66c:	80 93 ae 01 	sts	0x01AE, r24
	last_led_pin = pins[0];
     670:	80 91 00 01 	lds	r24, 0x0100
     674:	80 93 ab 01 	sts	0x01AB, r24
	
	// setup async timer 2
	ASSR = _BV(AS2); // enable async xtal input
     678:	88 e0       	ldi	r24, 0x08	; 8
     67a:	80 93 b6 00 	sts	0x00B6, r24
	OCR2A = MOTOR_TICK_LENGTH; // set the tick length
     67e:	26 e0       	ldi	r18, 0x06	; 6
     680:	20 93 b3 00 	sts	0x00B3, r18
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A); // enable overflow and tick interrupt
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(CS22) | 0 | _BV(CS20); // start timer with clock div 128
     68a:	95 e0       	ldi	r25, 0x05	; 5
     68c:	90 93 b0 00 	sts	0x00B0, r25
	
	// setup timer 0
	#if F_CPU == 1000000
	TCCR0A = _BV(CS00); // start timer with clk div 1
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	94 bd       	out	0x24, r25	; 36
	#elif F_CPU == 8000000
	TCCR0A = _BV(CS01); // start timer with clk div 8
	#else
	#error bad F_CPU
	#endif
	OCR0A = 0x80; // setup compare match at 50% duty cycle
     694:	30 e8       	ldi	r19, 0x80	; 128
     696:	37 bd       	out	0x27, r19	; 39
	TIMSK0 = _BV(TOIE0) | _BV(OCIE0A); // enable overflow and compare match interrupts
     698:	80 93 6e 00 	sts	0x006E, r24
	
	// setup button interrupts
	PCMSK1 |= _BV(PCINT11) | _BV(PCINT9);
     69c:	80 91 6c 00 	lds	r24, 0x006C
     6a0:	8a 60       	ori	r24, 0x0A	; 10
     6a2:	80 93 6c 00 	sts	0x006C, r24
	EIMSK |= _BV(PCIE1);
     6a6:	ed 9a       	sbi	0x1d, 5	; 29
	
	// setup power saving features
	power_all_disable(); // PRR = 0x0F; // disable all (ADC, USART, SPI, TMR1)
     6a8:	80 91 64 00 	lds	r24, 0x0064
     6ac:	8f 60       	ori	r24, 0x0F	; 15
     6ae:	80 93 64 00 	sts	0x0064, r24
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
     6b2:	23 bf       	out	0x33, r18	; 51
	
	sei(); // enable global interrupts
     6b4:	78 94       	sei
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
	uint8_t eeprom_is_dirty = 0;
	
	mode = MODE_SLEEPING;
     6b6:	10 92 9f 01 	sts	0x019F, r1
	to_sleep = 1;
     6ba:	90 93 a0 01 	sts	0x01A0, r25
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
	uint8_t eeprom_is_dirty = 0;
     6be:	d0 e0       	ldi	r29, 0x00	; 0
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
     6c0:	10 e0       	ldi	r17, 0x00	; 0
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
     6c2:	88 24       	eor	r8, r8
     6c4:	99 24       	eor	r9, r9
     6c6:	54 01       	movw	r10, r8
	power_all_disable(); // PRR = 0x0F; // disable all (ADC, USART, SPI, TMR1)
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
     6c8:	cc 24       	eor	r12, r12
     6ca:	dd 24       	eor	r13, r13
     6cc:	76 01       	movw	r14, r12
		}
		else if (mode == MODE_ALARMING)
		{
			if (bit_is_set(cur_second, 0))
			{
				display_second = -1;
     6ce:	cf ef       	ldi	r28, 0xFF	; 255
			#ifdef ENABLE_RANDOM_MODE
			if (button1_is_down())
			{
				display_second = (random() & 0x7F) % 60;
				display_minute = (random() & 0x7F) % 60;
				display_hour   = (random() & 0x7F) % 12;
     6d0:	bc e0       	ldi	r27, 0x0C	; 12
     6d2:	4b 2e       	mov	r4, r27
     6d4:	51 2c       	mov	r5, r1
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     6d6:	03 e0       	ldi	r16, 0x03	; 3
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	38 2e       	mov	r3, r24
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <main+0x198>
				eeprom_update_byte(5, alarm_enabled);
				
				eeprom_is_dirty = 0;
			}
			
			if (alarm_active == 0)
     6de:	d0 e0       	ldi	r29, 0x00	; 0
	mode = MODE_SLEEPING;
	to_sleep = 1;
	
	for (;;)
	{
		if (mode == MODE_SLEEPING || mode == MODE_ALARMING)
     6e0:	80 91 9f 01 	lds	r24, 0x019F
     6e4:	88 23       	and	r24, r24
     6e6:	29 f0       	breq	.+10     	; 0x6f2 <main+0x1aa>
     6e8:	80 91 9f 01 	lds	r24, 0x019F
     6ec:	8a 30       	cpi	r24, 0x0A	; 10
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <main+0x1aa>
     6f0:	56 c0       	rjmp	.+172    	; 0x79e <main+0x256>
		{
			if (button2_is_down())
     6f2:	19 99       	sbic	0x03, 1	; 3
     6f4:	3a c0       	rjmp	.+116    	; 0x76a <main+0x222>
			{
				// go directly into settings mode
				mode = MODE_SETTIME_HOUR;
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     6fc:	10 92 a0 01 	sts	0x01A0, r1
				
				display_second = -1;
     700:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
     704:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
     708:	c0 93 ac 01 	sts	0x01AC, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70c:	41 e2       	ldi	r20, 0x21	; 33
     70e:	4a 95       	dec	r20
     710:	f1 f7       	brne	.-4      	; 0x70e <main+0x1c6>
     712:	00 00       	nop
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     714:	45 e0       	ldi	r20, 0x05	; 5
     716:	ec e3       	ldi	r30, 0x3C	; 60
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	24 c0       	rjmp	.+72     	; 0x764 <main+0x21c>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     71c:	80 91 a8 01 	lds	r24, 0x01A8
     720:	80 ff       	sbrs	r24, 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <main+0x1e0>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	01 c0       	rjmp	.+2      	; 0x72a <main+0x1e2>
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     72e:	80 91 a7 01 	lds	r24, 0x01A7
     732:	8c 30       	cpi	r24, 0x0C	; 12
     734:	18 f0       	brcs	.+6      	; 0x73c <main+0x1f4>
     736:	2a e3       	ldi	r18, 0x3A	; 58
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <main+0x1f8>
     73c:	2c e1       	ldi	r18, 0x1C	; 28
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	80 91 a8 01 	lds	r24, 0x01A8
     744:	64 2f       	mov	r22, r20
     746:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     74a:	b9 01       	movw	r22, r18
     74c:	69 0f       	add	r22, r25
     74e:	71 1d       	adc	r23, r1
     750:	cb 01       	movw	r24, r22
     752:	bf 01       	movw	r22, r30
     754:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     758:	80 93 b1 01 	sts	0x01B1, r24
					
					// indicate current settings
					display_hour = cur_hour;
     75c:	80 91 a7 01 	lds	r24, 0x01A7
     760:	80 93 ac 01 	sts	0x01AC, r24
				display_minute = -1;
				display_hour = -1;
				
				debounce();
				
				while (button2_is_down())
     764:	19 9b       	sbis	0x03, 1	; 3
     766:	da cf       	rjmp	.-76     	; 0x71c <main+0x1d4>
     768:	04 c3       	rjmp	.+1544   	; 0xd72 <main+0x82a>
					display_hour = cur_hour;
				}
				
				debounce();
			}
			else if (button1_is_down())
     76a:	1b 99       	sbic	0x03, 3	; 3
     76c:	12 c0       	rjmp	.+36     	; 0x792 <main+0x24a>
			{
				// go into time display mode
				mode = MODE_SHOW_ENTERING;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 9f 01 	sts	0x019F, r24
				display_hour = -1;
     774:	c0 93 ac 01 	sts	0x01AC, r28
				display_minute = -1;
     778:	c0 93 b1 01 	sts	0x01B1, r28
				display_second = -1;
     77c:	c0 93 ad 01 	sts	0x01AD, r28
				animation_cnt = 0;
     780:	10 92 a6 01 	sts	0x01A6, r1
				to_sleep = 0;
     784:	10 92 a0 01 	sts	0x01A0, r1
     788:	81 e2       	ldi	r24, 0x21	; 33
     78a:	8a 95       	dec	r24
     78c:	f1 f7       	brne	.-4      	; 0x78a <main+0x242>
     78e:	00 00       	nop
     790:	c9 c0       	rjmp	.+402    	; 0x924 <main+0x3dc>
				held_cnt = 0;
				debounce();
			}
			else if (mode != MODE_ALARMING)
     792:	80 91 9f 01 	lds	r24, 0x019F
     796:	8a 30       	cpi	r24, 0x0A	; 10
     798:	09 f0       	breq	.+2      	; 0x79c <main+0x254>
     79a:	eb c0       	rjmp	.+470    	; 0x972 <main+0x42a>
     79c:	46 c5       	rjmp	.+2700   	; 0x122a <main+0xce2>
			{
				to_sleep = 1;
			}
		}
		else if (mode == MODE_SHOW_ENTERING)
     79e:	80 91 9f 01 	lds	r24, 0x019F
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <main+0x260>
     7a6:	82 c0       	rjmp	.+260    	; 0x8ac <main+0x364>
		{
			if (battery_is_low())
     7a8:	13 99       	sbic	0x02, 3	; 2
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <main+0x26c>
			{
				mode = MODE_CURTIME_SHOWING; // save power by ignoring animation
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	80 93 9f 01 	sts	0x019F, r24
     7b2:	3b c5       	rjmp	.+2678   	; 0x122a <main+0xce2>
			{
				// show a nice startup animation
				
				timeout_cnt = 0; // no timeout during animation
				
				if (button1_is_down())
     7b4:	1b 99       	sbic	0x03, 3	; 3
     7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <main+0x28c>
				{
					held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     7b8:	49 ec       	ldi	r20, 0xC9	; 201
     7ba:	c4 16       	cp	r12, r20
     7bc:	d1 04       	cpc	r13, r1
     7be:	e1 04       	cpc	r14, r1
     7c0:	f1 04       	cpc	r15, r1
     7c2:	28 f4       	brcc	.+10     	; 0x7ce <main+0x286>
     7c4:	08 94       	sec
     7c6:	c1 1c       	adc	r12, r1
     7c8:	d1 1c       	adc	r13, r1
     7ca:	e1 1c       	adc	r14, r1
     7cc:	f1 1c       	adc	r15, r1
					to_sleep = 0;
     7ce:	10 92 a0 01 	sts	0x01A0, r1
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <main+0x292>
				}
				else
				{
					held_cnt = 0;
     7d4:	cc 24       	eor	r12, r12
     7d6:	dd 24       	eor	r13, r13
     7d8:	76 01       	movw	r14, r12
				}
				
				// move the LEDs if it's time to do so according to the animation speed
				if (animation_cnt >= ANIMATION_SPEED_1)
     7da:	80 91 a6 01 	lds	r24, 0x01A6
				{
					if (display_second < cur_second)    display_second++; else display_second = cur_second;
     7de:	20 91 ad 01 	lds	r18, 0x01AD
     7e2:	80 91 a8 01 	lds	r24, 0x01A8
     7e6:	33 27       	eor	r19, r19
     7e8:	27 fd       	sbrc	r18, 7
     7ea:	30 95       	com	r19
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	28 17       	cp	r18, r24
     7f0:	39 07       	cpc	r19, r25
     7f2:	24 f4       	brge	.+8      	; 0x7fc <main+0x2b4>
     7f4:	80 91 ad 01 	lds	r24, 0x01AD
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <main+0x2b8>
     7fc:	80 91 a8 01 	lds	r24, 0x01A8
     800:	80 93 ad 01 	sts	0x01AD, r24
					if (display_minute < cur_minute)    display_minute++; else display_minute = cur_minute;
     804:	20 91 b1 01 	lds	r18, 0x01B1
     808:	80 91 a9 01 	lds	r24, 0x01A9
     80c:	33 27       	eor	r19, r19
     80e:	27 fd       	sbrc	r18, 7
     810:	30 95       	com	r19
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	28 17       	cp	r18, r24
     816:	39 07       	cpc	r19, r25
     818:	24 f4       	brge	.+8      	; 0x822 <main+0x2da>
     81a:	80 91 b1 01 	lds	r24, 0x01B1
     81e:	8f 5f       	subi	r24, 0xFF	; 255
     820:	02 c0       	rjmp	.+4      	; 0x826 <main+0x2de>
     822:	80 91 a9 01 	lds	r24, 0x01A9
     826:	80 93 b1 01 	sts	0x01B1, r24
					if (display_hour < (cur_hour % 12)) display_hour++;   else display_hour   = cur_hour;
     82a:	20 91 ac 01 	lds	r18, 0x01AC
     82e:	80 91 a7 01 	lds	r24, 0x01A7
     832:	33 27       	eor	r19, r19
     834:	27 fd       	sbrc	r18, 7
     836:	30 95       	com	r19
     838:	6c e0       	ldi	r22, 0x0C	; 12
     83a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     83e:	89 2f       	mov	r24, r25
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	28 17       	cp	r18, r24
     844:	39 07       	cpc	r19, r25
     846:	24 f4       	brge	.+8      	; 0x850 <main+0x308>
     848:	80 91 ac 01 	lds	r24, 0x01AC
     84c:	8f 5f       	subi	r24, 0xFF	; 255
     84e:	02 c0       	rjmp	.+4      	; 0x854 <main+0x30c>
     850:	80 91 a7 01 	lds	r24, 0x01A7
     854:	80 93 ac 01 	sts	0x01AC, r24
					animation_cnt = 0;
     858:	10 92 a6 01 	sts	0x01A6, r1
				}
				
				// the animation finishes when the displayed time matches the current time
				if (display_second == cur_second && display_minute == cur_minute && display_hour == cur_hour) mode = MODE_CURTIME_SHOWING;
     85c:	20 91 ad 01 	lds	r18, 0x01AD
     860:	80 91 a8 01 	lds	r24, 0x01A8
     864:	33 27       	eor	r19, r19
     866:	27 fd       	sbrc	r18, 7
     868:	30 95       	com	r19
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	28 17       	cp	r18, r24
     86e:	39 07       	cpc	r19, r25
     870:	09 f0       	breq	.+2      	; 0x874 <main+0x32c>
     872:	d8 c4       	rjmp	.+2480   	; 0x1224 <main+0xcdc>
     874:	20 91 b1 01 	lds	r18, 0x01B1
     878:	80 91 a9 01 	lds	r24, 0x01A9
     87c:	33 27       	eor	r19, r19
     87e:	27 fd       	sbrc	r18, 7
     880:	30 95       	com	r19
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	28 17       	cp	r18, r24
     886:	39 07       	cpc	r19, r25
     888:	09 f0       	breq	.+2      	; 0x88c <main+0x344>
     88a:	cc c4       	rjmp	.+2456   	; 0x1224 <main+0xcdc>
     88c:	20 91 ac 01 	lds	r18, 0x01AC
     890:	80 91 a7 01 	lds	r24, 0x01A7
     894:	33 27       	eor	r19, r19
     896:	27 fd       	sbrc	r18, 7
     898:	30 95       	com	r19
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	28 17       	cp	r18, r24
     89e:	39 07       	cpc	r19, r25
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <main+0x35c>
     8a2:	c0 c4       	rjmp	.+2432   	; 0x1224 <main+0xcdc>
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	80 93 9f 01 	sts	0x019F, r24
     8aa:	bc c4       	rjmp	.+2424   	; 0x1224 <main+0xcdc>
			}
		}
		else if (mode == MODE_CURTIME_SHOWING)
     8ac:	80 91 9f 01 	lds	r24, 0x019F
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <main+0x36e>
     8b4:	55 c0       	rjmp	.+170    	; 0x960 <main+0x418>
		{
			// indicate current time
			display_minute = cur_minute;
     8b6:	80 91 a9 01 	lds	r24, 0x01A9
     8ba:	80 93 b1 01 	sts	0x01B1, r24
			display_hour   = cur_hour;
     8be:	80 91 a7 01 	lds	r24, 0x01A7
     8c2:	80 93 ac 01 	sts	0x01AC, r24
			
			if (battery_is_low())
     8c6:	13 99       	sbic	0x02, 3	; 2
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <main+0x388>
			{
				// save some power by not showing seconds
				// this also indicates low battery status to the user
				display_second = -1;
     8ca:	c0 93 ad 01 	sts	0x01AD, r28
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <main+0x390>
			}
			else
			{
				display_second = cur_second;
     8d0:	80 91 a8 01 	lds	r24, 0x01A8
     8d4:	80 93 ad 01 	sts	0x01AD, r24
     8d8:	51 e2       	ldi	r21, 0x21	; 33
     8da:	5a 95       	dec	r21
     8dc:	f1 f7       	brne	.-4      	; 0x8da <main+0x392>
     8de:	00 00       	nop
			}
			
			debounce(); // this delay both debounces and also helps with pacing the counters
			
			if (button1_is_down())
     8e0:	1b 99       	sbic	0x03, 3	; 3
     8e2:	0e c0       	rjmp	.+28     	; 0x900 <main+0x3b8>
			{
				held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     8e4:	69 ec       	ldi	r22, 0xC9	; 201
     8e6:	c6 16       	cp	r12, r22
     8e8:	d1 04       	cpc	r13, r1
     8ea:	e1 04       	cpc	r14, r1
     8ec:	f1 04       	cpc	r15, r1
     8ee:	28 f4       	brcc	.+10     	; 0x8fa <main+0x3b2>
     8f0:	08 94       	sec
     8f2:	c1 1c       	adc	r12, r1
     8f4:	d1 1c       	adc	r13, r1
     8f6:	e1 1c       	adc	r14, r1
     8f8:	f1 1c       	adc	r15, r1
				timeout_cnt = 0;
				to_sleep = 0;
     8fa:	10 92 a0 01 	sts	0x01A0, r1
     8fe:	92 c4       	rjmp	.+2340   	; 0x1224 <main+0xcdc>
			}
			else
			{
				if (battery_is_low())
     900:	13 99       	sbic	0x02, 3	; 2
     902:	06 c0       	rjmp	.+12     	; 0x910 <main+0x3c8>
				{
					// save power if battery is low
					// or if user holds down the button for longer than 5 seconds
					mode = MODE_SLEEPING;
     904:	10 92 9f 01 	sts	0x019F, r1
					to_sleep = 1;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 a0 01 	sts	0x01A0, r24
     90e:	0a c0       	rjmp	.+20     	; 0x924 <main+0x3dc>
				}
				else if (held_cnt >= HOLD_CNT_THRESH)
     910:	78 ec       	ldi	r23, 0xC8	; 200
     912:	c7 16       	cp	r12, r23
     914:	d1 04       	cpc	r13, r1
     916:	e1 04       	cpc	r14, r1
     918:	f1 04       	cpc	r15, r1
     91a:	40 f0       	brcs	.+16     	; 0x92c <main+0x3e4>
				{
					mode = MODE_SHOW_EXITING;
     91c:	30 92 9f 01 	sts	0x019F, r3
					animation_cnt = 0;
     920:	10 92 a6 01 	sts	0x01A6, r1
						to_sleep = 0;
					}
				}
				
				// no longer held down
				held_cnt = 0;
     924:	cc 24       	eor	r12, r12
     926:	dd 24       	eor	r13, r13
     928:	76 01       	movw	r14, r12
     92a:	7f c4       	rjmp	.+2302   	; 0x122a <main+0xce2>
					mode = MODE_SHOW_EXITING;
					animation_cnt = 0;
				}
				else
				{
					timeout_cnt = (timeout_cnt > TIMEOUT_THRESH) ? timeout_cnt : (timeout_cnt + 1);
     92c:	81 e9       	ldi	r24, 0x91	; 145
     92e:	88 16       	cp	r8, r24
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	98 06       	cpc	r9, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	a8 06       	cpc	r10, r24
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	b8 06       	cpc	r11, r24
     93c:	78 f7       	brcc	.-34     	; 0x91c <main+0x3d4>
     93e:	08 94       	sec
     940:	81 1c       	adc	r8, r1
     942:	91 1c       	adc	r9, r1
     944:	a1 1c       	adc	r10, r1
     946:	b1 1c       	adc	r11, r1
					if (timeout_cnt >= TIMEOUT_THRESH)
     948:	40 e9       	ldi	r20, 0x90	; 144
     94a:	84 16       	cp	r8, r20
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	94 06       	cpc	r9, r20
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	a4 06       	cpc	r10, r20
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	b4 06       	cpc	r11, r20
     958:	08 f7       	brcc	.-62     	; 0x91c <main+0x3d4>
						animation_cnt = 0;
					}
					else
					{
						// did not timeout yet, do not sleep
						to_sleep = 0;
     95a:	10 92 a0 01 	sts	0x01A0, r1
     95e:	e2 cf       	rjmp	.-60     	; 0x924 <main+0x3dc>
				
				// no longer held down
				held_cnt = 0;
			}
		}
		else if (mode == MODE_SHOW_EXITING)
     960:	80 91 9f 01 	lds	r24, 0x019F
     964:	83 30       	cpi	r24, 0x03	; 3
     966:	09 f0       	breq	.+2      	; 0x96a <main+0x422>
     968:	65 c0       	rjmp	.+202    	; 0xa34 <main+0x4ec>
		{
			if (battery_is_low())
     96a:	13 99       	sbic	0x02, 3	; 2
     96c:	06 c0       	rjmp	.+12     	; 0x97a <main+0x432>
			{
				// save power by ignoring animation
				mode = MODE_SLEEPING;
     96e:	10 92 9f 01 	sts	0x019F, r1
				to_sleep = 1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 a0 01 	sts	0x01A0, r24
     978:	58 c4       	rjmp	.+2224   	; 0x122a <main+0xce2>
			{
				// show a nice exit animation
				
				timeout_cnt = 0; // no timeout during animation
				
				if (button1_is_down())
     97a:	1b 99       	sbic	0x03, 3	; 3
     97c:	11 c0       	rjmp	.+34     	; 0x9a0 <main+0x458>
				{
					held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     97e:	59 ec       	ldi	r21, 0xC9	; 201
     980:	c5 16       	cp	r12, r21
     982:	d1 04       	cpc	r13, r1
     984:	e1 04       	cpc	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	28 f4       	brcc	.+10     	; 0x994 <main+0x44c>
     98a:	08 94       	sec
     98c:	c1 1c       	adc	r12, r1
     98e:	d1 1c       	adc	r13, r1
     990:	e1 1c       	adc	r14, r1
     992:	f1 1c       	adc	r15, r1
					to_sleep = 0;
     994:	10 92 a0 01 	sts	0x01A0, r1
					mode = MODE_SHOW_ENTERING; // button is down, so undo the animation
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 9f 01 	sts	0x019F, r24
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <main+0x45e>
				}
				else
				{
					held_cnt = 0;
     9a0:	cc 24       	eor	r12, r12
     9a2:	dd 24       	eor	r13, r13
     9a4:	76 01       	movw	r14, r12
				}
				
				// move the LEDs if it's time to do so according to the animation speed
				if (animation_cnt >= ANIMATION_SPEED_2)
     9a6:	80 91 a6 01 	lds	r24, 0x01A6
				{
					if (display_second >= 0) display_second++;
     9aa:	80 91 ad 01 	lds	r24, 0x01AD
     9ae:	87 fd       	sbrc	r24, 7
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <main+0x474>
     9b2:	80 91 ad 01 	lds	r24, 0x01AD
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	80 93 ad 01 	sts	0x01AD, r24
					if (display_minute >= 0) display_minute++;
     9bc:	80 91 b1 01 	lds	r24, 0x01B1
     9c0:	87 fd       	sbrc	r24, 7
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <main+0x486>
     9c4:	80 91 b1 01 	lds	r24, 0x01B1
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 b1 01 	sts	0x01B1, r24
					if (display_hour   >= 0) display_hour++;
     9ce:	80 91 ac 01 	lds	r24, 0x01AC
     9d2:	87 fd       	sbrc	r24, 7
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <main+0x498>
     9d6:	80 91 ac 01 	lds	r24, 0x01AC
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	80 93 ac 01 	sts	0x01AC, r24
					animation_cnt = 0;
     9e0:	10 92 a6 01 	sts	0x01A6, r1
					if (display_second >= 60) display_second = -1;
     9e4:	80 91 ad 01 	lds	r24, 0x01AD
     9e8:	8c 33       	cpi	r24, 0x3C	; 60
     9ea:	14 f0       	brlt	.+4      	; 0x9f0 <main+0x4a8>
     9ec:	c0 93 ad 01 	sts	0x01AD, r28
					if (display_minute >= 60) display_minute = -1;
     9f0:	80 91 b1 01 	lds	r24, 0x01B1
     9f4:	8c 33       	cpi	r24, 0x3C	; 60
     9f6:	14 f0       	brlt	.+4      	; 0x9fc <main+0x4b4>
     9f8:	c0 93 b1 01 	sts	0x01B1, r28
					if (display_hour == 12 || display_hour >= 24) display_hour = -1;
     9fc:	80 91 ac 01 	lds	r24, 0x01AC
     a00:	8c 30       	cpi	r24, 0x0C	; 12
     a02:	21 f0       	breq	.+8      	; 0xa0c <main+0x4c4>
     a04:	80 91 ac 01 	lds	r24, 0x01AC
     a08:	88 31       	cpi	r24, 0x18	; 24
     a0a:	14 f0       	brlt	.+4      	; 0xa10 <main+0x4c8>
     a0c:	c0 93 ac 01 	sts	0x01AC, r28
				}
				
				// go to sleep once animation is finished
				if (display_second < 0 && display_minute < 0 && display_hour < 0)
     a10:	80 91 ad 01 	lds	r24, 0x01AD
     a14:	87 ff       	sbrs	r24, 7
     a16:	06 c4       	rjmp	.+2060   	; 0x1224 <main+0xcdc>
     a18:	80 91 b1 01 	lds	r24, 0x01B1
     a1c:	87 ff       	sbrs	r24, 7
     a1e:	02 c4       	rjmp	.+2052   	; 0x1224 <main+0xcdc>
     a20:	80 91 ac 01 	lds	r24, 0x01AC
     a24:	87 ff       	sbrs	r24, 7
     a26:	fe c3       	rjmp	.+2044   	; 0x1224 <main+0xcdc>
				{
					mode = MODE_SLEEPING;
     a28:	10 92 9f 01 	sts	0x019F, r1
					to_sleep = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 a0 01 	sts	0x01A0, r24
     a32:	f8 c3       	rjmp	.+2032   	; 0x1224 <main+0xcdc>
				}
			}
		}
		else if (mode == MODE_SETTIME_HOUR)
     a34:	80 91 9f 01 	lds	r24, 0x019F
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	09 f0       	breq	.+2      	; 0xa3e <main+0x4f6>
     a3c:	ce c0       	rjmp	.+412    	; 0xbda <main+0x692>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     a3e:	80 91 a8 01 	lds	r24, 0x01A8
     a42:	80 ff       	sbrs	r24, 0
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <main+0x502>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <main+0x504>
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	80 93 ad 01 	sts	0x01AD, r24
			
			// indicate AM or PM
			display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     a50:	80 91 a7 01 	lds	r24, 0x01A7
     a54:	8c 30       	cpi	r24, 0x0C	; 12
     a56:	18 f0       	brcs	.+6      	; 0xa5e <main+0x516>
     a58:	2a e3       	ldi	r18, 0x3A	; 58
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <main+0x51a>
     a5e:	2c e1       	ldi	r18, 0x1C	; 28
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	80 91 a8 01 	lds	r24, 0x01A8
     a66:	65 e0       	ldi	r22, 0x05	; 5
     a68:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     a6c:	b9 01       	movw	r22, r18
     a6e:	69 0f       	add	r22, r25
     a70:	71 1d       	adc	r23, r1
     a72:	cb 01       	movw	r24, r22
     a74:	6c e3       	ldi	r22, 0x3C	; 60
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     a7c:	80 93 b1 01 	sts	0x01B1, r24
			
			// indicate current settings
			display_hour = cur_hour;
     a80:	80 91 a7 01 	lds	r24, 0x01A7
     a84:	80 93 ac 01 	sts	0x01AC, r24
			
			if (button1_is_down())
     a88:	1b 99       	sbic	0x03, 3	; 3
     a8a:	6f c0       	rjmp	.+222    	; 0xb6a <main+0x622>
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
     a8c:	80 91 a7 01 	lds	r24, 0x01A7
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	68 e1       	ldi	r22, 0x18	; 24
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     a9c:	80 93 a7 01 	sts	0x01A7, r24
				display_hour = cur_hour;
     aa0:	80 91 a7 01 	lds	r24, 0x01A7
     aa4:	80 93 ac 01 	sts	0x01AC, r24
				
				eeprom_is_dirty = 1;
				
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     aa8:	80 91 a7 01 	lds	r24, 0x01A7
     aac:	8c 30       	cpi	r24, 0x0C	; 12
     aae:	18 f0       	brcs	.+6      	; 0xab6 <main+0x56e>
     ab0:	2a e3       	ldi	r18, 0x3A	; 58
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <main+0x572>
     ab6:	2c e1       	ldi	r18, 0x1C	; 28
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	80 91 a8 01 	lds	r24, 0x01A8
     abe:	65 e0       	ldi	r22, 0x05	; 5
     ac0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     ac4:	a9 01       	movw	r20, r18
     ac6:	49 0f       	add	r20, r25
     ac8:	51 1d       	adc	r21, r1
     aca:	ca 01       	movw	r24, r20
     acc:	6c e3       	ldi	r22, 0x3C	; 60
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     ad4:	80 93 b1 01 	sts	0x01B1, r24
     ad8:	51 e2       	ldi	r21, 0x21	; 33
     ada:	5a 95       	dec	r21
     adc:	f1 f7       	brne	.-4      	; 0xada <main+0x592>
     ade:	00 00       	nop
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     ae0:	40 e0       	ldi	r20, 0x00	; 0
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     ae2:	e5 e0       	ldi	r30, 0x05	; 5
     ae4:	ac e3       	ldi	r26, 0x3C	; 60
     ae6:	6a 2e       	mov	r6, r26
     ae8:	71 2c       	mov	r7, r1
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     aea:	29 c0       	rjmp	.+82     	; 0xb3e <main+0x5f6>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     aec:	80 91 a8 01 	lds	r24, 0x01A8
     af0:	80 ff       	sbrs	r24, 0
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <main+0x5b0>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	01 c0       	rjmp	.+2      	; 0xafa <main+0x5b2>
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     afe:	80 91 a7 01 	lds	r24, 0x01A7
     b02:	8c 30       	cpi	r24, 0x0C	; 12
     b04:	18 f0       	brcs	.+6      	; 0xb0c <main+0x5c4>
     b06:	2a e3       	ldi	r18, 0x3A	; 58
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <main+0x5c8>
     b0c:	2c e1       	ldi	r18, 0x1C	; 28
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	80 91 a8 01 	lds	r24, 0x01A8
     b14:	6e 2f       	mov	r22, r30
     b16:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     b1a:	b9 01       	movw	r22, r18
     b1c:	69 0f       	add	r22, r25
     b1e:	71 1d       	adc	r23, r1
     b20:	cb 01       	movw	r24, r22
     b22:	b3 01       	movw	r22, r6
     b24:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     b28:	80 93 b1 01 	sts	0x01B1, r24
					
					// indicate current settings
					display_hour = cur_hour;
     b2c:	80 91 a7 01 	lds	r24, 0x01A7
     b30:	80 93 ac 01 	sts	0x01AC, r24
     b34:	71 e2       	ldi	r23, 0x21	; 33
     b36:	7a 95       	dec	r23
     b38:	f1 f7       	brne	.-4      	; 0xb36 <main+0x5ee>
     b3a:	00 00       	nop
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	24 2f       	mov	r18, r20
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	11 23       	and	r17, r17
     b44:	19 f4       	brne	.+6      	; 0xb4c <main+0x604>
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <main+0x608>
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	28 17       	cp	r18, r24
     b52:	39 07       	cpc	r19, r25
     b54:	14 f4       	brge	.+4      	; 0xb5a <main+0x612>
     b56:	1b 9b       	sbis	0x03, 3	; 3
     b58:	c9 cf       	rjmp	.-110    	; 0xaec <main+0x5a4>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     b5a:	1b 9b       	sbis	0x03, 3	; 3
     b5c:	10 c0       	rjmp	.+32     	; 0xb7e <main+0x636>
     b5e:	81 e2       	ldi	r24, 0x21	; 33
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <main+0x618>
     b64:	00 00       	nop
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
				display_hour = cur_hour;
				
				eeprom_is_dirty = 1;
     b66:	d1 e0       	ldi	r29, 0x01	; 1
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <main+0x632>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     b6a:	1b 9b       	sbis	0x03, 3	; 3
     b6c:	0a c0       	rjmp	.+20     	; 0xb82 <main+0x63a>
			{
				if (button_was_down != 0)
     b6e:	11 23       	and	r17, r17
     b70:	41 f0       	breq	.+16     	; 0xb82 <main+0x63a>
     b72:	41 e2       	ldi	r20, 0x21	; 33
     b74:	4a 95       	dec	r20
     b76:	f1 f7       	brne	.-4      	; 0xb74 <main+0x62c>
     b78:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <main+0x63a>
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
				display_hour = cur_hour;
				
				eeprom_is_dirty = 1;
     b7e:	d1 e0       	ldi	r29, 0x01	; 1
					display_hour = cur_hour;
					
					debounce();
				}
				
				button_was_down = 1;
     b80:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     b82:	19 99       	sbic	0x03, 1	; 3
     b84:	52 c3       	rjmp	.+1700   	; 0x122a <main+0xce2>
			{
				// indicate mode
				display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     b86:	80 91 a8 01 	lds	r24, 0x01A8
     b8a:	80 ff       	sbrs	r24, 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <main+0x64a>
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <main+0x64c>
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	80 93 ad 01 	sts	0x01AD, r24
				
				display_hour = -1;
     b98:	c0 93 ac 01 	sts	0x01AC, r28
				
				eeprom_is_dirty = 1;
				
				// goto next mode
				mode = MODE_SETTIME_MINUTE;
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     ba2:	10 92 a0 01 	sts	0x01A0, r1
     ba6:	51 e2       	ldi	r21, 0x21	; 33
     ba8:	5a 95       	dec	r21
     baa:	f1 f7       	brne	.-4      	; 0xba8 <main+0x660>
     bac:	00 00       	nop
     bae:	0d c0       	rjmp	.+26     	; 0xbca <main+0x682>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     bb0:	80 91 a8 01 	lds	r24, 0x01A8
     bb4:	80 ff       	sbrs	r24, 0
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <main+0x674>
     bb8:	85 e0       	ldi	r24, 0x05	; 5
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <main+0x676>
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate current settings
					display_minute = cur_minute;
     bc2:	80 91 a9 01 	lds	r24, 0x01A9
     bc6:	80 93 b1 01 	sts	0x01B1, r24
				mode = MODE_SETTIME_MINUTE;
				to_sleep = 0;
				
				debounce();
				
				while (button2_is_down())
     bca:	19 9b       	sbis	0x03, 1	; 3
     bcc:	f1 cf       	rjmp	.-30     	; 0xbb0 <main+0x668>
     bce:	61 e2       	ldi	r22, 0x21	; 33
     bd0:	6a 95       	dec	r22
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <main+0x688>
     bd4:	00 00       	nop
				// indicate mode
				display_second = bit_is_set(cur_second, 0) ? 5 : -1;
				
				display_hour = -1;
				
				eeprom_is_dirty = 1;
     bd6:	d1 e0       	ldi	r29, 0x01	; 1
     bd8:	28 c3       	rjmp	.+1616   	; 0x122a <main+0xce2>
				}
				
				debounce();
			}
		}
		else if (mode == MODE_SETTIME_MINUTE)
     bda:	80 91 9f 01 	lds	r24, 0x019F
     bde:	85 30       	cpi	r24, 0x05	; 5
     be0:	09 f0       	breq	.+2      	; 0xbe4 <main+0x69c>
     be2:	cb c0       	rjmp	.+406    	; 0xd7a <main+0x832>
		{			
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     be4:	80 91 a8 01 	lds	r24, 0x01A8
     be8:	80 ff       	sbrs	r24, 0
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <main+0x6a8>
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <main+0x6aa>
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	80 93 ad 01 	sts	0x01AD, r24
			
			// turn off
			display_hour = -1;
     bf6:	c0 93 ac 01 	sts	0x01AC, r28
			
			// show current settings
			display_minute = cur_minute;
     bfa:	80 91 a9 01 	lds	r24, 0x01A9
     bfe:	80 93 b1 01 	sts	0x01B1, r24
			
			if (button1_is_down())
     c02:	1b 99       	sbic	0x03, 3	; 3
     c04:	3c c0       	rjmp	.+120    	; 0xc7e <main+0x736>
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
     c06:	80 91 a9 01 	lds	r24, 0x01A9
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	6c e3       	ldi	r22, 0x3C	; 60
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     c16:	80 93 a9 01 	sts	0x01A9, r24
				display_minute = cur_minute;
     c1a:	80 91 a9 01 	lds	r24, 0x01A9
     c1e:	80 93 b1 01 	sts	0x01B1, r24
     c22:	71 e2       	ldi	r23, 0x21	; 33
     c24:	7a 95       	dec	r23
     c26:	f1 f7       	brne	.-4      	; 0xc24 <main+0x6dc>
     c28:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <main+0x70a>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     c2e:	80 91 a8 01 	lds	r24, 0x01A8
     c32:	80 ff       	sbrs	r24, 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <main+0x6f2>
     c36:	85 e0       	ldi	r24, 0x05	; 5
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <main+0x6f4>
     c3a:	8f ef       	ldi	r24, 0xFF	; 255
     c3c:	80 93 ad 01 	sts	0x01AD, r24
					
					// show current settings
					display_minute = cur_minute;
     c40:	80 91 a9 01 	lds	r24, 0x01A9
     c44:	80 93 b1 01 	sts	0x01B1, r24
     c48:	81 e2       	ldi	r24, 0x21	; 33
     c4a:	8a 95       	dec	r24
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <main+0x702>
     c4e:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     c50:	4f 5f       	subi	r20, 0xFF	; 255
     c52:	24 2f       	mov	r18, r20
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	11 23       	and	r17, r17
     c58:	19 f4       	brne	.+6      	; 0xc60 <main+0x718>
     c5a:	8a e0       	ldi	r24, 0x0A	; 10
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <main+0x71c>
     c60:	85 e0       	ldi	r24, 0x05	; 5
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	14 f4       	brge	.+4      	; 0xc6e <main+0x726>
     c6a:	1b 9b       	sbis	0x03, 3	; 3
     c6c:	e0 cf       	rjmp	.-64     	; 0xc2e <main+0x6e6>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     c6e:	1b 9b       	sbis	0x03, 3	; 3
     c70:	10 c0       	rjmp	.+32     	; 0xc92 <main+0x74a>
     c72:	d1 e2       	ldi	r29, 0x21	; 33
     c74:	da 95       	dec	r29
     c76:	f1 f7       	brne	.-4      	; 0xc74 <main+0x72c>
     c78:	00 00       	nop
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
				display_minute = cur_minute;
				
				eeprom_is_dirty = 1;
     c7a:	d1 e0       	ldi	r29, 0x01	; 1
     c7c:	08 c0       	rjmp	.+16     	; 0xc8e <main+0x746>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     c7e:	1b 9b       	sbis	0x03, 3	; 3
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <main+0x74e>
			{
				if (button_was_down != 0)
     c82:	11 23       	and	r17, r17
     c84:	41 f0       	breq	.+16     	; 0xc96 <main+0x74e>
     c86:	41 e2       	ldi	r20, 0x21	; 33
     c88:	4a 95       	dec	r20
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <main+0x740>
     c8c:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     c8e:	10 e0       	ldi	r17, 0x00	; 0
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <main+0x74e>
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
				display_minute = cur_minute;
				
				eeprom_is_dirty = 1;
     c92:	d1 e0       	ldi	r29, 0x01	; 1
					// show current settings
					display_minute = cur_minute;
					debounce();
				}
				
				button_was_down = 1;
     c94:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     c96:	19 99       	sbic	0x03, 1	; 3
     c98:	c8 c2       	rjmp	.+1424   	; 0x122a <main+0xce2>
			{
				// clear display
				display_second = -1;
     c9a:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
     c9e:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
     ca2:	c0 93 ac 01 	sts	0x01AC, r28
				
				if (alarm_enabled == 0)
     ca6:	80 91 a5 01 	lds	r24, 0x01A5
     caa:	88 23       	and	r24, r24
     cac:	79 f5       	brne	.+94     	; 0xd0c <main+0x7c4>
				{
					// skip alarm time set modes, instead go to enable/disable alarm mode
					mode = MODE_SETALARM_ONOFF;
     cae:	88 e0       	ldi	r24, 0x08	; 8
     cb0:	80 93 9f 01 	sts	0x019F, r24
					to_sleep = 0;
     cb4:	10 92 a0 01 	sts	0x01A0, r1
     cb8:	51 e2       	ldi	r21, 0x21	; 33
     cba:	5a 95       	dec	r21
     cbc:	f1 f7       	brne	.-4      	; 0xcba <main+0x772>
     cbe:	00 00       	nop
     cc0:	22 c0       	rjmp	.+68     	; 0xd06 <main+0x7be>
					debounce();
					while (button2_is_down())
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     cc2:	80 91 a8 01 	lds	r24, 0x01A8
     cc6:	80 ff       	sbrs	r24, 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <main+0x786>
     cca:	84 e1       	ldi	r24, 0x14	; 20
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <main+0x788>
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	80 93 ad 01 	sts	0x01AD, r24
						
						// indicate alarm enabled status
						display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     cd4:	80 91 a5 01 	lds	r24, 0x01A5
     cd8:	88 23       	and	r24, r24
     cda:	39 f0       	breq	.+14     	; 0xcea <main+0x7a2>
     cdc:	80 91 a8 01 	lds	r24, 0x01A8
     ce0:	60 2f       	mov	r22, r16
     ce2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     ce6:	9b 5f       	subi	r25, 0xFB	; 251
     ce8:	0c c0       	rjmp	.+24     	; 0xd02 <main+0x7ba>
     cea:	80 91 a8 01 	lds	r24, 0x01A8
     cee:	60 2f       	mov	r22, r16
     cf0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     cf4:	89 2f       	mov	r24, r25
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0b 96       	adiw	r24, 0x0b	; 11
     cfa:	b2 01       	movw	r22, r4
     cfc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     d00:	98 2f       	mov	r25, r24
     d02:	90 93 ac 01 	sts	0x01AC, r25
				{
					// skip alarm time set modes, instead go to enable/disable alarm mode
					mode = MODE_SETALARM_ONOFF;
					to_sleep = 0;
					debounce();
					while (button2_is_down())
     d06:	19 9b       	sbis	0x03, 1	; 3
     d08:	dc cf       	rjmp	.-72     	; 0xcc2 <main+0x77a>
     d0a:	fb c0       	rjmp	.+502    	; 0xf02 <main+0x9ba>
					debounce();
				}
				else
				{
					// goto alarm time set mode
					mode = MODE_SETALARM_HOUR;
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	80 93 9f 01 	sts	0x019F, r24
					to_sleep = 0;
     d12:	10 92 a0 01 	sts	0x01A0, r1
     d16:	71 e2       	ldi	r23, 0x21	; 33
     d18:	7a 95       	dec	r23
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <main+0x7d0>
     d1c:	00 00       	nop
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 10 : -1;
						
						// indicate AM or PM
						display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     d1e:	45 e0       	ldi	r20, 0x05	; 5
     d20:	ec e3       	ldi	r30, 0x3C	; 60
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	24 c0       	rjmp	.+72     	; 0xd6e <main+0x826>
					to_sleep = 0;
					debounce();
					while (button2_is_down())
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     d26:	80 91 a8 01 	lds	r24, 0x01A8
     d2a:	80 ff       	sbrs	r24, 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <main+0x7ea>
     d2e:	8a e0       	ldi	r24, 0x0A	; 10
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <main+0x7ec>
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	80 93 ad 01 	sts	0x01AD, r24
						
						// indicate AM or PM
						display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     d38:	80 91 a4 01 	lds	r24, 0x01A4
     d3c:	8c 30       	cpi	r24, 0x0C	; 12
     d3e:	18 f0       	brcs	.+6      	; 0xd46 <main+0x7fe>
     d40:	2a e3       	ldi	r18, 0x3A	; 58
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <main+0x802>
     d46:	2c e1       	ldi	r18, 0x1C	; 28
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	80 91 a8 01 	lds	r24, 0x01A8
     d4e:	64 2f       	mov	r22, r20
     d50:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     d54:	b9 01       	movw	r22, r18
     d56:	69 0f       	add	r22, r25
     d58:	71 1d       	adc	r23, r1
     d5a:	cb 01       	movw	r24, r22
     d5c:	bf 01       	movw	r22, r30
     d5e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     d62:	80 93 b1 01 	sts	0x01B1, r24
						
						// indicate alarm hour time
						display_hour = alarm_hour;
     d66:	80 91 a4 01 	lds	r24, 0x01A4
     d6a:	80 93 ac 01 	sts	0x01AC, r24
				{
					// goto alarm time set mode
					mode = MODE_SETALARM_HOUR;
					to_sleep = 0;
					debounce();
					while (button2_is_down())
     d6e:	19 9b       	sbis	0x03, 1	; 3
     d70:	da cf       	rjmp	.-76     	; 0xd26 <main+0x7de>
     d72:	71 e2       	ldi	r23, 0x21	; 33
     d74:	7a 95       	dec	r23
     d76:	f1 f7       	brne	.-4      	; 0xd74 <main+0x82c>
     d78:	c7 c0       	rjmp	.+398    	; 0xf08 <main+0x9c0>
					}
					debounce();
				}
			}
		}
		else if (mode == MODE_SETALARM_HOUR)
     d7a:	80 91 9f 01 	lds	r24, 0x019F
     d7e:	86 30       	cpi	r24, 0x06	; 6
     d80:	09 f0       	breq	.+2      	; 0xd84 <main+0x83c>
     d82:	c4 c0       	rjmp	.+392    	; 0xf0c <main+0x9c4>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     d84:	80 91 a8 01 	lds	r24, 0x01A8
     d88:	80 ff       	sbrs	r24, 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <main+0x848>
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <main+0x84a>
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	80 93 ad 01 	sts	0x01AD, r24
			
			// indicate AM or PM
			display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     d96:	80 91 a4 01 	lds	r24, 0x01A4
     d9a:	8c 30       	cpi	r24, 0x0C	; 12
     d9c:	18 f0       	brcs	.+6      	; 0xda4 <main+0x85c>
     d9e:	2a e3       	ldi	r18, 0x3A	; 58
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <main+0x860>
     da4:	2c e1       	ldi	r18, 0x1C	; 28
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	80 91 a8 01 	lds	r24, 0x01A8
     dac:	65 e0       	ldi	r22, 0x05	; 5
     dae:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     db2:	a9 01       	movw	r20, r18
     db4:	49 0f       	add	r20, r25
     db6:	51 1d       	adc	r21, r1
     db8:	ca 01       	movw	r24, r20
     dba:	6c e3       	ldi	r22, 0x3C	; 60
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     dc2:	80 93 b1 01 	sts	0x01B1, r24
			
			// indicate current settings
			display_hour = alarm_hour;
     dc6:	80 91 a4 01 	lds	r24, 0x01A4
     dca:	80 93 ac 01 	sts	0x01AC, r24
			
			if (button1_is_down())
     dce:	1b 99       	sbic	0x03, 3	; 3
     dd0:	6f c0       	rjmp	.+222    	; 0xeb0 <main+0x968>
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
     dd2:	80 91 a4 01 	lds	r24, 0x01A4
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	68 e1       	ldi	r22, 0x18	; 24
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     de2:	80 93 a4 01 	sts	0x01A4, r24
				display_hour = alarm_hour;
     de6:	80 91 a4 01 	lds	r24, 0x01A4
     dea:	80 93 ac 01 	sts	0x01AC, r24
				
				eeprom_is_dirty = 1;
				
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     dee:	80 91 a4 01 	lds	r24, 0x01A4
     df2:	8c 30       	cpi	r24, 0x0C	; 12
     df4:	18 f0       	brcs	.+6      	; 0xdfc <main+0x8b4>
     df6:	2a e3       	ldi	r18, 0x3A	; 58
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <main+0x8b8>
     dfc:	2c e1       	ldi	r18, 0x1C	; 28
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	80 91 a8 01 	lds	r24, 0x01A8
     e04:	65 e0       	ldi	r22, 0x05	; 5
     e06:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     e0a:	b9 01       	movw	r22, r18
     e0c:	69 0f       	add	r22, r25
     e0e:	71 1d       	adc	r23, r1
     e10:	cb 01       	movw	r24, r22
     e12:	6c e3       	ldi	r22, 0x3C	; 60
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     e1a:	80 93 b1 01 	sts	0x01B1, r24
     e1e:	71 e2       	ldi	r23, 0x21	; 33
     e20:	7a 95       	dec	r23
     e22:	f1 f7       	brne	.-4      	; 0xe20 <main+0x8d8>
     e24:	00 00       	nop
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     e26:	40 e0       	ldi	r20, 0x00	; 0
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 10 : -1;
					
					// indicate AM or PM
					display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     e28:	e5 e0       	ldi	r30, 0x05	; 5
     e2a:	fc e3       	ldi	r31, 0x3C	; 60
     e2c:	6f 2e       	mov	r6, r31
     e2e:	71 2c       	mov	r7, r1
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     e30:	29 c0       	rjmp	.+82     	; 0xe84 <main+0x93c>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     e32:	80 91 a8 01 	lds	r24, 0x01A8
     e36:	80 ff       	sbrs	r24, 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <main+0x8f6>
     e3a:	8a e0       	ldi	r24, 0x0A	; 10
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <main+0x8f8>
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate AM or PM
					display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     e44:	80 91 a4 01 	lds	r24, 0x01A4
     e48:	8c 30       	cpi	r24, 0x0C	; 12
     e4a:	18 f0       	brcs	.+6      	; 0xe52 <main+0x90a>
     e4c:	2a e3       	ldi	r18, 0x3A	; 58
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <main+0x90e>
     e52:	2c e1       	ldi	r18, 0x1C	; 28
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	80 91 a8 01 	lds	r24, 0x01A8
     e5a:	6e 2f       	mov	r22, r30
     e5c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
     e60:	b9 01       	movw	r22, r18
     e62:	69 0f       	add	r22, r25
     e64:	71 1d       	adc	r23, r1
     e66:	cb 01       	movw	r24, r22
     e68:	b3 01       	movw	r22, r6
     e6a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     e6e:	80 93 b1 01 	sts	0x01B1, r24
					
					// indicate current settings
					display_hour = alarm_hour;
     e72:	80 91 a4 01 	lds	r24, 0x01A4
     e76:	80 93 ac 01 	sts	0x01AC, r24
     e7a:	71 e2       	ldi	r23, 0x21	; 33
     e7c:	7a 95       	dec	r23
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <main+0x934>
     e80:	00 00       	nop
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     e82:	4f 5f       	subi	r20, 0xFF	; 255
     e84:	24 2f       	mov	r18, r20
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	11 23       	and	r17, r17
     e8a:	19 f4       	brne	.+6      	; 0xe92 <main+0x94a>
     e8c:	8a e0       	ldi	r24, 0x0A	; 10
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <main+0x94e>
     e92:	85 e0       	ldi	r24, 0x05	; 5
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 17       	cp	r18, r24
     e98:	39 07       	cpc	r19, r25
     e9a:	14 f4       	brge	.+4      	; 0xea0 <main+0x958>
     e9c:	1b 9b       	sbis	0x03, 3	; 3
     e9e:	c9 cf       	rjmp	.-110    	; 0xe32 <main+0x8ea>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     ea0:	1b 9b       	sbis	0x03, 3	; 3
     ea2:	10 c0       	rjmp	.+32     	; 0xec4 <main+0x97c>
     ea4:	81 e2       	ldi	r24, 0x21	; 33
     ea6:	8a 95       	dec	r24
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <main+0x95e>
     eaa:	00 00       	nop
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
				display_hour = alarm_hour;
				
				eeprom_is_dirty = 1;
     eac:	d1 e0       	ldi	r29, 0x01	; 1
     eae:	08 c0       	rjmp	.+16     	; 0xec0 <main+0x978>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     eb0:	1b 9b       	sbis	0x03, 3	; 3
     eb2:	0a c0       	rjmp	.+20     	; 0xec8 <main+0x980>
			{
				if (button_was_down != 0)
     eb4:	11 23       	and	r17, r17
     eb6:	41 f0       	breq	.+16     	; 0xec8 <main+0x980>
     eb8:	41 e2       	ldi	r20, 0x21	; 33
     eba:	4a 95       	dec	r20
     ebc:	f1 f7       	brne	.-4      	; 0xeba <main+0x972>
     ebe:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     ec0:	10 e0       	ldi	r17, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <main+0x980>
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
				display_hour = alarm_hour;
				
				eeprom_is_dirty = 1;
     ec4:	d1 e0       	ldi	r29, 0x01	; 1
					display_hour = alarm_hour;
					
					debounce();
				}
				
				button_was_down = 1;
     ec6:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     ec8:	19 99       	sbic	0x03, 1	; 3
     eca:	af c1       	rjmp	.+862    	; 0x122a <main+0xce2>
			{
				// clear
				display_hour = -1;
     ecc:	c0 93 ac 01 	sts	0x01AC, r28
				
				// goto next mode
				mode = MODE_SETALARM_MINUTE;
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     ed6:	10 92 a0 01 	sts	0x01A0, r1
     eda:	51 e2       	ldi	r21, 0x21	; 33
     edc:	5a 95       	dec	r21
     ede:	f1 f7       	brne	.-4      	; 0xedc <main+0x994>
     ee0:	00 00       	nop
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <main+0x9b6>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     ee4:	80 91 a8 01 	lds	r24, 0x01A8
     ee8:	80 ff       	sbrs	r24, 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <main+0x9a8>
     eec:	8f e0       	ldi	r24, 0x0F	; 15
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <main+0x9aa>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate current settings
					display_minute = alarm_minute;
     ef6:	80 91 aa 01 	lds	r24, 0x01AA
     efa:	80 93 b1 01 	sts	0x01B1, r24
				mode = MODE_SETALARM_MINUTE;
				to_sleep = 0;
				
				debounce();
				
				while (button2_is_down())
     efe:	19 9b       	sbis	0x03, 1	; 3
     f00:	f1 cf       	rjmp	.-30     	; 0xee4 <main+0x99c>
     f02:	61 e2       	ldi	r22, 0x21	; 33
     f04:	6a 95       	dec	r22
     f06:	f1 f7       	brne	.-4      	; 0xf04 <main+0x9bc>
     f08:	00 00       	nop
     f0a:	8f c1       	rjmp	.+798    	; 0x122a <main+0xce2>
				}
				
				debounce();
			}
		}
		else if (mode == MODE_SETALARM_MINUTE)
     f0c:	80 91 9f 01 	lds	r24, 0x019F
     f10:	87 30       	cpi	r24, 0x07	; 7
     f12:	09 f0       	breq	.+2      	; 0xf16 <main+0x9ce>
     f14:	90 c0       	rjmp	.+288    	; 0x1036 <main+0xaee>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     f16:	80 91 a8 01 	lds	r24, 0x01A8
     f1a:	80 ff       	sbrs	r24, 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <main+0x9da>
     f1e:	8f e0       	ldi	r24, 0x0F	; 15
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <main+0x9dc>
     f22:	8f ef       	ldi	r24, 0xFF	; 255
     f24:	80 93 ad 01 	sts	0x01AD, r24
			
			// turn off
			display_hour = -1;
     f28:	c0 93 ac 01 	sts	0x01AC, r28
			
			// show current settings
			display_minute = alarm_minute;
     f2c:	80 91 aa 01 	lds	r24, 0x01AA
     f30:	80 93 b1 01 	sts	0x01B1, r24
			
			if (button1_is_down())
     f34:	1b 99       	sbic	0x03, 3	; 3
     f36:	3c c0       	rjmp	.+120    	; 0xfb0 <main+0xa68>
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
     f38:	80 91 aa 01 	lds	r24, 0x01AA
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	6c e3       	ldi	r22, 0x3C	; 60
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
     f48:	80 93 aa 01 	sts	0x01AA, r24
				display_minute = alarm_minute;
     f4c:	80 91 aa 01 	lds	r24, 0x01AA
     f50:	80 93 b1 01 	sts	0x01B1, r24
     f54:	71 e2       	ldi	r23, 0x21	; 33
     f56:	7a 95       	dec	r23
     f58:	f1 f7       	brne	.-4      	; 0xf56 <main+0xa0e>
     f5a:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <main+0xa3c>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     f60:	80 91 a8 01 	lds	r24, 0x01A8
     f64:	80 ff       	sbrs	r24, 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <main+0xa24>
     f68:	8f e0       	ldi	r24, 0x0F	; 15
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <main+0xa26>
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	80 93 ad 01 	sts	0x01AD, r24
					
					// show current settings
					display_minute = alarm_minute;
     f72:	80 91 aa 01 	lds	r24, 0x01AA
     f76:	80 93 b1 01 	sts	0x01B1, r24
     f7a:	81 e2       	ldi	r24, 0x21	; 33
     f7c:	8a 95       	dec	r24
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <main+0xa34>
     f80:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     f82:	4f 5f       	subi	r20, 0xFF	; 255
     f84:	24 2f       	mov	r18, r20
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	11 23       	and	r17, r17
     f8a:	19 f4       	brne	.+6      	; 0xf92 <main+0xa4a>
     f8c:	8a e0       	ldi	r24, 0x0A	; 10
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <main+0xa4e>
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	14 f4       	brge	.+4      	; 0xfa0 <main+0xa58>
     f9c:	1b 9b       	sbis	0x03, 3	; 3
     f9e:	e0 cf       	rjmp	.-64     	; 0xf60 <main+0xa18>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     fa0:	1b 9b       	sbis	0x03, 3	; 3
     fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <main+0xa7c>
     fa4:	d1 e2       	ldi	r29, 0x21	; 33
     fa6:	da 95       	dec	r29
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <main+0xa5e>
     faa:	00 00       	nop
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
				display_minute = alarm_minute;
				
				eeprom_is_dirty = 1;
     fac:	d1 e0       	ldi	r29, 0x01	; 1
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <main+0xa78>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     fb0:	1b 9b       	sbis	0x03, 3	; 3
     fb2:	0a c0       	rjmp	.+20     	; 0xfc8 <main+0xa80>
			{
				if (button_was_down != 0)
     fb4:	11 23       	and	r17, r17
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <main+0xa80>
     fb8:	41 e2       	ldi	r20, 0x21	; 33
     fba:	4a 95       	dec	r20
     fbc:	f1 f7       	brne	.-4      	; 0xfba <main+0xa72>
     fbe:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <main+0xa80>
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
				display_minute = alarm_minute;
				
				eeprom_is_dirty = 1;
     fc4:	d1 e0       	ldi	r29, 0x01	; 1
					// show current settings
					display_minute = alarm_minute;
					debounce();
				}
				
				button_was_down = 1;
     fc6:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     fc8:	19 99       	sbic	0x03, 1	; 3
     fca:	2f c1       	rjmp	.+606    	; 0x122a <main+0xce2>
			{
				// clear display
				display_second = -1;
     fcc:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
     fd0:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
     fd4:	c0 93 ac 01 	sts	0x01AC, r28
				
				// goto next mode
				mode = MODE_SETALARM_ONOFF;
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     fde:	10 92 a0 01 	sts	0x01A0, r1
     fe2:	51 e2       	ldi	r21, 0x21	; 33
     fe4:	5a 95       	dec	r21
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <main+0xa9c>
     fe8:	00 00       	nop
     fea:	22 c0       	rjmp	.+68     	; 0x1030 <main+0xae8>
				debounce();
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     fec:	80 91 a8 01 	lds	r24, 0x01A8
     ff0:	80 ff       	sbrs	r24, 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <main+0xab0>
     ff4:	84 e1       	ldi	r24, 0x14	; 20
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <main+0xab2>
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     ffe:	80 91 a5 01 	lds	r24, 0x01A5
    1002:	88 23       	and	r24, r24
    1004:	39 f0       	breq	.+14     	; 0x1014 <main+0xacc>
    1006:	80 91 a8 01 	lds	r24, 0x01A8
    100a:	60 2f       	mov	r22, r16
    100c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    1010:	9b 5f       	subi	r25, 0xFB	; 251
    1012:	0c c0       	rjmp	.+24     	; 0x102c <main+0xae4>
    1014:	80 91 a8 01 	lds	r24, 0x01A8
    1018:	60 2f       	mov	r22, r16
    101a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    101e:	89 2f       	mov	r24, r25
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0b 96       	adiw	r24, 0x0b	; 11
    1024:	b2 01       	movw	r22, r4
    1026:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    102a:	98 2f       	mov	r25, r24
    102c:	90 93 ac 01 	sts	0x01AC, r25
				
				// goto next mode
				mode = MODE_SETALARM_ONOFF;
				to_sleep = 0;
				debounce();
				while (button2_is_down())
    1030:	19 9b       	sbis	0x03, 1	; 3
    1032:	dc cf       	rjmp	.-72     	; 0xfec <main+0xaa4>
    1034:	66 cf       	rjmp	.-308    	; 0xf02 <main+0x9ba>
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				}
				debounce();
			}
		}
		else if (mode == MODE_SETALARM_ONOFF)
    1036:	80 91 9f 01 	lds	r24, 0x019F
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	09 f0       	breq	.+2      	; 0x1040 <main+0xaf8>
    103e:	a0 c0       	rjmp	.+320    	; 0x1180 <main+0xc38>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 20 : -1;
    1040:	80 91 a8 01 	lds	r24, 0x01A8
    1044:	80 ff       	sbrs	r24, 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <main+0xb04>
    1048:	84 e1       	ldi	r24, 0x14	; 20
    104a:	01 c0       	rjmp	.+2      	; 0x104e <main+0xb06>
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	80 93 ad 01 	sts	0x01AD, r24
			
			display_minute = -1; // turn off
    1052:	c0 93 b1 01 	sts	0x01B1, r28
			
			// indicate alarm enabled status
			display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
    1056:	80 91 a5 01 	lds	r24, 0x01A5
    105a:	88 23       	and	r24, r24
    105c:	39 f0       	breq	.+14     	; 0x106c <main+0xb24>
    105e:	80 91 a8 01 	lds	r24, 0x01A8
    1062:	60 2f       	mov	r22, r16
    1064:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    1068:	9b 5f       	subi	r25, 0xFB	; 251
    106a:	0c c0       	rjmp	.+24     	; 0x1084 <main+0xb3c>
    106c:	80 91 a8 01 	lds	r24, 0x01A8
    1070:	60 2f       	mov	r22, r16
    1072:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    1076:	89 2f       	mov	r24, r25
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0b 96       	adiw	r24, 0x0b	; 11
    107c:	b2 01       	movw	r22, r4
    107e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    1082:	98 2f       	mov	r25, r24
    1084:	90 93 ac 01 	sts	0x01AC, r25
			
			if (button1_is_down())
    1088:	1b 99       	sbic	0x03, 3	; 3
    108a:	4e c0       	rjmp	.+156    	; 0x1128 <main+0xbe0>
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
    108c:	90 91 a5 01 	lds	r25, 0x01A5
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	91 11       	cpse	r25, r1
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	80 93 a5 01 	sts	0x01A5, r24
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
    109a:	80 91 a5 01 	lds	r24, 0x01A5
    109e:	88 23       	and	r24, r24
    10a0:	39 f0       	breq	.+14     	; 0x10b0 <main+0xb68>
    10a2:	80 91 a8 01 	lds	r24, 0x01A8
    10a6:	60 2f       	mov	r22, r16
    10a8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    10ac:	9b 5f       	subi	r25, 0xFB	; 251
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <main+0xb80>
    10b0:	80 91 a8 01 	lds	r24, 0x01A8
    10b4:	60 2f       	mov	r22, r16
    10b6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    10ba:	89 2f       	mov	r24, r25
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0b 96       	adiw	r24, 0x0b	; 11
    10c0:	b2 01       	movw	r22, r4
    10c2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    10c6:	98 2f       	mov	r25, r24
    10c8:	90 93 ac 01 	sts	0x01AC, r25
    10cc:	71 e2       	ldi	r23, 0x21	; 33
    10ce:	7a 95       	dec	r23
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <main+0xb86>
    10d2:	00 00       	nop
    10d4:	22 c0       	rjmp	.+68     	; 0x111a <main+0xbd2>
				eeprom_is_dirty = 1;
				debounce();
				while (button1_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
    10d6:	80 91 a8 01 	lds	r24, 0x01A8
    10da:	80 ff       	sbrs	r24, 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <main+0xb9a>
    10de:	84 e1       	ldi	r24, 0x14	; 20
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <main+0xb9c>
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
    10e8:	80 91 a5 01 	lds	r24, 0x01A5
    10ec:	88 23       	and	r24, r24
    10ee:	39 f0       	breq	.+14     	; 0x10fe <main+0xbb6>
    10f0:	80 91 a8 01 	lds	r24, 0x01A8
    10f4:	60 2f       	mov	r22, r16
    10f6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    10fa:	9b 5f       	subi	r25, 0xFB	; 251
    10fc:	0c c0       	rjmp	.+24     	; 0x1116 <main+0xbce>
    10fe:	80 91 a8 01 	lds	r24, 0x01A8
    1102:	60 2f       	mov	r22, r16
    1104:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__udivmodqi4>
    1108:	89 2f       	mov	r24, r25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0b 96       	adiw	r24, 0x0b	; 11
    110e:	b2 01       	movw	r22, r4
    1110:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    1114:	98 2f       	mov	r25, r24
    1116:	90 93 ac 01 	sts	0x01AC, r25
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				eeprom_is_dirty = 1;
				debounce();
				while (button1_is_down())
    111a:	1b 9b       	sbis	0x03, 3	; 3
    111c:	dc cf       	rjmp	.-72     	; 0x10d6 <main+0xb8e>
    111e:	81 e2       	ldi	r24, 0x21	; 33
    1120:	8a 95       	dec	r24
    1122:	f1 f7       	brne	.-4      	; 0x1120 <main+0xbd8>
    1124:	00 00       	nop
			
			if (button1_is_down())
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				eeprom_is_dirty = 1;
    1126:	d1 e0       	ldi	r29, 0x01	; 1
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				}
				debounce();
			}
			
			if (button2_is_down())
    1128:	19 99       	sbic	0x03, 1	; 3
    112a:	7f c0       	rjmp	.+254    	; 0x122a <main+0xce2>
			{
				mode = MODE_RANDOM;
    112c:	89 e0       	ldi	r24, 0x09	; 9
    112e:	80 93 9f 01 	sts	0x019F, r24
				srand(TCNT2);
    1132:	80 91 b2 00 	lds	r24, 0x00B2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <srand>
				display_second = (random() & 0x7F) % 60;
    113c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <random>
    1140:	8f 77       	andi	r24, 0x7F	; 127
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	7c e3       	ldi	r23, 0x3C	; 60
    1146:	67 2e       	mov	r6, r23
    1148:	71 2c       	mov	r7, r1
    114a:	b3 01       	movw	r22, r6
    114c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    1150:	80 93 ad 01 	sts	0x01AD, r24
				display_minute = (random() & 0x7F) % 60;
    1154:	0e 94 4c 0a 	call	0x1498	; 0x1498 <random>
    1158:	8f 77       	andi	r24, 0x7F	; 127
    115a:	90 70       	andi	r25, 0x00	; 0
    115c:	b3 01       	movw	r22, r6
    115e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    1162:	80 93 b1 01 	sts	0x01B1, r24
				display_hour   = (random() & 0x7F) % 12;
    1166:	0e 94 4c 0a 	call	0x1498	; 0x1498 <random>
    116a:	8f 77       	andi	r24, 0x7F	; 127
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	b2 01       	movw	r22, r4
    1170:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    1174:	80 93 ac 01 	sts	0x01AC, r24
    1178:	41 e2       	ldi	r20, 0x21	; 33
    117a:	4a 95       	dec	r20
    117c:	f1 f7       	brne	.-4      	; 0x117a <main+0xc32>
    117e:	c4 ce       	rjmp	.-632    	; 0xf08 <main+0x9c0>
				debounce();
			}
		}
		else if (mode == MODE_RANDOM)
    1180:	80 91 9f 01 	lds	r24, 0x019F
    1184:	89 30       	cpi	r24, 0x09	; 9
    1186:	91 f5       	brne	.+100    	; 0x11ec <main+0xca4>
		{
			#ifdef ENABLE_RANDOM_MODE
			if (button1_is_down())
    1188:	1b 99       	sbic	0x03, 3	; 3
    118a:	22 c0       	rjmp	.+68     	; 0x11d0 <main+0xc88>
			{
				display_second = (random() & 0x7F) % 60;
    118c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <random>
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	90 70       	andi	r25, 0x00	; 0
    1194:	6c e3       	ldi	r22, 0x3C	; 60
    1196:	66 2e       	mov	r6, r22
    1198:	71 2c       	mov	r7, r1
    119a:	b3 01       	movw	r22, r6
    119c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    11a0:	80 93 ad 01 	sts	0x01AD, r24
				display_minute = (random() & 0x7F) % 60;
    11a4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <random>
    11a8:	8f 77       	andi	r24, 0x7F	; 127
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	b3 01       	movw	r22, r6
    11ae:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    11b2:	80 93 b1 01 	sts	0x01B1, r24
				display_hour   = (random() & 0x7F) % 12;
    11b6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <random>
    11ba:	8f 77       	andi	r24, 0x7F	; 127
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	b2 01       	movw	r22, r4
    11c0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__divmodhi4>
    11c4:	80 93 ac 01 	sts	0x01AC, r24
    11c8:	51 e2       	ldi	r21, 0x21	; 33
    11ca:	5a 95       	dec	r21
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <main+0xc82>
    11ce:	00 00       	nop
				debounce();
			}
			
			if (button2_is_down())
    11d0:	19 99       	sbic	0x03, 1	; 3
    11d2:	2b c0       	rjmp	.+86     	; 0x122a <main+0xce2>
			#endif
			{
				display_second = -1;
    11d4:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
    11d8:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour   = -1;
    11dc:	c0 93 ac 01 	sts	0x01AC, r28
				mode = MODE_SLEEPING;
    11e0:	10 92 9f 01 	sts	0x019F, r1
				to_sleep = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 a0 01 	sts	0x01A0, r24
    11ea:	8b ce       	rjmp	.-746    	; 0xf02 <main+0x9ba>
				debounce();
			}
		}
		else if (mode == MODE_ALARMING)
    11ec:	80 91 9f 01 	lds	r24, 0x019F
    11f0:	8a 30       	cpi	r24, 0x0A	; 10
    11f2:	d9 f4       	brne	.+54     	; 0x122a <main+0xce2>
		{
			if (bit_is_set(cur_second, 0))
    11f4:	80 91 a8 01 	lds	r24, 0x01A8
    11f8:	80 ff       	sbrs	r24, 0
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <main+0xcc2>
			{
				display_second = -1;
    11fc:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
    1200:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
    1204:	c0 93 ac 01 	sts	0x01AC, r28
    1208:	10 c0       	rjmp	.+32     	; 0x122a <main+0xce2>
			}
			else
			{
				display_second = cur_second;
    120a:	80 91 a8 01 	lds	r24, 0x01A8
    120e:	80 93 ad 01 	sts	0x01AD, r24
				display_minute = cur_minute;
    1212:	80 91 a9 01 	lds	r24, 0x01A9
    1216:	80 93 b1 01 	sts	0x01B1, r24
				display_hour = cur_hour;
    121a:	80 91 a7 01 	lds	r24, 0x01A7
    121e:	80 93 ac 01 	sts	0x01AC, r24
    1222:	03 c0       	rjmp	.+6      	; 0x122a <main+0xce2>
			}
			else
			{
				// show a nice exit animation
				
				timeout_cnt = 0; // no timeout during animation
    1224:	88 24       	eor	r8, r8
    1226:	99 24       	eor	r9, r9
    1228:	54 01       	movw	r10, r8
				display_minute = cur_minute;
				display_hour = cur_hour;
			}
		}
		
		if (to_sleep)
    122a:	80 91 a0 01 	lds	r24, 0x01A0
    122e:	88 23       	and	r24, r24
    1230:	09 f4       	brne	.+2      	; 0x1234 <main+0xcec>
    1232:	56 ca       	rjmp	.-2900   	; 0x6e0 <main+0x198>
		{
			// nothing to do, disable LEDs and go to sleep
			display_second = -1;
    1234:	c0 93 ad 01 	sts	0x01AD, r28
			display_minute = -1;
    1238:	c0 93 b1 01 	sts	0x01B1, r28
			display_hour = -1;
    123c:	c0 93 ac 01 	sts	0x01AC, r28
			mode = MODE_SLEEPING;
    1240:	10 92 9f 01 	sts	0x019F, r1
			
			// save data if required
			if (eeprom_is_dirty)
    1244:	dd 23       	and	r29, r29
    1246:	21 f1       	breq	.+72     	; 0x1290 <main+0xd48>
			{
				eeprom_update_byte(0, cur_second);
    1248:	60 91 a8 01 	lds	r22, 0x01A8
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__eeupd_byte_m165pa>
				eeprom_update_byte(1, cur_minute);
    1254:	60 91 a9 01 	lds	r22, 0x01A9
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__eeupd_byte_m165pa>
				eeprom_update_byte(2, cur_hour);
    1260:	60 91 a7 01 	lds	r22, 0x01A7
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__eeupd_byte_m165pa>
				eeprom_update_byte(3, alarm_minute);
    126c:	60 91 aa 01 	lds	r22, 0x01AA
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__eeupd_byte_m165pa>
				eeprom_update_byte(4, alarm_hour);
    1278:	60 91 a4 01 	lds	r22, 0x01A4
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__eeupd_byte_m165pa>
				eeprom_update_byte(5, alarm_enabled);
    1284:	60 91 a5 01 	lds	r22, 0x01A5
    1288:	85 e0       	ldi	r24, 0x05	; 5
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__eeupd_byte_m165pa>
				
				eeprom_is_dirty = 0;
			}
			
			if (alarm_active == 0)
    1290:	80 91 b0 01 	lds	r24, 0x01B0
    1294:	88 23       	and	r24, r24
    1296:	09 f0       	breq	.+2      	; 0x129a <main+0xd52>
    1298:	22 ca       	rjmp	.-3004   	; 0x6de <main+0x196>
			{
				TIMSK0 = 0; // disable interrupt to save power
    129a:	10 92 6e 00 	sts	0x006E, r1
				sleep_enable(); // SMCR |= _BV(SE); // enable sleep
    129e:	83 b7       	in	r24, 0x33	; 51
    12a0:	81 60       	ori	r24, 0x01	; 1
    12a2:	83 bf       	out	0x33, r24	; 51
				sleep_cpu();
    12a4:	88 95       	sleep
				sleep_disable(); // SMCR &= ~_BV(SE); // disable sleep, prevent accidental sleep
    12a6:	83 b7       	in	r24, 0x33	; 51
    12a8:	8e 7f       	andi	r24, 0xFE	; 254
    12aa:	83 bf       	out	0x33, r24	; 51
				TIMSK0 = _BV(TOIE0) | _BV(OCIE0A); // re-enable interrupt
    12ac:	00 93 6e 00 	sts	0x006E, r16
    12b0:	16 ca       	rjmp	.-3028   	; 0x6de <main+0x196>

000012b2 <__udivmodqi4>:
    12b2:	99 1b       	sub	r25, r25
    12b4:	79 e0       	ldi	r23, 0x09	; 9
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <__udivmodqi4_ep>

000012b8 <__udivmodqi4_loop>:
    12b8:	99 1f       	adc	r25, r25
    12ba:	96 17       	cp	r25, r22
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <__udivmodqi4_ep>
    12be:	96 1b       	sub	r25, r22

000012c0 <__udivmodqi4_ep>:
    12c0:	88 1f       	adc	r24, r24
    12c2:	7a 95       	dec	r23
    12c4:	c9 f7       	brne	.-14     	; 0x12b8 <__udivmodqi4_loop>
    12c6:	80 95       	com	r24
    12c8:	08 95       	ret

000012ca <__divmodqi4>:
    12ca:	87 fb       	bst	r24, 7
    12cc:	08 2e       	mov	r0, r24
    12ce:	06 26       	eor	r0, r22
    12d0:	87 fd       	sbrc	r24, 7
    12d2:	81 95       	neg	r24
    12d4:	67 fd       	sbrc	r22, 7
    12d6:	61 95       	neg	r22
    12d8:	ec df       	rcall	.-40     	; 0x12b2 <__udivmodqi4>
    12da:	0e f4       	brtc	.+2      	; 0x12de <__divmodqi4_1>
    12dc:	91 95       	neg	r25

000012de <__divmodqi4_1>:
    12de:	07 fc       	sbrc	r0, 7
    12e0:	81 95       	neg	r24

000012e2 <__divmodqi4_exit>:
    12e2:	08 95       	ret

000012e4 <__divmodhi4>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	09 2e       	mov	r0, r25
    12e8:	07 26       	eor	r0, r23
    12ea:	0a d0       	rcall	.+20     	; 0x1300 <__divmodhi4_neg1>
    12ec:	77 fd       	sbrc	r23, 7
    12ee:	04 d0       	rcall	.+8      	; 0x12f8 <__divmodhi4_neg2>
    12f0:	0c d0       	rcall	.+24     	; 0x130a <__udivmodhi4>
    12f2:	06 d0       	rcall	.+12     	; 0x1300 <__divmodhi4_neg1>
    12f4:	00 20       	and	r0, r0
    12f6:	1a f4       	brpl	.+6      	; 0x12fe <__divmodhi4_exit>

000012f8 <__divmodhi4_neg2>:
    12f8:	70 95       	com	r23
    12fa:	61 95       	neg	r22
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255

000012fe <__divmodhi4_exit>:
    12fe:	08 95       	ret

00001300 <__divmodhi4_neg1>:
    1300:	f6 f7       	brtc	.-4      	; 0x12fe <__divmodhi4_exit>
    1302:	90 95       	com	r25
    1304:	81 95       	neg	r24
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	08 95       	ret

0000130a <__udivmodhi4>:
    130a:	aa 1b       	sub	r26, r26
    130c:	bb 1b       	sub	r27, r27
    130e:	51 e1       	ldi	r21, 0x11	; 17
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <__udivmodhi4_ep>

00001312 <__udivmodhi4_loop>:
    1312:	aa 1f       	adc	r26, r26
    1314:	bb 1f       	adc	r27, r27
    1316:	a6 17       	cp	r26, r22
    1318:	b7 07       	cpc	r27, r23
    131a:	10 f0       	brcs	.+4      	; 0x1320 <__udivmodhi4_ep>
    131c:	a6 1b       	sub	r26, r22
    131e:	b7 0b       	sbc	r27, r23

00001320 <__udivmodhi4_ep>:
    1320:	88 1f       	adc	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	5a 95       	dec	r21
    1326:	a9 f7       	brne	.-22     	; 0x1312 <__udivmodhi4_loop>
    1328:	80 95       	com	r24
    132a:	90 95       	com	r25
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	08 95       	ret

00001332 <do_rand>:
    1332:	8f 92       	push	r8
    1334:	9f 92       	push	r9
    1336:	af 92       	push	r10
    1338:	bf 92       	push	r11
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	ec 01       	movw	r28, r24
    1348:	88 81       	ld	r24, Y
    134a:	99 81       	ldd	r25, Y+1	; 0x01
    134c:	aa 81       	ldd	r26, Y+2	; 0x02
    134e:	bb 81       	ldd	r27, Y+3	; 0x03
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	a1 05       	cpc	r26, r1
    1354:	b1 05       	cpc	r27, r1
    1356:	21 f4       	brne	.+8      	; 0x1360 <do_rand+0x2e>
    1358:	84 e2       	ldi	r24, 0x24	; 36
    135a:	99 ed       	ldi	r25, 0xD9	; 217
    135c:	ab e5       	ldi	r26, 0x5B	; 91
    135e:	b7 e0       	ldi	r27, 0x07	; 7
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	2d e1       	ldi	r18, 0x1D	; 29
    1366:	33 ef       	ldi	r19, 0xF3	; 243
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	0e 94 94 0a 	call	0x1528	; 0x1528 <__divmodsi4>
    1370:	49 01       	movw	r8, r18
    1372:	5a 01       	movw	r10, r20
    1374:	27 ea       	ldi	r18, 0xA7	; 167
    1376:	31 e4       	ldi	r19, 0x41	; 65
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsi3>
    1380:	6b 01       	movw	r12, r22
    1382:	7c 01       	movw	r14, r24
    1384:	c5 01       	movw	r24, r10
    1386:	b4 01       	movw	r22, r8
    1388:	2c ee       	ldi	r18, 0xEC	; 236
    138a:	34 ef       	ldi	r19, 0xF4	; 244
    138c:	4f ef       	ldi	r20, 0xFF	; 255
    138e:	5f ef       	ldi	r21, 0xFF	; 255
    1390:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsi3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	c8 0e       	add	r12, r24
    139a:	d9 1e       	adc	r13, r25
    139c:	ea 1e       	adc	r14, r26
    139e:	fb 1e       	adc	r15, r27
    13a0:	f7 fe       	sbrs	r15, 7
    13a2:	08 c0       	rjmp	.+16     	; 0x13b4 <do_rand+0x82>
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	af ef       	ldi	r26, 0xFF	; 255
    13aa:	bf e7       	ldi	r27, 0x7F	; 127
    13ac:	c8 0e       	add	r12, r24
    13ae:	d9 1e       	adc	r13, r25
    13b0:	ea 1e       	adc	r14, r26
    13b2:	fb 1e       	adc	r15, r27
    13b4:	c8 82       	st	Y, r12
    13b6:	d9 82       	std	Y+1, r13	; 0x01
    13b8:	ea 82       	std	Y+2, r14	; 0x02
    13ba:	fb 82       	std	Y+3, r15	; 0x03
    13bc:	c6 01       	movw	r24, r12
    13be:	9f 77       	andi	r25, 0x7F	; 127
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	9f 90       	pop	r9
    13d2:	8f 90       	pop	r8
    13d4:	08 95       	ret

000013d6 <rand_r>:
    13d6:	0e 94 99 09 	call	0x1332	; 0x1332 <do_rand>
    13da:	08 95       	ret

000013dc <rand>:
    13dc:	86 e9       	ldi	r24, 0x96	; 150
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	0e 94 99 09 	call	0x1332	; 0x1332 <do_rand>
    13e4:	08 95       	ret

000013e6 <srand>:
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	80 93 96 01 	sts	0x0196, r24
    13ee:	90 93 97 01 	sts	0x0197, r25
    13f2:	a0 93 98 01 	sts	0x0198, r26
    13f6:	b0 93 99 01 	sts	0x0199, r27
    13fa:	08 95       	ret

000013fc <do_random>:
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e4 e0       	ldi	r30, 0x04	; 4
    1402:	fa e0       	ldi	r31, 0x0A	; 10
    1404:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <__prologue_saves__+0xc>
    1408:	ec 01       	movw	r28, r24
    140a:	88 81       	ld	r24, Y
    140c:	99 81       	ldd	r25, Y+1	; 0x01
    140e:	aa 81       	ldd	r26, Y+2	; 0x02
    1410:	bb 81       	ldd	r27, Y+3	; 0x03
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	a1 05       	cpc	r26, r1
    1416:	b1 05       	cpc	r27, r1
    1418:	21 f4       	brne	.+8      	; 0x1422 <do_random+0x26>
    141a:	84 e2       	ldi	r24, 0x24	; 36
    141c:	99 ed       	ldi	r25, 0xD9	; 217
    141e:	ab e5       	ldi	r26, 0x5B	; 91
    1420:	b7 e0       	ldi	r27, 0x07	; 7
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	2d e1       	ldi	r18, 0x1D	; 29
    1428:	33 ef       	ldi	r19, 0xF3	; 243
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	0e 94 94 0a 	call	0x1528	; 0x1528 <__divmodsi4>
    1432:	49 01       	movw	r8, r18
    1434:	5a 01       	movw	r10, r20
    1436:	27 ea       	ldi	r18, 0xA7	; 167
    1438:	31 e4       	ldi	r19, 0x41	; 65
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsi3>
    1442:	6b 01       	movw	r12, r22
    1444:	7c 01       	movw	r14, r24
    1446:	c5 01       	movw	r24, r10
    1448:	b4 01       	movw	r22, r8
    144a:	2c ee       	ldi	r18, 0xEC	; 236
    144c:	34 ef       	ldi	r19, 0xF4	; 244
    144e:	4f ef       	ldi	r20, 0xFF	; 255
    1450:	5f ef       	ldi	r21, 0xFF	; 255
    1452:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulsi3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	c8 0e       	add	r12, r24
    145c:	d9 1e       	adc	r13, r25
    145e:	ea 1e       	adc	r14, r26
    1460:	fb 1e       	adc	r15, r27
    1462:	f7 fe       	sbrs	r15, 7
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <do_random+0x7a>
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
    146a:	af ef       	ldi	r26, 0xFF	; 255
    146c:	bf e7       	ldi	r27, 0x7F	; 127
    146e:	c8 0e       	add	r12, r24
    1470:	d9 1e       	adc	r13, r25
    1472:	ea 1e       	adc	r14, r26
    1474:	fb 1e       	adc	r15, r27
    1476:	c8 82       	st	Y, r12
    1478:	d9 82       	std	Y+1, r13	; 0x01
    147a:	ea 82       	std	Y+2, r14	; 0x02
    147c:	fb 82       	std	Y+3, r15	; 0x03
    147e:	97 01       	movw	r18, r14
    1480:	86 01       	movw	r16, r12
    1482:	3f 77       	andi	r19, 0x7F	; 127
    1484:	b8 01       	movw	r22, r16
    1486:	c9 01       	movw	r24, r18
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	ec e0       	ldi	r30, 0x0C	; 12
    148e:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__epilogue_restores__+0xc>

00001492 <random_r>:
    1492:	0e 94 fe 09 	call	0x13fc	; 0x13fc <do_random>
    1496:	08 95       	ret

00001498 <random>:
    1498:	8a e9       	ldi	r24, 0x9A	; 154
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <do_random>
    14a0:	08 95       	ret

000014a2 <srandom>:
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	80 93 9a 01 	sts	0x019A, r24
    14aa:	90 93 9b 01 	sts	0x019B, r25
    14ae:	a0 93 9c 01 	sts	0x019C, r26
    14b2:	b0 93 9d 01 	sts	0x019D, r27
    14b6:	08 95       	ret

000014b8 <__eerd_byte_m165pa>:
    14b8:	f9 99       	sbic	0x1f, 1	; 31
    14ba:	fe cf       	rjmp	.-4      	; 0x14b8 <__eerd_byte_m165pa>
    14bc:	92 bd       	out	0x22, r25	; 34
    14be:	81 bd       	out	0x21, r24	; 33
    14c0:	f8 9a       	sbi	0x1f, 0	; 31
    14c2:	99 27       	eor	r25, r25
    14c4:	80 b5       	in	r24, 0x20	; 32
    14c6:	08 95       	ret

000014c8 <__eeupd_byte_m165pa>:
    14c8:	26 2f       	mov	r18, r22

000014ca <__eeupd_r18_m165pa>:
    14ca:	f9 99       	sbic	0x1f, 1	; 31
    14cc:	fe cf       	rjmp	.-4      	; 0x14ca <__eeupd_r18_m165pa>
    14ce:	92 bd       	out	0x22, r25	; 34
    14d0:	81 bd       	out	0x21, r24	; 33
    14d2:	f8 9a       	sbi	0x1f, 0	; 31
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	00 b4       	in	r0, 0x20	; 32
    14d8:	02 16       	cp	r0, r18
    14da:	31 f0       	breq	.+12     	; 0x14e8 <__eeupd_r18_m165pa+0x1e>
    14dc:	20 bd       	out	0x20, r18	; 32
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	fa 9a       	sbi	0x1f, 2	; 31
    14e4:	f9 9a       	sbi	0x1f, 1	; 31
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	08 95       	ret

000014ea <__mulsi3>:
    14ea:	62 9f       	mul	r22, r18
    14ec:	d0 01       	movw	r26, r0
    14ee:	73 9f       	mul	r23, r19
    14f0:	f0 01       	movw	r30, r0
    14f2:	82 9f       	mul	r24, r18
    14f4:	e0 0d       	add	r30, r0
    14f6:	f1 1d       	adc	r31, r1
    14f8:	64 9f       	mul	r22, r20
    14fa:	e0 0d       	add	r30, r0
    14fc:	f1 1d       	adc	r31, r1
    14fe:	92 9f       	mul	r25, r18
    1500:	f0 0d       	add	r31, r0
    1502:	83 9f       	mul	r24, r19
    1504:	f0 0d       	add	r31, r0
    1506:	74 9f       	mul	r23, r20
    1508:	f0 0d       	add	r31, r0
    150a:	65 9f       	mul	r22, r21
    150c:	f0 0d       	add	r31, r0
    150e:	99 27       	eor	r25, r25
    1510:	72 9f       	mul	r23, r18
    1512:	b0 0d       	add	r27, r0
    1514:	e1 1d       	adc	r30, r1
    1516:	f9 1f       	adc	r31, r25
    1518:	63 9f       	mul	r22, r19
    151a:	b0 0d       	add	r27, r0
    151c:	e1 1d       	adc	r30, r1
    151e:	f9 1f       	adc	r31, r25
    1520:	bd 01       	movw	r22, r26
    1522:	cf 01       	movw	r24, r30
    1524:	11 24       	eor	r1, r1
    1526:	08 95       	ret

00001528 <__divmodsi4>:
    1528:	97 fb       	bst	r25, 7
    152a:	09 2e       	mov	r0, r25
    152c:	05 26       	eor	r0, r21
    152e:	0e d0       	rcall	.+28     	; 0x154c <__divmodsi4_neg1>
    1530:	57 fd       	sbrc	r21, 7
    1532:	04 d0       	rcall	.+8      	; 0x153c <__divmodsi4_neg2>
    1534:	4b d0       	rcall	.+150    	; 0x15cc <__udivmodsi4>
    1536:	0a d0       	rcall	.+20     	; 0x154c <__divmodsi4_neg1>
    1538:	00 1c       	adc	r0, r0
    153a:	38 f4       	brcc	.+14     	; 0x154a <__divmodsi4_exit>

0000153c <__divmodsi4_neg2>:
    153c:	50 95       	com	r21
    153e:	40 95       	com	r20
    1540:	30 95       	com	r19
    1542:	21 95       	neg	r18
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	4f 4f       	sbci	r20, 0xFF	; 255
    1548:	5f 4f       	sbci	r21, 0xFF	; 255

0000154a <__divmodsi4_exit>:
    154a:	08 95       	ret

0000154c <__divmodsi4_neg1>:
    154c:	f6 f7       	brtc	.-4      	; 0x154a <__divmodsi4_exit>
    154e:	90 95       	com	r25
    1550:	80 95       	com	r24
    1552:	70 95       	com	r23
    1554:	61 95       	neg	r22
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	08 95       	ret

0000155e <__prologue_saves__>:
    155e:	2f 92       	push	r2
    1560:	3f 92       	push	r3
    1562:	4f 92       	push	r4
    1564:	5f 92       	push	r5
    1566:	6f 92       	push	r6
    1568:	7f 92       	push	r7
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	ca 1b       	sub	r28, r26
    1588:	db 0b       	sbc	r29, r27
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	09 94       	ijmp

00001596 <__epilogue_restores__>:
    1596:	2a 88       	ldd	r2, Y+18	; 0x12
    1598:	39 88       	ldd	r3, Y+17	; 0x11
    159a:	48 88       	ldd	r4, Y+16	; 0x10
    159c:	5f 84       	ldd	r5, Y+15	; 0x0f
    159e:	6e 84       	ldd	r6, Y+14	; 0x0e
    15a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15a8:	b9 84       	ldd	r11, Y+9	; 0x09
    15aa:	c8 84       	ldd	r12, Y+8	; 0x08
    15ac:	df 80       	ldd	r13, Y+7	; 0x07
    15ae:	ee 80       	ldd	r14, Y+6	; 0x06
    15b0:	fd 80       	ldd	r15, Y+5	; 0x05
    15b2:	0c 81       	ldd	r16, Y+4	; 0x04
    15b4:	1b 81       	ldd	r17, Y+3	; 0x03
    15b6:	aa 81       	ldd	r26, Y+2	; 0x02
    15b8:	b9 81       	ldd	r27, Y+1	; 0x01
    15ba:	ce 0f       	add	r28, r30
    15bc:	d1 1d       	adc	r29, r1
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	ed 01       	movw	r28, r26
    15ca:	08 95       	ret

000015cc <__udivmodsi4>:
    15cc:	a1 e2       	ldi	r26, 0x21	; 33
    15ce:	1a 2e       	mov	r1, r26
    15d0:	aa 1b       	sub	r26, r26
    15d2:	bb 1b       	sub	r27, r27
    15d4:	fd 01       	movw	r30, r26
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <__udivmodsi4_ep>

000015d8 <__udivmodsi4_loop>:
    15d8:	aa 1f       	adc	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	ee 1f       	adc	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	a2 17       	cp	r26, r18
    15e2:	b3 07       	cpc	r27, r19
    15e4:	e4 07       	cpc	r30, r20
    15e6:	f5 07       	cpc	r31, r21
    15e8:	20 f0       	brcs	.+8      	; 0x15f2 <__udivmodsi4_ep>
    15ea:	a2 1b       	sub	r26, r18
    15ec:	b3 0b       	sbc	r27, r19
    15ee:	e4 0b       	sbc	r30, r20
    15f0:	f5 0b       	sbc	r31, r21

000015f2 <__udivmodsi4_ep>:
    15f2:	66 1f       	adc	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	1a 94       	dec	r1
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <__udivmodsi4_loop>
    15fe:	60 95       	com	r22
    1600:	70 95       	com	r23
    1602:	80 95       	com	r24
    1604:	90 95       	com	r25
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	bd 01       	movw	r22, r26
    160c:	cf 01       	movw	r24, r30
    160e:	08 95       	ret

00001610 <_exit>:
    1610:	f8 94       	cli

00001612 <__stop_program>:
    1612:	ff cf       	rjmp	.-2      	; 0x1612 <__stop_program>

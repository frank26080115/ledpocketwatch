
PocketWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000015ac  00001640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080019e  0080019e  000016de  2**0
                  ALLOC
  3 .stab         00000864  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014c  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000258  00000000  00000000  00002090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf5  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004da  00000000  00000000  00003edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001181  00000000  00000000  000043b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00005538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001042  00000000  00000000  00005be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00006c26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_3>
      10:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_4>
      14:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_5>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_10>
      2c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_11>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000058 <__ctors_end>:
      58:	11 24       	eor	r1, r1
      5a:	1f be       	out	0x3f, r1	; 63
      5c:	cf ef       	ldi	r28, 0xFF	; 255
      5e:	d4 e0       	ldi	r29, 0x04	; 4
      60:	de bf       	out	0x3e, r29	; 62
      62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
      64:	11 e0       	ldi	r17, 0x01	; 1
      66:	a0 e0       	ldi	r26, 0x00	; 0
      68:	b1 e0       	ldi	r27, 0x01	; 1
      6a:	ec ea       	ldi	r30, 0xAC	; 172
      6c:	f5 e1       	ldi	r31, 0x15	; 21
      6e:	02 c0       	rjmp	.+4      	; 0x74 <__do_copy_data+0x10>
      70:	05 90       	lpm	r0, Z+
      72:	0d 92       	st	X+, r0
      74:	ae 39       	cpi	r26, 0x9E	; 158
      76:	b1 07       	cpc	r27, r17
      78:	d9 f7       	brne	.-10     	; 0x70 <__do_copy_data+0xc>

0000007a <__do_clear_bss>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	ae e9       	ldi	r26, 0x9E	; 158
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
      82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
      84:	a2 3b       	cpi	r26, 0xB2	; 178
      86:	b1 07       	cpc	r27, r17
      88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>
      8a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <main>
      8e:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <set_hour_led>:
volatile uint8_t* last_led_port;
volatile uint8_t* last_led_ddr;
volatile uint8_t last_led_pin;

void set_hour_led(int8_t number)
{
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
      a0:	e0 91 a1 01 	lds	r30, 0x01A1
      a4:	f0 91 a2 01 	lds	r31, 0x01A2
      a8:	20 81       	ld	r18, Z
      aa:	90 91 ab 01 	lds	r25, 0x01AB
      ae:	90 95       	com	r25
      b0:	92 23       	and	r25, r18
      b2:	90 83       	st	Z, r25
	*last_led_ddr &= ~last_led_pin;
      b4:	e0 91 ae 01 	lds	r30, 0x01AE
      b8:	f0 91 af 01 	lds	r31, 0x01AF
      bc:	20 81       	ld	r18, Z
      be:	90 91 ab 01 	lds	r25, 0x01AB
      c2:	90 95       	com	r25
      c4:	92 23       	and	r25, r18
      c6:	90 83       	st	Z, r25
	
	if (number >= 0)
      c8:	87 fd       	sbrc	r24, 7
      ca:	3c c0       	rjmp	.+120    	; 0x144 <set_hour_led+0xae>
	{
		// put the ring low
		PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_HOUR)) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
      cc:	91 b3       	in	r25, 0x11	; 17
      ce:	98 7c       	andi	r25, 0xC8	; 200
      d0:	93 63       	ori	r25, 0x33	; 51
      d2:	91 bb       	out	0x11, r25	; 17

		// calculate appropriate index
		idx = (number % 12) * 5;
      d4:	6c e0       	ldi	r22, 0x0C	; 12
      d6:	0e 94 31 09 	call	0x1262	; 0x1262 <__divmodqi4>
      da:	89 2f       	mov	r24, r25
      dc:	88 0f       	add	r24, r24
      de:	88 0f       	add	r24, r24
      e0:	89 0f       	add	r24, r25
      e2:	89 83       	std	Y+1, r24	; 0x01
		idx /= 2;
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	86 95       	lsr	r24
      e8:	89 83       	std	Y+1, r24	; 0x01

		// set the LED on and remember which one
		last_led_port = portx[idx];
      ea:	e9 81       	ldd	r30, Y+1	; 0x01
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	ee 0f       	add	r30, r30
      f0:	ff 1f       	adc	r31, r31
      f2:	e6 5a       	subi	r30, 0xA6	; 166
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	a0 81       	ld	r26, Z
      f8:	b1 81       	ldd	r27, Z+1	; 0x01
      fa:	b0 93 a2 01 	sts	0x01A2, r27
      fe:	a0 93 a1 01 	sts	0x01A1, r26
		last_led_ddr = ddrx[idx];
     102:	e9 81       	ldd	r30, Y+1	; 0x01
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	e2 5e       	subi	r30, 0xE2	; 226
     10c:	fe 4f       	sbci	r31, 0xFE	; 254
     10e:	80 81       	ld	r24, Z
     110:	91 81       	ldd	r25, Z+1	; 0x01
     112:	90 93 af 01 	sts	0x01AF, r25
     116:	80 93 ae 01 	sts	0x01AE, r24
		last_led_pin = pins[idx];
     11a:	e9 81       	ldd	r30, Y+1	; 0x01
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	e0 50       	subi	r30, 0x00	; 0
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	80 81       	ld	r24, Z
     124:	80 93 ab 01 	sts	0x01AB, r24
		*last_led_port |= last_led_pin;
     128:	8c 91       	ld	r24, X
     12a:	90 91 ab 01 	lds	r25, 0x01AB
     12e:	89 2b       	or	r24, r25
     130:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     132:	e0 91 ae 01 	lds	r30, 0x01AE
     136:	f0 91 af 01 	lds	r31, 0x01AF
     13a:	80 81       	ld	r24, Z
     13c:	90 91 ab 01 	lds	r25, 0x01AB
     140:	89 2b       	or	r24, r25
     142:	80 83       	st	Z, r24
	}
}
     144:	0f 90       	pop	r0
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <set_minute_led>:

void set_minute_led(int8_t number)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	00 d0       	rcall	.+0      	; 0x152 <set_minute_led+0x6>
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
     158:	e0 91 a1 01 	lds	r30, 0x01A1
     15c:	f0 91 a2 01 	lds	r31, 0x01A2
     160:	90 81       	ld	r25, Z
     162:	80 91 ab 01 	lds	r24, 0x01AB
     166:	80 95       	com	r24
     168:	89 23       	and	r24, r25
     16a:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     16c:	e0 91 ae 01 	lds	r30, 0x01AE
     170:	f0 91 af 01 	lds	r31, 0x01AF
     174:	90 81       	ld	r25, Z
     176:	80 91 ab 01 	lds	r24, 0x01AB
     17a:	80 95       	com	r24
     17c:	89 23       	and	r24, r25
     17e:	80 83       	st	Z, r24
	
	if (number >= 0)
     180:	8a 81       	ldd	r24, Y+2	; 0x02
     182:	87 fd       	sbrc	r24, 7
     184:	40 c0       	rjmp	.+128    	; 0x206 <set_minute_led+0xba>
	{
		// put the ring low, depending on which one is needed
		if (bit_is_clear(number, 0))
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	80 fd       	sbrc	r24, 0
     18a:	04 c0       	rjmp	.+8      	; 0x194 <set_minute_led+0x48>
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_MINUTE_EVEN)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_MINUTE_ODD) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
     18c:	81 b3       	in	r24, 0x11	; 17
     18e:	88 7c       	andi	r24, 0xC8	; 200
     190:	87 61       	ori	r24, 0x17	; 23
     192:	03 c0       	rjmp	.+6      	; 0x19a <set_minute_led+0x4e>
		}
		else
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_MINUTE_ODD)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_SECOND_ODD);
     194:	81 b3       	in	r24, 0x11	; 17
     196:	88 7c       	andi	r24, 0xC8	; 200
     198:	87 62       	ori	r24, 0x27	; 39
     19a:	81 bb       	out	0x11, r24	; 17
		}
		
		// calculate appropriate index
		idx = number % 60;
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	6c e3       	ldi	r22, 0x3C	; 60
     1a0:	0e 94 31 09 	call	0x1262	; 0x1262 <__divmodqi4>
     1a4:	99 83       	std	Y+1, r25	; 0x01
		idx /= 2;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	86 95       	lsr	r24
     1aa:	89 83       	std	Y+1, r24	; 0x01
		
		// set the LED on and remember which one
		last_led_port = portx[idx];
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e6 5a       	subi	r30, 0xA6	; 166
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	a0 81       	ld	r26, Z
     1ba:	b1 81       	ldd	r27, Z+1	; 0x01
     1bc:	b0 93 a2 01 	sts	0x01A2, r27
     1c0:	a0 93 a1 01 	sts	0x01A1, r26
		last_led_ddr = ddrx[idx];
     1c4:	e9 81       	ldd	r30, Y+1	; 0x01
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	e2 5e       	subi	r30, 0xE2	; 226
     1ce:	fe 4f       	sbci	r31, 0xFE	; 254
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	90 93 af 01 	sts	0x01AF, r25
     1d8:	80 93 ae 01 	sts	0x01AE, r24
		last_led_pin = pins[idx];
     1dc:	e9 81       	ldd	r30, Y+1	; 0x01
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	e0 50       	subi	r30, 0x00	; 0
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	80 81       	ld	r24, Z
     1e6:	80 93 ab 01 	sts	0x01AB, r24
		*last_led_port |= last_led_pin;
     1ea:	8c 91       	ld	r24, X
     1ec:	90 91 ab 01 	lds	r25, 0x01AB
     1f0:	89 2b       	or	r24, r25
     1f2:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     1f4:	e0 91 ae 01 	lds	r30, 0x01AE
     1f8:	f0 91 af 01 	lds	r31, 0x01AF
     1fc:	80 81       	ld	r24, Z
     1fe:	90 91 ab 01 	lds	r25, 0x01AB
     202:	89 2b       	or	r24, r25
     204:	80 83       	st	Z, r24
	}
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <set_second_led>:

void set_second_led(int8_t number)
{
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	00 d0       	rcall	.+0      	; 0x216 <set_second_led+0x6>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t idx;
	
	// turn off last LED
	*last_led_port &= ~last_led_pin;
     21c:	e0 91 a1 01 	lds	r30, 0x01A1
     220:	f0 91 a2 01 	lds	r31, 0x01A2
     224:	90 81       	ld	r25, Z
     226:	80 91 ab 01 	lds	r24, 0x01AB
     22a:	80 95       	com	r24
     22c:	89 23       	and	r24, r25
     22e:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     230:	e0 91 ae 01 	lds	r30, 0x01AE
     234:	f0 91 af 01 	lds	r31, 0x01AF
     238:	90 81       	ld	r25, Z
     23a:	80 91 ab 01 	lds	r24, 0x01AB
     23e:	80 95       	com	r24
     240:	89 23       	and	r24, r25
     242:	80 83       	st	Z, r24
	
	if (number >= 0)
     244:	8a 81       	ldd	r24, Y+2	; 0x02
     246:	87 fd       	sbrc	r24, 7
     248:	40 c0       	rjmp	.+128    	; 0x2ca <set_second_led+0xba>
	{
		// put the ring low, depending on which one is needed
		if (bit_is_clear(number, 0))
     24a:	8a 81       	ldd	r24, Y+2	; 0x02
     24c:	80 fd       	sbrc	r24, 0
     24e:	04 c0       	rjmp	.+8      	; 0x258 <set_second_led+0x48>
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_SECOND_EVEN)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     250:	81 b3       	in	r24, 0x11	; 17
     252:	88 7c       	andi	r24, 0xC8	; 200
     254:	85 63       	ori	r24, 0x35	; 53
     256:	03 c0       	rjmp	.+6      	; 0x25e <set_second_led+0x4e>
		}
		else
		{
			PORTx_RINGS = PORTx_RINGS & (~_BV(PIN_RING_SECOND_ODD)) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     258:	81 b3       	in	r24, 0x11	; 17
     25a:	88 7c       	andi	r24, 0xC8	; 200
     25c:	86 63       	ori	r24, 0x36	; 54
     25e:	81 bb       	out	0x11, r24	; 17
		}
		
		// calculate appropriate index
		idx = number % 60;
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	6c e3       	ldi	r22, 0x3C	; 60
     264:	0e 94 31 09 	call	0x1262	; 0x1262 <__divmodqi4>
     268:	99 83       	std	Y+1, r25	; 0x01
		idx /= 2;
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	86 95       	lsr	r24
     26e:	89 83       	std	Y+1, r24	; 0x01
		
		// set the LED on and remember which one
		last_led_port = portx[idx];
     270:	e9 81       	ldd	r30, Y+1	; 0x01
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e6 5a       	subi	r30, 0xA6	; 166
     27a:	fe 4f       	sbci	r31, 0xFE	; 254
     27c:	a0 81       	ld	r26, Z
     27e:	b1 81       	ldd	r27, Z+1	; 0x01
     280:	b0 93 a2 01 	sts	0x01A2, r27
     284:	a0 93 a1 01 	sts	0x01A1, r26
		last_led_ddr = ddrx[idx];
     288:	e9 81       	ldd	r30, Y+1	; 0x01
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	ee 0f       	add	r30, r30
     28e:	ff 1f       	adc	r31, r31
     290:	e2 5e       	subi	r30, 0xE2	; 226
     292:	fe 4f       	sbci	r31, 0xFE	; 254
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	90 93 af 01 	sts	0x01AF, r25
     29c:	80 93 ae 01 	sts	0x01AE, r24
		last_led_pin = pins[idx];
     2a0:	e9 81       	ldd	r30, Y+1	; 0x01
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	e0 50       	subi	r30, 0x00	; 0
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	80 81       	ld	r24, Z
     2aa:	80 93 ab 01 	sts	0x01AB, r24
		*last_led_port |= last_led_pin;
     2ae:	8c 91       	ld	r24, X
     2b0:	90 91 ab 01 	lds	r25, 0x01AB
     2b4:	89 2b       	or	r24, r25
     2b6:	8c 93       	st	X, r24
		*last_led_ddr |= last_led_pin;
     2b8:	e0 91 ae 01 	lds	r30, 0x01AE
     2bc:	f0 91 af 01 	lds	r31, 0x01AF
     2c0:	80 81       	ld	r24, Z
     2c2:	90 91 ab 01 	lds	r25, 0x01AB
     2c6:	89 2b       	or	r24, r25
     2c8:	80 83       	st	Z, r24
	}
}
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <clear_leds>:

void clear_leds()
{
	// turn off all the LEDs
	*last_led_port &= ~last_led_pin;
     2d4:	e0 91 a1 01 	lds	r30, 0x01A1
     2d8:	f0 91 a2 01 	lds	r31, 0x01A2
     2dc:	90 81       	ld	r25, Z
     2de:	80 91 ab 01 	lds	r24, 0x01AB
     2e2:	80 95       	com	r24
     2e4:	89 23       	and	r24, r25
     2e6:	80 83       	st	Z, r24
	*last_led_ddr &= ~last_led_pin;
     2e8:	e0 91 ae 01 	lds	r30, 0x01AE
     2ec:	f0 91 af 01 	lds	r31, 0x01AF
     2f0:	90 81       	ld	r25, Z
     2f2:	80 91 ab 01 	lds	r24, 0x01AB
     2f6:	80 95       	com	r24
     2f8:	89 23       	and	r24, r25
     2fa:	80 83       	st	Z, r24
	PORTx_RINGS = PORTx_RINGS | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     2fc:	81 b3       	in	r24, 0x11	; 17
     2fe:	87 63       	ori	r24, 0x37	; 55
     300:	81 bb       	out	0x11, r24	; 17
}
     302:	08 95       	ret

00000304 <__vector_5>:

volatile uint8_t to_sleep = 0;
volatile mode_t mode = MODE_SLEEPING;

ISR(TIMER2_OVF_vect)
{
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
	// one second event, add to time
	cur_second++;
     312:	80 91 a8 01 	lds	r24, 0x01A8
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 a8 01 	sts	0x01A8, r24
	if (cur_second >= 60)
     31c:	80 91 a8 01 	lds	r24, 0x01A8
     320:	8c 33       	cpi	r24, 0x3C	; 60
     322:	c0 f0       	brcs	.+48     	; 0x354 <__vector_5+0x50>
	{
		cur_second = 0;
     324:	10 92 a8 01 	sts	0x01A8, r1
		cur_minute++;
     328:	80 91 a9 01 	lds	r24, 0x01A9
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 a9 01 	sts	0x01A9, r24
		if (cur_minute >= 60)
     332:	80 91 a9 01 	lds	r24, 0x01A9
     336:	8c 33       	cpi	r24, 0x3C	; 60
     338:	68 f0       	brcs	.+26     	; 0x354 <__vector_5+0x50>
		{
			cur_minute = 0;
     33a:	10 92 a9 01 	sts	0x01A9, r1
			cur_hour++;
     33e:	80 91 a7 01 	lds	r24, 0x01A7
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 a7 01 	sts	0x01A7, r24
			if (cur_hour >= 24)
     348:	80 91 a7 01 	lds	r24, 0x01A7
     34c:	88 31       	cpi	r24, 0x18	; 24
     34e:	10 f0       	brcs	.+4      	; 0x354 <__vector_5+0x50>
			{
				cur_hour = 0;
     350:	10 92 a7 01 	sts	0x01A7, r1
			}
		}
	}
	
	if (battery_is_low() == 0 && (mode == MODE_CURTIME_SHOWING || mode == MODE_SHOW_ENTERING || alarm_active != 0))
     354:	13 9b       	sbis	0x02, 3	; 2
     356:	0c c0       	rjmp	.+24     	; 0x370 <__vector_5+0x6c>
     358:	80 91 9f 01 	lds	r24, 0x019F
     35c:	82 30       	cpi	r24, 0x02	; 2
     35e:	39 f0       	breq	.+14     	; 0x36e <__vector_5+0x6a>
     360:	80 91 9f 01 	lds	r24, 0x019F
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	19 f0       	breq	.+6      	; 0x36e <__vector_5+0x6a>
     368:	80 91 b0 01 	lds	r24, 0x01B0
     36c:	81 11       	cpse	r24, r1
	{
		PORTx_MOTOR |= _BV(PIN_MOTOR); // turn on the motor
     36e:	16 9a       	sbi	0x02, 6	; 2
	}
	
	// check if alarm should go off
	if (alarm_enabled != 0 && alarm_hour == cur_hour && alarm_minute == cur_minute)
     370:	80 91 a5 01 	lds	r24, 0x01A5
     374:	88 23       	and	r24, r24
     376:	01 f1       	breq	.+64     	; 0x3b8 <__vector_5+0xb4>
     378:	90 91 a4 01 	lds	r25, 0x01A4
     37c:	80 91 a7 01 	lds	r24, 0x01A7
     380:	98 17       	cp	r25, r24
     382:	d1 f4       	brne	.+52     	; 0x3b8 <__vector_5+0xb4>
     384:	90 91 aa 01 	lds	r25, 0x01AA
     388:	80 91 a9 01 	lds	r24, 0x01A9
     38c:	98 17       	cp	r25, r24
     38e:	a1 f4       	brne	.+40     	; 0x3b8 <__vector_5+0xb4>
	{
		if (alarm_already_off == 0)
     390:	80 91 a3 01 	lds	r24, 0x01A3
     394:	88 23       	and	r24, r24
     396:	91 f4       	brne	.+36     	; 0x3bc <__vector_5+0xb8>
		{
			alarm_active = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 b0 01 	sts	0x01B0, r24
			alarm_already_off = 1;
     39e:	80 93 a3 01 	sts	0x01A3, r24
			DDRx_BUZZER |= _BV(PIN_BUZZER);
     3a2:	0c 9a       	sbi	0x01, 4	; 1
			if (mode == MODE_SLEEPING)
     3a4:	80 91 9f 01 	lds	r24, 0x019F
     3a8:	88 23       	and	r24, r24
     3aa:	41 f4       	brne	.+16     	; 0x3bc <__vector_5+0xb8>
			{
				mode = MODE_ALARMING;
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     3b2:	10 92 a0 01 	sts	0x01A0, r1
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <__vector_5+0xb8>
			}
		}
	}
	else
	{
		alarm_already_off = 0;
     3b8:	10 92 a3 01 	sts	0x01A3, r1
	}
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
	if (alarm_active == 0)
     3d6:	80 91 b0 01 	lds	r24, 0x01B0
     3da:	88 23       	and	r24, r24
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <__vector_4+0x16>
	{
		PORTx_MOTOR &= ~_BV(PIN_MOTOR); // turn off motor
     3de:	16 98       	cbi	0x02, 6	; 2
	}
}
     3e0:	8f 91       	pop	r24
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <__vector_11>:

volatile uint8_t animation_cnt;
volatile uint8_t ovf_cnt = 0;

ISR(TIMER0_OVF_vect)
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	ef 93       	push	r30
     40c:	ff 93       	push	r31
	// 2.05 KHz event
	
	if (alarm_active)
     40e:	80 91 b0 01 	lds	r24, 0x01B0
     412:	88 23       	and	r24, r24
     414:	19 f0       	breq	.+6      	; 0x41c <__vector_11+0x30>
	{
		// buzz the alarm buzzer, set pin low, use the compare match to set pin high for 4.1 KHz
		PORTx_BUZZER &= ~_BV(PIN_BUZZER);
     416:	14 98       	cbi	0x02, 4	; 2
		if (battery_is_low() == 0) PORTx_MOTOR |= _BV(PIN_MOTOR);
     418:	13 99       	sbic	0x02, 3	; 2
     41a:	16 9a       	sbi	0x02, 6	; 2
	}
	
	if (mode != MODE_SLEEPING)
     41c:	80 91 9f 01 	lds	r24, 0x019F
     420:	88 23       	and	r24, r24
     422:	91 f1       	breq	.+100    	; 0x488 <__vector_11+0x9c>
	{
		// display LEDs if not sleeping

		uint8_t which_ring = ovf_cnt % 3; // each ring will only get 1/3 duty cycle
     424:	80 91 9e 01 	lds	r24, 0x019E
     428:	63 e0       	ldi	r22, 0x03	; 3
     42a:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
		
		if (which_ring == 0) // hour
     42e:	99 23       	and	r25, r25
     430:	41 f4       	brne	.+16     	; 0x442 <__vector_11+0x56>
		{
			set_hour_led(display_hour);
     432:	80 91 ac 01 	lds	r24, 0x01AC
     436:	99 27       	eor	r25, r25
     438:	87 fd       	sbrc	r24, 7
     43a:	90 95       	com	r25
     43c:	0e 94 4b 00 	call	0x96	; 0x96 <set_hour_led>
     440:	16 c0       	rjmp	.+44     	; 0x46e <__vector_11+0x82>
		}
		else if (which_ring == 1) // minute
     442:	91 30       	cpi	r25, 0x01	; 1
     444:	41 f4       	brne	.+16     	; 0x456 <__vector_11+0x6a>
		{
			set_minute_led(display_minute);
     446:	80 91 b1 01 	lds	r24, 0x01B1
     44a:	99 27       	eor	r25, r25
     44c:	87 fd       	sbrc	r24, 7
     44e:	90 95       	com	r25
     450:	0e 94 a6 00 	call	0x14c	; 0x14c <set_minute_led>
     454:	0c c0       	rjmp	.+24     	; 0x46e <__vector_11+0x82>
		}
		else if (which_ring == 2) // second
		{
			set_second_led(display_second);
     456:	80 91 ad 01 	lds	r24, 0x01AD
     45a:	99 27       	eor	r25, r25
     45c:	87 fd       	sbrc	r24, 7
     45e:	90 95       	com	r25
     460:	0e 94 08 01 	call	0x210	; 0x210 <set_second_led>
			animation_cnt++;
     464:	80 91 a6 01 	lds	r24, 0x01A6
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 93 a6 01 	sts	0x01A6, r24
		}
		
		if (ovf_cnt >= 125)
     46e:	80 91 9e 01 	lds	r24, 0x019E
     472:	8d 37       	cpi	r24, 0x7D	; 125
     474:	18 f0       	brcs	.+6      	; 0x47c <__vector_11+0x90>
		{
			ovf_cnt = 0;
     476:	10 92 9e 01 	sts	0x019E, r1
     47a:	08 c0       	rjmp	.+16     	; 0x48c <__vector_11+0xa0>
		}
		else
		{
			ovf_cnt++;
     47c:	80 91 9e 01 	lds	r24, 0x019E
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	80 93 9e 01 	sts	0x019E, r24
     486:	02 c0       	rjmp	.+4      	; 0x48c <__vector_11+0xa0>
		}
	}
	else
	{
		// should go back to sleep, nothing to do
		clear_leds();
     488:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <clear_leds>
	}
}
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
	// toggle the buzzer pin again, this makes the buzzer frequency about 4.1 KHz
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     4b8:	14 9a       	sbi	0x02, 4	; 2
}
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_3>:

ISR(PCINT1_vect)
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
	// turn off alarm
	alarm_active = 0;
     4ce:	10 92 b0 01 	sts	0x01B0, r1
	
	// disable the output on buzzer but leave pull-up resistor on to save power
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     4d2:	14 9a       	sbi	0x02, 4	; 2
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
     4d4:	0c 98       	cbi	0x01, 4	; 1
	
	// at this point, the processor has woken up
}
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <main>:
}

int main()
{
	// read in time from eeprom, to keep things interesting during development
	cur_second = (eeprom_read_byte(0) & 0x7F) % 60;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 28 0a 	call	0x1450	; 0x1450 <__eerd_byte_m165pa>
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	8f 77       	andi	r24, 0x7F	; 127
     4ec:	90 70       	andi	r25, 0x00	; 0
     4ee:	cc e3       	ldi	r28, 0x3C	; 60
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	be 01       	movw	r22, r28
     4f4:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     4f8:	80 93 a8 01 	sts	0x01A8, r24
	cur_minute = (eeprom_read_byte(1) & 0x7F) % 60;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 28 0a 	call	0x1450	; 0x1450 <__eerd_byte_m165pa>
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	8f 77       	andi	r24, 0x7F	; 127
     508:	90 70       	andi	r25, 0x00	; 0
     50a:	be 01       	movw	r22, r28
     50c:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     510:	80 93 a9 01 	sts	0x01A9, r24
	cur_hour   = (eeprom_read_byte(2) & 0x7F) % 24;
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 28 0a 	call	0x1450	; 0x1450 <__eerd_byte_m165pa>
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	8f 77       	andi	r24, 0x7F	; 127
     520:	90 70       	andi	r25, 0x00	; 0
     522:	08 e1       	ldi	r16, 0x18	; 24
     524:	10 e0       	ldi	r17, 0x00	; 0
     526:	b8 01       	movw	r22, r16
     528:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     52c:	80 93 a7 01 	sts	0x01A7, r24
	
	// read in alarm settings from eeprom
	alarm_minute  = (eeprom_read_byte(3) & 0x7F) % 60;
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 28 0a 	call	0x1450	; 0x1450 <__eerd_byte_m165pa>
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	8f 77       	andi	r24, 0x7F	; 127
     53c:	90 70       	andi	r25, 0x00	; 0
     53e:	be 01       	movw	r22, r28
     540:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     544:	80 93 aa 01 	sts	0x01AA, r24
	alarm_hour    = (eeprom_read_byte(4) & 0x7F) % 24;
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 28 0a 	call	0x1450	; 0x1450 <__eerd_byte_m165pa>
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	8f 77       	andi	r24, 0x7F	; 127
     554:	90 70       	andi	r25, 0x00	; 0
     556:	b8 01       	movw	r22, r16
     558:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     55c:	80 93 a4 01 	sts	0x01A4, r24
	alarm_enabled = (eeprom_read_byte(5) & 0x7F);
     560:	85 e0       	ldi	r24, 0x05	; 5
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 28 0a 	call	0x1450	; 0x1450 <__eerd_byte_m165pa>
     568:	8f 77       	andi	r24, 0x7F	; 127
     56a:	80 93 a5 01 	sts	0x01A5, r24
	
	// ground all grounded pins
	DDRA  = 0x00;
     56e:	11 b8       	out	0x01, r1	; 1
	DDRB  = 0x00;
     570:	14 b8       	out	0x04, r1	; 4
	DDRC  = 0x00;
     572:	17 b8       	out	0x07, r1	; 7
	DDRD  = 0x00;
     574:	1a b8       	out	0x0a, r1	; 10
	DDRE  = 0x00;
     576:	1d b8       	out	0x0d, r1	; 13
	DDRG  = 0x00;
     578:	13 ba       	out	0x13, r1	; 19
	PORTA = 0x00;
     57a:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;
     57c:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
     57e:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     580:	1b b8       	out	0x0b, r1	; 11
	PORTE = 0x00;
     582:	1e b8       	out	0x0e, r1	; 14
	PORTG = 0x00;
     584:	14 ba       	out	0x14, r1	; 20
	
	// setup pins
	DDRx_RINGS  = _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     586:	87 e3       	ldi	r24, 0x37	; 55
     588:	80 bb       	out	0x10, r24	; 16
	PORTx_RINGS = _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
     58a:	81 bb       	out	0x11, r24	; 17
	
	// setup inputs and outputs
	DDRx_BUTTON1 &= ~_BV(PIN_BUTTON1);
     58c:	23 98       	cbi	0x04, 3	; 4
	DDRx_BUTTON2 &= ~_BV(PIN_BUTTON2);
     58e:	21 98       	cbi	0x04, 1	; 4
	PORTx_BUTTON1 |= _BV(PIN_BUTTON1);
     590:	2b 9a       	sbi	0x05, 3	; 5
	PORTx_BUTTON2 |= _BV(PIN_BUTTON2);
     592:	29 9a       	sbi	0x05, 1	; 5
	PORTx_BUZZER |= _BV(PIN_BUZZER);
     594:	14 9a       	sbi	0x02, 4	; 2
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
     596:	0c 98       	cbi	0x01, 4	; 1
	DDRx_MOTOR |= _BV(PIN_MOTOR);
     598:	0e 9a       	sbi	0x01, 6	; 1
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
     59a:	13 9a       	sbi	0x02, 3	; 2
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
     59c:	0b 98       	cbi	0x01, 3	; 1
     59e:	ea e5       	ldi	r30, 0x5A	; 90
     5a0:	f1 e0       	ldi	r31, 0x01	; 1
     5a2:	ae e1       	ldi	r26, 0x1E	; 30
     5a4:	b1 e0       	ldi	r27, 0x01	; 1
     5a6:	00 e0       	ldi	r16, 0x00	; 0
     5a8:	11 e0       	ldi	r17, 0x01	; 1
     5aa:	4e e1       	ldi	r20, 0x1E	; 30
	for (uint8_t i = 0; i < 30; i++)
	{
		uint8_t* p = portx[i];
     5ac:	30 81       	ld	r19, Z
     5ae:	21 81       	ldd	r18, Z+1	; 0x01
     5b0:	32 96       	adiw	r30, 0x02	; 2
     5b2:	83 2f       	mov	r24, r19
     5b4:	92 2f       	mov	r25, r18
	*last_led_port &= ~last_led_pin;
	*last_led_ddr &= ~last_led_pin;
	PORTx_RINGS = PORTx_RINGS | _BV(PIN_RING_SECOND_ODD) | _BV(PIN_RING_HOUR) | _BV(PIN_RING_SECOND_EVEN) | _BV(PIN_RING_MINUTE_EVEN) | _BV(PIN_RING_MINUTE_ODD);
}

int main()
     5b6:	98 01       	movw	r18, r16
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
	for (uint8_t i = 0; i < 30; i++)
	{
		uint8_t* p = portx[i];
		*p &= ~pins[i];
     5b8:	e8 01       	movw	r28, r16
     5ba:	69 91       	ld	r22, Y+
     5bc:	8e 01       	movw	r16, r28
     5be:	60 95       	com	r22
     5c0:	ec 01       	movw	r28, r24
     5c2:	58 81       	ld	r21, Y
     5c4:	56 23       	and	r21, r22
     5c6:	58 83       	st	Y, r21
		uint8_t* d = ddrx[i];
     5c8:	6c 91       	ld	r22, X
     5ca:	11 96       	adiw	r26, 0x01	; 1
     5cc:	5c 91       	ld	r21, X
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	12 96       	adiw	r26, 0x02	; 2
     5d2:	86 2f       	mov	r24, r22
     5d4:	95 2f       	mov	r25, r21
		*d &= ~pins[i];
     5d6:	e9 01       	movw	r28, r18
     5d8:	38 81       	ld	r19, Y
     5da:	30 95       	com	r19
     5dc:	ec 01       	movw	r28, r24
     5de:	28 81       	ld	r18, Y
     5e0:	23 23       	and	r18, r19
     5e2:	28 83       	st	Y, r18
     5e4:	41 50       	subi	r20, 0x01	; 1
	PORTx_BUZZER |= _BV(PIN_BUZZER);
	DDRx_BUZZER &= ~_BV(PIN_BUZZER);
	DDRx_MOTOR |= _BV(PIN_MOTOR);
	PORTx_LOWBATTDET |= _BV(PIN_LOWBATTDET);
	DDRx_LOWBATTDET &= ~_BV(PIN_LOWBATTDET);
	for (uint8_t i = 0; i < 30; i++)
     5e6:	11 f7       	brne	.-60     	; 0x5ac <__stack+0xad>
		uint8_t* p = portx[i];
		*p &= ~pins[i];
		uint8_t* d = ddrx[i];
		*d &= ~pins[i];
	}
	last_led_port = portx[0];
     5e8:	80 91 5a 01 	lds	r24, 0x015A
     5ec:	90 91 5b 01 	lds	r25, 0x015B
     5f0:	90 93 a2 01 	sts	0x01A2, r25
     5f4:	80 93 a1 01 	sts	0x01A1, r24
	last_led_ddr = ddrx[0];
     5f8:	80 91 1e 01 	lds	r24, 0x011E
     5fc:	90 91 1f 01 	lds	r25, 0x011F
     600:	90 93 af 01 	sts	0x01AF, r25
     604:	80 93 ae 01 	sts	0x01AE, r24
	last_led_pin = pins[0];
     608:	80 91 00 01 	lds	r24, 0x0100
     60c:	80 93 ab 01 	sts	0x01AB, r24
	
	// setup async timer 2
	ASSR = _BV(AS2); // enable async xtal input
     610:	88 e0       	ldi	r24, 0x08	; 8
     612:	80 93 b6 00 	sts	0x00B6, r24
	OCR2A = MOTOR_TICK_LENGTH; // set the tick length
     616:	26 e0       	ldi	r18, 0x06	; 6
     618:	20 93 b3 00 	sts	0x00B3, r18
	TIMSK2 = _BV(TOIE2) | _BV(OCIE2A); // enable overflow and tick interrupt
     61c:	83 e0       	ldi	r24, 0x03	; 3
     61e:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = _BV(CS22) | 0 | _BV(CS20); // start timer with clock div 128
     622:	95 e0       	ldi	r25, 0x05	; 5
     624:	90 93 b0 00 	sts	0x00B0, r25
	
	// setup timer 0
	#if F_CPU == 1000000
	TCCR0A = _BV(CS00); // start timer with clk div 1
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	94 bd       	out	0x24, r25	; 36
	#elif F_CPU == 8000000
	TCCR0A = _BV(CS01); // start timer with clk div 8
	#else
	#error bad F_CPU
	#endif
	OCR0A = 0x80; // setup compare match at 50% duty cycle
     62c:	30 e8       	ldi	r19, 0x80	; 128
     62e:	37 bd       	out	0x27, r19	; 39
	TIMSK0 = _BV(TOIE0) | _BV(OCIE0A); // enable overflow and compare match interrupts
     630:	80 93 6e 00 	sts	0x006E, r24
	
	// setup button interrupts
	PCMSK1 |= _BV(PCINT11) | _BV(PCINT9);
     634:	80 91 6c 00 	lds	r24, 0x006C
     638:	8a 60       	ori	r24, 0x0A	; 10
     63a:	80 93 6c 00 	sts	0x006C, r24
	EIMSK |= _BV(PCIE1);
     63e:	ed 9a       	sbi	0x1d, 5	; 29
	
	// setup power saving features
	power_all_disable(); // PRR = 0x0F; // disable all (ADC, USART, SPI, TMR1)
     640:	80 91 64 00 	lds	r24, 0x0064
     644:	8f 60       	ori	r24, 0x0F	; 15
     646:	80 93 64 00 	sts	0x0064, r24
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
     64a:	23 bf       	out	0x33, r18	; 51
	
	sei(); // enable global interrupts
     64c:	78 94       	sei
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
	uint8_t eeprom_is_dirty = 0;
	
	mode = MODE_SLEEPING;
     64e:	10 92 9f 01 	sts	0x019F, r1
	to_sleep = 1;
     652:	90 93 a0 01 	sts	0x01A0, r25
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
	uint8_t eeprom_is_dirty = 0;
     656:	d0 e0       	ldi	r29, 0x00	; 0
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
	uint8_t button_was_down = 0;
     658:	10 e0       	ldi	r17, 0x00	; 0
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
	uint32_t timeout_cnt = 0;
     65a:	88 24       	eor	r8, r8
     65c:	99 24       	eor	r9, r9
     65e:	54 01       	movw	r10, r8
	power_all_disable(); // PRR = 0x0F; // disable all (ADC, USART, SPI, TMR1)
	SMCR = _BV(SM1) | _BV(SM0); // set power-save mode
	
	sei(); // enable global interrupts
	
	uint32_t held_cnt = 0;
     660:	cc 24       	eor	r12, r12
     662:	dd 24       	eor	r13, r13
     664:	76 01       	movw	r14, r12
		}
		else if (mode == MODE_ALARMING)
		{
			if (bit_is_set(cur_second, 0))
			{
				display_second = -1;
     666:	cf ef       	ldi	r28, 0xFF	; 255
			#ifdef ENABLE_RANDOM_MODE
			if (button1_is_down())
			{
				display_second = (random() & 0x7F) % 60;
				display_minute = (random() & 0x7F) % 60;
				display_hour   = (random() & 0x7F) % 12;
     668:	bc e0       	ldi	r27, 0x0C	; 12
     66a:	4b 2e       	mov	r4, r27
     66c:	51 2c       	mov	r5, r1
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     66e:	03 e0       	ldi	r16, 0x03	; 3
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	38 2e       	mov	r3, r24
     674:	01 c0       	rjmp	.+2      	; 0x678 <__stack+0x179>
				eeprom_update_byte(5, alarm_enabled);
				
				eeprom_is_dirty = 0;
			}
			
			if (alarm_active == 0)
     676:	d0 e0       	ldi	r29, 0x00	; 0
	mode = MODE_SLEEPING;
	to_sleep = 1;
	
	for (;;)
	{
		if (mode == MODE_SLEEPING || mode == MODE_ALARMING)
     678:	80 91 9f 01 	lds	r24, 0x019F
     67c:	88 23       	and	r24, r24
     67e:	29 f0       	breq	.+10     	; 0x68a <__stack+0x18b>
     680:	80 91 9f 01 	lds	r24, 0x019F
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	09 f0       	breq	.+2      	; 0x68a <__stack+0x18b>
     688:	56 c0       	rjmp	.+172    	; 0x736 <__stack+0x237>
		{
			if (button2_is_down())
     68a:	19 99       	sbic	0x03, 1	; 3
     68c:	3a c0       	rjmp	.+116    	; 0x702 <__stack+0x203>
			{
				// go directly into settings mode
				mode = MODE_SETTIME_HOUR;
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     694:	10 92 a0 01 	sts	0x01A0, r1
				
				display_second = -1;
     698:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
     69c:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
     6a0:	c0 93 ac 01 	sts	0x01AC, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a4:	41 e2       	ldi	r20, 0x21	; 33
     6a6:	4a 95       	dec	r20
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <__stack+0x1a7>
     6aa:	00 00       	nop
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     6ac:	45 e0       	ldi	r20, 0x05	; 5
     6ae:	ec e3       	ldi	r30, 0x3C	; 60
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <__stack+0x1fd>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     6b4:	80 91 a8 01 	lds	r24, 0x01A8
     6b8:	80 ff       	sbrs	r24, 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__stack+0x1c1>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <__stack+0x1c3>
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     6c6:	80 91 a7 01 	lds	r24, 0x01A7
     6ca:	8c 30       	cpi	r24, 0x0C	; 12
     6cc:	18 f0       	brcs	.+6      	; 0x6d4 <__stack+0x1d5>
     6ce:	2a e3       	ldi	r18, 0x3A	; 58
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <__stack+0x1d9>
     6d4:	2c e1       	ldi	r18, 0x1C	; 28
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	80 91 a8 01 	lds	r24, 0x01A8
     6dc:	64 2f       	mov	r22, r20
     6de:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     6e2:	b9 01       	movw	r22, r18
     6e4:	69 0f       	add	r22, r25
     6e6:	71 1d       	adc	r23, r1
     6e8:	cb 01       	movw	r24, r22
     6ea:	bf 01       	movw	r22, r30
     6ec:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     6f0:	80 93 b1 01 	sts	0x01B1, r24
					
					// indicate current settings
					display_hour = cur_hour;
     6f4:	80 91 a7 01 	lds	r24, 0x01A7
     6f8:	80 93 ac 01 	sts	0x01AC, r24
				display_minute = -1;
				display_hour = -1;
				
				debounce();
				
				while (button2_is_down())
     6fc:	19 9b       	sbis	0x03, 1	; 3
     6fe:	da cf       	rjmp	.-76     	; 0x6b4 <__stack+0x1b5>
     700:	04 c3       	rjmp	.+1544   	; 0xd0a <__stack+0x80b>
					display_hour = cur_hour;
				}
				
				debounce();
			}
			else if (button1_is_down())
     702:	1b 99       	sbic	0x03, 3	; 3
     704:	12 c0       	rjmp	.+36     	; 0x72a <__stack+0x22b>
			{
				// go into time display mode
				mode = MODE_SHOW_ENTERING;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 9f 01 	sts	0x019F, r24
				display_hour = -1;
     70c:	c0 93 ac 01 	sts	0x01AC, r28
				display_minute = -1;
     710:	c0 93 b1 01 	sts	0x01B1, r28
				display_second = -1;
     714:	c0 93 ad 01 	sts	0x01AD, r28
				animation_cnt = 0;
     718:	10 92 a6 01 	sts	0x01A6, r1
				to_sleep = 0;
     71c:	10 92 a0 01 	sts	0x01A0, r1
     720:	81 e2       	ldi	r24, 0x21	; 33
     722:	8a 95       	dec	r24
     724:	f1 f7       	brne	.-4      	; 0x722 <__stack+0x223>
     726:	00 00       	nop
     728:	c9 c0       	rjmp	.+402    	; 0x8bc <__stack+0x3bd>
				held_cnt = 0;
				debounce();
			}
			else if (mode != MODE_ALARMING)
     72a:	80 91 9f 01 	lds	r24, 0x019F
     72e:	8a 30       	cpi	r24, 0x0A	; 10
     730:	09 f0       	breq	.+2      	; 0x734 <__stack+0x235>
     732:	eb c0       	rjmp	.+470    	; 0x90a <__stack+0x40b>
     734:	46 c5       	rjmp	.+2700   	; 0x11c2 <__stack+0xcc3>
			{
				to_sleep = 1;
			}
		}
		else if (mode == MODE_SHOW_ENTERING)
     736:	80 91 9f 01 	lds	r24, 0x019F
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	09 f0       	breq	.+2      	; 0x740 <__stack+0x241>
     73e:	82 c0       	rjmp	.+260    	; 0x844 <__stack+0x345>
		{
			if (battery_is_low())
     740:	13 99       	sbic	0x02, 3	; 2
     742:	04 c0       	rjmp	.+8      	; 0x74c <__stack+0x24d>
			{
				mode = MODE_CURTIME_SHOWING; // save power by ignoring animation
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	80 93 9f 01 	sts	0x019F, r24
     74a:	3b c5       	rjmp	.+2678   	; 0x11c2 <__stack+0xcc3>
			{
				// show a nice startup animation
				
				timeout_cnt = 0; // no timeout during animation
				
				if (button1_is_down())
     74c:	1b 99       	sbic	0x03, 3	; 3
     74e:	0e c0       	rjmp	.+28     	; 0x76c <__stack+0x26d>
				{
					held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     750:	49 ec       	ldi	r20, 0xC9	; 201
     752:	c4 16       	cp	r12, r20
     754:	d1 04       	cpc	r13, r1
     756:	e1 04       	cpc	r14, r1
     758:	f1 04       	cpc	r15, r1
     75a:	28 f4       	brcc	.+10     	; 0x766 <__stack+0x267>
     75c:	08 94       	sec
     75e:	c1 1c       	adc	r12, r1
     760:	d1 1c       	adc	r13, r1
     762:	e1 1c       	adc	r14, r1
     764:	f1 1c       	adc	r15, r1
					to_sleep = 0;
     766:	10 92 a0 01 	sts	0x01A0, r1
     76a:	03 c0       	rjmp	.+6      	; 0x772 <__stack+0x273>
				}
				else
				{
					held_cnt = 0;
     76c:	cc 24       	eor	r12, r12
     76e:	dd 24       	eor	r13, r13
     770:	76 01       	movw	r14, r12
				}
				
				// move the LEDs if it's time to do so according to the animation speed
				if (animation_cnt >= ANIMATION_SPEED_1)
     772:	80 91 a6 01 	lds	r24, 0x01A6
				{
					if (display_second < cur_second)    display_second++; else display_second = cur_second;
     776:	20 91 ad 01 	lds	r18, 0x01AD
     77a:	80 91 a8 01 	lds	r24, 0x01A8
     77e:	33 27       	eor	r19, r19
     780:	27 fd       	sbrc	r18, 7
     782:	30 95       	com	r19
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	28 17       	cp	r18, r24
     788:	39 07       	cpc	r19, r25
     78a:	24 f4       	brge	.+8      	; 0x794 <__stack+0x295>
     78c:	80 91 ad 01 	lds	r24, 0x01AD
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	02 c0       	rjmp	.+4      	; 0x798 <__stack+0x299>
     794:	80 91 a8 01 	lds	r24, 0x01A8
     798:	80 93 ad 01 	sts	0x01AD, r24
					if (display_minute < cur_minute)    display_minute++; else display_minute = cur_minute;
     79c:	20 91 b1 01 	lds	r18, 0x01B1
     7a0:	80 91 a9 01 	lds	r24, 0x01A9
     7a4:	33 27       	eor	r19, r19
     7a6:	27 fd       	sbrc	r18, 7
     7a8:	30 95       	com	r19
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	28 17       	cp	r18, r24
     7ae:	39 07       	cpc	r19, r25
     7b0:	24 f4       	brge	.+8      	; 0x7ba <__stack+0x2bb>
     7b2:	80 91 b1 01 	lds	r24, 0x01B1
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <__stack+0x2bf>
     7ba:	80 91 a9 01 	lds	r24, 0x01A9
     7be:	80 93 b1 01 	sts	0x01B1, r24
					if (display_hour < (cur_hour % 12)) display_hour++;   else display_hour   = cur_hour;
     7c2:	20 91 ac 01 	lds	r18, 0x01AC
     7c6:	80 91 a7 01 	lds	r24, 0x01A7
     7ca:	33 27       	eor	r19, r19
     7cc:	27 fd       	sbrc	r18, 7
     7ce:	30 95       	com	r19
     7d0:	6c e0       	ldi	r22, 0x0C	; 12
     7d2:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     7d6:	89 2f       	mov	r24, r25
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	28 17       	cp	r18, r24
     7dc:	39 07       	cpc	r19, r25
     7de:	24 f4       	brge	.+8      	; 0x7e8 <__stack+0x2e9>
     7e0:	80 91 ac 01 	lds	r24, 0x01AC
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__stack+0x2ed>
     7e8:	80 91 a7 01 	lds	r24, 0x01A7
     7ec:	80 93 ac 01 	sts	0x01AC, r24
					animation_cnt = 0;
     7f0:	10 92 a6 01 	sts	0x01A6, r1
				}
				
				// the animation finishes when the displayed time matches the current time
				if (display_second == cur_second && display_minute == cur_minute && display_hour == cur_hour) mode = MODE_CURTIME_SHOWING;
     7f4:	20 91 ad 01 	lds	r18, 0x01AD
     7f8:	80 91 a8 01 	lds	r24, 0x01A8
     7fc:	33 27       	eor	r19, r19
     7fe:	27 fd       	sbrc	r18, 7
     800:	30 95       	com	r19
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	28 17       	cp	r18, r24
     806:	39 07       	cpc	r19, r25
     808:	09 f0       	breq	.+2      	; 0x80c <__stack+0x30d>
     80a:	d8 c4       	rjmp	.+2480   	; 0x11bc <__stack+0xcbd>
     80c:	20 91 b1 01 	lds	r18, 0x01B1
     810:	80 91 a9 01 	lds	r24, 0x01A9
     814:	33 27       	eor	r19, r19
     816:	27 fd       	sbrc	r18, 7
     818:	30 95       	com	r19
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	28 17       	cp	r18, r24
     81e:	39 07       	cpc	r19, r25
     820:	09 f0       	breq	.+2      	; 0x824 <__stack+0x325>
     822:	cc c4       	rjmp	.+2456   	; 0x11bc <__stack+0xcbd>
     824:	20 91 ac 01 	lds	r18, 0x01AC
     828:	80 91 a7 01 	lds	r24, 0x01A7
     82c:	33 27       	eor	r19, r19
     82e:	27 fd       	sbrc	r18, 7
     830:	30 95       	com	r19
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	28 17       	cp	r18, r24
     836:	39 07       	cpc	r19, r25
     838:	09 f0       	breq	.+2      	; 0x83c <__stack+0x33d>
     83a:	c0 c4       	rjmp	.+2432   	; 0x11bc <__stack+0xcbd>
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	80 93 9f 01 	sts	0x019F, r24
     842:	bc c4       	rjmp	.+2424   	; 0x11bc <__stack+0xcbd>
			}
		}
		else if (mode == MODE_CURTIME_SHOWING)
     844:	80 91 9f 01 	lds	r24, 0x019F
     848:	82 30       	cpi	r24, 0x02	; 2
     84a:	09 f0       	breq	.+2      	; 0x84e <__stack+0x34f>
     84c:	55 c0       	rjmp	.+170    	; 0x8f8 <__stack+0x3f9>
		{
			// indicate current time
			display_minute = cur_minute;
     84e:	80 91 a9 01 	lds	r24, 0x01A9
     852:	80 93 b1 01 	sts	0x01B1, r24
			display_hour   = cur_hour;
     856:	80 91 a7 01 	lds	r24, 0x01A7
     85a:	80 93 ac 01 	sts	0x01AC, r24
			
			if (battery_is_low())
     85e:	13 99       	sbic	0x02, 3	; 2
     860:	03 c0       	rjmp	.+6      	; 0x868 <__stack+0x369>
			{
				// save some power by not showing seconds
				// this also indicates low battery status to the user
				display_second = -1;
     862:	c0 93 ad 01 	sts	0x01AD, r28
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x371>
			}
			else
			{
				display_second = cur_second;
     868:	80 91 a8 01 	lds	r24, 0x01A8
     86c:	80 93 ad 01 	sts	0x01AD, r24
     870:	51 e2       	ldi	r21, 0x21	; 33
     872:	5a 95       	dec	r21
     874:	f1 f7       	brne	.-4      	; 0x872 <__stack+0x373>
     876:	00 00       	nop
			}
			
			debounce(); // this delay both debounces and also helps with pacing the counters
			
			if (button1_is_down())
     878:	1b 99       	sbic	0x03, 3	; 3
     87a:	0e c0       	rjmp	.+28     	; 0x898 <__stack+0x399>
			{
				held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     87c:	69 ec       	ldi	r22, 0xC9	; 201
     87e:	c6 16       	cp	r12, r22
     880:	d1 04       	cpc	r13, r1
     882:	e1 04       	cpc	r14, r1
     884:	f1 04       	cpc	r15, r1
     886:	28 f4       	brcc	.+10     	; 0x892 <__stack+0x393>
     888:	08 94       	sec
     88a:	c1 1c       	adc	r12, r1
     88c:	d1 1c       	adc	r13, r1
     88e:	e1 1c       	adc	r14, r1
     890:	f1 1c       	adc	r15, r1
				timeout_cnt = 0;
				to_sleep = 0;
     892:	10 92 a0 01 	sts	0x01A0, r1
     896:	92 c4       	rjmp	.+2340   	; 0x11bc <__stack+0xcbd>
			}
			else
			{
				if (battery_is_low())
     898:	13 99       	sbic	0x02, 3	; 2
     89a:	06 c0       	rjmp	.+12     	; 0x8a8 <__stack+0x3a9>
				{
					// save power if battery is low
					// or if user holds down the button for longer than 5 seconds
					mode = MODE_SLEEPING;
     89c:	10 92 9f 01 	sts	0x019F, r1
					to_sleep = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 a0 01 	sts	0x01A0, r24
     8a6:	0a c0       	rjmp	.+20     	; 0x8bc <__stack+0x3bd>
				}
				else if (held_cnt >= HOLD_CNT_THRESH)
     8a8:	78 ec       	ldi	r23, 0xC8	; 200
     8aa:	c7 16       	cp	r12, r23
     8ac:	d1 04       	cpc	r13, r1
     8ae:	e1 04       	cpc	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	40 f0       	brcs	.+16     	; 0x8c4 <__stack+0x3c5>
				{
					mode = MODE_SHOW_EXITING;
     8b4:	30 92 9f 01 	sts	0x019F, r3
					animation_cnt = 0;
     8b8:	10 92 a6 01 	sts	0x01A6, r1
						to_sleep = 0;
					}
				}
				
				// no longer held down
				held_cnt = 0;
     8bc:	cc 24       	eor	r12, r12
     8be:	dd 24       	eor	r13, r13
     8c0:	76 01       	movw	r14, r12
     8c2:	7f c4       	rjmp	.+2302   	; 0x11c2 <__stack+0xcc3>
					mode = MODE_SHOW_EXITING;
					animation_cnt = 0;
				}
				else
				{
					timeout_cnt = (timeout_cnt > TIMEOUT_THRESH) ? timeout_cnt : (timeout_cnt + 1);
     8c4:	81 e9       	ldi	r24, 0x91	; 145
     8c6:	88 16       	cp	r8, r24
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	98 06       	cpc	r9, r24
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	a8 06       	cpc	r10, r24
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	b8 06       	cpc	r11, r24
     8d4:	78 f7       	brcc	.-34     	; 0x8b4 <__stack+0x3b5>
     8d6:	08 94       	sec
     8d8:	81 1c       	adc	r8, r1
     8da:	91 1c       	adc	r9, r1
     8dc:	a1 1c       	adc	r10, r1
     8de:	b1 1c       	adc	r11, r1
					if (timeout_cnt >= TIMEOUT_THRESH)
     8e0:	40 e9       	ldi	r20, 0x90	; 144
     8e2:	84 16       	cp	r8, r20
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	94 06       	cpc	r9, r20
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	a4 06       	cpc	r10, r20
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	b4 06       	cpc	r11, r20
     8f0:	08 f7       	brcc	.-62     	; 0x8b4 <__stack+0x3b5>
						animation_cnt = 0;
					}
					else
					{
						// did not timeout yet, do not sleep
						to_sleep = 0;
     8f2:	10 92 a0 01 	sts	0x01A0, r1
     8f6:	e2 cf       	rjmp	.-60     	; 0x8bc <__stack+0x3bd>
				
				// no longer held down
				held_cnt = 0;
			}
		}
		else if (mode == MODE_SHOW_EXITING)
     8f8:	80 91 9f 01 	lds	r24, 0x019F
     8fc:	83 30       	cpi	r24, 0x03	; 3
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0x403>
     900:	65 c0       	rjmp	.+202    	; 0x9cc <__stack+0x4cd>
		{
			if (battery_is_low())
     902:	13 99       	sbic	0x02, 3	; 2
     904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0x413>
			{
				// save power by ignoring animation
				mode = MODE_SLEEPING;
     906:	10 92 9f 01 	sts	0x019F, r1
				to_sleep = 1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 a0 01 	sts	0x01A0, r24
     910:	58 c4       	rjmp	.+2224   	; 0x11c2 <__stack+0xcc3>
			{
				// show a nice exit animation
				
				timeout_cnt = 0; // no timeout during animation
				
				if (button1_is_down())
     912:	1b 99       	sbic	0x03, 3	; 3
     914:	11 c0       	rjmp	.+34     	; 0x938 <__stack+0x439>
				{
					held_cnt = (held_cnt > HOLD_CNT_THRESH) ? held_cnt : (held_cnt + 1);
     916:	59 ec       	ldi	r21, 0xC9	; 201
     918:	c5 16       	cp	r12, r21
     91a:	d1 04       	cpc	r13, r1
     91c:	e1 04       	cpc	r14, r1
     91e:	f1 04       	cpc	r15, r1
     920:	28 f4       	brcc	.+10     	; 0x92c <__stack+0x42d>
     922:	08 94       	sec
     924:	c1 1c       	adc	r12, r1
     926:	d1 1c       	adc	r13, r1
     928:	e1 1c       	adc	r14, r1
     92a:	f1 1c       	adc	r15, r1
					to_sleep = 0;
     92c:	10 92 a0 01 	sts	0x01A0, r1
					mode = MODE_SHOW_ENTERING; // button is down, so undo the animation
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 9f 01 	sts	0x019F, r24
     936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0x43f>
				}
				else
				{
					held_cnt = 0;
     938:	cc 24       	eor	r12, r12
     93a:	dd 24       	eor	r13, r13
     93c:	76 01       	movw	r14, r12
				}
				
				// move the LEDs if it's time to do so according to the animation speed
				if (animation_cnt >= ANIMATION_SPEED_2)
     93e:	80 91 a6 01 	lds	r24, 0x01A6
				{
					if (display_second >= 0) display_second++;
     942:	80 91 ad 01 	lds	r24, 0x01AD
     946:	87 fd       	sbrc	r24, 7
     948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x455>
     94a:	80 91 ad 01 	lds	r24, 0x01AD
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	80 93 ad 01 	sts	0x01AD, r24
					if (display_minute >= 0) display_minute++;
     954:	80 91 b1 01 	lds	r24, 0x01B1
     958:	87 fd       	sbrc	r24, 7
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x467>
     95c:	80 91 b1 01 	lds	r24, 0x01B1
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 b1 01 	sts	0x01B1, r24
					if (display_hour   >= 0) display_hour++;
     966:	80 91 ac 01 	lds	r24, 0x01AC
     96a:	87 fd       	sbrc	r24, 7
     96c:	05 c0       	rjmp	.+10     	; 0x978 <__stack+0x479>
     96e:	80 91 ac 01 	lds	r24, 0x01AC
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	80 93 ac 01 	sts	0x01AC, r24
					animation_cnt = 0;
     978:	10 92 a6 01 	sts	0x01A6, r1
					if (display_second >= 60) display_second = -1;
     97c:	80 91 ad 01 	lds	r24, 0x01AD
     980:	8c 33       	cpi	r24, 0x3C	; 60
     982:	14 f0       	brlt	.+4      	; 0x988 <__stack+0x489>
     984:	c0 93 ad 01 	sts	0x01AD, r28
					if (display_minute >= 60) display_minute = -1;
     988:	80 91 b1 01 	lds	r24, 0x01B1
     98c:	8c 33       	cpi	r24, 0x3C	; 60
     98e:	14 f0       	brlt	.+4      	; 0x994 <__stack+0x495>
     990:	c0 93 b1 01 	sts	0x01B1, r28
					if (display_hour == 12 || display_hour >= 24) display_hour = -1;
     994:	80 91 ac 01 	lds	r24, 0x01AC
     998:	8c 30       	cpi	r24, 0x0C	; 12
     99a:	21 f0       	breq	.+8      	; 0x9a4 <__stack+0x4a5>
     99c:	80 91 ac 01 	lds	r24, 0x01AC
     9a0:	88 31       	cpi	r24, 0x18	; 24
     9a2:	14 f0       	brlt	.+4      	; 0x9a8 <__stack+0x4a9>
     9a4:	c0 93 ac 01 	sts	0x01AC, r28
				}
				
				// go to sleep once animation is finished
				if (display_second < 0 && display_minute < 0 && display_hour < 0)
     9a8:	80 91 ad 01 	lds	r24, 0x01AD
     9ac:	87 ff       	sbrs	r24, 7
     9ae:	06 c4       	rjmp	.+2060   	; 0x11bc <__stack+0xcbd>
     9b0:	80 91 b1 01 	lds	r24, 0x01B1
     9b4:	87 ff       	sbrs	r24, 7
     9b6:	02 c4       	rjmp	.+2052   	; 0x11bc <__stack+0xcbd>
     9b8:	80 91 ac 01 	lds	r24, 0x01AC
     9bc:	87 ff       	sbrs	r24, 7
     9be:	fe c3       	rjmp	.+2044   	; 0x11bc <__stack+0xcbd>
				{
					mode = MODE_SLEEPING;
     9c0:	10 92 9f 01 	sts	0x019F, r1
					to_sleep = 1;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 a0 01 	sts	0x01A0, r24
     9ca:	f8 c3       	rjmp	.+2032   	; 0x11bc <__stack+0xcbd>
				}
			}
		}
		else if (mode == MODE_SETTIME_HOUR)
     9cc:	80 91 9f 01 	lds	r24, 0x019F
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0x4d7>
     9d4:	ce c0       	rjmp	.+412    	; 0xb72 <__stack+0x673>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     9d6:	80 91 a8 01 	lds	r24, 0x01A8
     9da:	80 ff       	sbrs	r24, 0
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0x4e3>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <__stack+0x4e5>
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	80 93 ad 01 	sts	0x01AD, r24
			
			// indicate AM or PM
			display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     9e8:	80 91 a7 01 	lds	r24, 0x01A7
     9ec:	8c 30       	cpi	r24, 0x0C	; 12
     9ee:	18 f0       	brcs	.+6      	; 0x9f6 <__stack+0x4f7>
     9f0:	2a e3       	ldi	r18, 0x3A	; 58
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0x4fb>
     9f6:	2c e1       	ldi	r18, 0x1C	; 28
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	80 91 a8 01 	lds	r24, 0x01A8
     9fe:	65 e0       	ldi	r22, 0x05	; 5
     a00:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     a04:	b9 01       	movw	r22, r18
     a06:	69 0f       	add	r22, r25
     a08:	71 1d       	adc	r23, r1
     a0a:	cb 01       	movw	r24, r22
     a0c:	6c e3       	ldi	r22, 0x3C	; 60
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     a14:	80 93 b1 01 	sts	0x01B1, r24
			
			// indicate current settings
			display_hour = cur_hour;
     a18:	80 91 a7 01 	lds	r24, 0x01A7
     a1c:	80 93 ac 01 	sts	0x01AC, r24
			
			if (button1_is_down())
     a20:	1b 99       	sbic	0x03, 3	; 3
     a22:	6f c0       	rjmp	.+222    	; 0xb02 <__stack+0x603>
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
     a24:	80 91 a7 01 	lds	r24, 0x01A7
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	68 e1       	ldi	r22, 0x18	; 24
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     a34:	80 93 a7 01 	sts	0x01A7, r24
				display_hour = cur_hour;
     a38:	80 91 a7 01 	lds	r24, 0x01A7
     a3c:	80 93 ac 01 	sts	0x01AC, r24
				
				eeprom_is_dirty = 1;
				
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     a40:	80 91 a7 01 	lds	r24, 0x01A7
     a44:	8c 30       	cpi	r24, 0x0C	; 12
     a46:	18 f0       	brcs	.+6      	; 0xa4e <__stack+0x54f>
     a48:	2a e3       	ldi	r18, 0x3A	; 58
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <__stack+0x553>
     a4e:	2c e1       	ldi	r18, 0x1C	; 28
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	80 91 a8 01 	lds	r24, 0x01A8
     a56:	65 e0       	ldi	r22, 0x05	; 5
     a58:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     a5c:	a9 01       	movw	r20, r18
     a5e:	49 0f       	add	r20, r25
     a60:	51 1d       	adc	r21, r1
     a62:	ca 01       	movw	r24, r20
     a64:	6c e3       	ldi	r22, 0x3C	; 60
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     a6c:	80 93 b1 01 	sts	0x01B1, r24
     a70:	51 e2       	ldi	r21, 0x21	; 33
     a72:	5a 95       	dec	r21
     a74:	f1 f7       	brne	.-4      	; 0xa72 <__stack+0x573>
     a76:	00 00       	nop
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     a78:	40 e0       	ldi	r20, 0x00	; 0
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     a7a:	e5 e0       	ldi	r30, 0x05	; 5
     a7c:	ac e3       	ldi	r26, 0x3C	; 60
     a7e:	6a 2e       	mov	r6, r26
     a80:	71 2c       	mov	r7, r1
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     a82:	29 c0       	rjmp	.+82     	; 0xad6 <__stack+0x5d7>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 0 : -1;
     a84:	80 91 a8 01 	lds	r24, 0x01A8
     a88:	80 ff       	sbrs	r24, 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x591>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <__stack+0x593>
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate AM or PM
					display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     a96:	80 91 a7 01 	lds	r24, 0x01A7
     a9a:	8c 30       	cpi	r24, 0x0C	; 12
     a9c:	18 f0       	brcs	.+6      	; 0xaa4 <__stack+0x5a5>
     a9e:	2a e3       	ldi	r18, 0x3A	; 58
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <__stack+0x5a9>
     aa4:	2c e1       	ldi	r18, 0x1C	; 28
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	80 91 a8 01 	lds	r24, 0x01A8
     aac:	6e 2f       	mov	r22, r30
     aae:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     ab2:	b9 01       	movw	r22, r18
     ab4:	69 0f       	add	r22, r25
     ab6:	71 1d       	adc	r23, r1
     ab8:	cb 01       	movw	r24, r22
     aba:	b3 01       	movw	r22, r6
     abc:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     ac0:	80 93 b1 01 	sts	0x01B1, r24
					
					// indicate current settings
					display_hour = cur_hour;
     ac4:	80 91 a7 01 	lds	r24, 0x01A7
     ac8:	80 93 ac 01 	sts	0x01AC, r24
     acc:	71 e2       	ldi	r23, 0x21	; 33
     ace:	7a 95       	dec	r23
     ad0:	f1 f7       	brne	.-4      	; 0xace <__stack+0x5cf>
     ad2:	00 00       	nop
				// indicate AM or PM
				display_minute = (((cur_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	24 2f       	mov	r18, r20
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	11 23       	and	r17, r17
     adc:	19 f4       	brne	.+6      	; 0xae4 <__stack+0x5e5>
     ade:	8a e0       	ldi	r24, 0x0A	; 10
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <__stack+0x5e9>
     ae4:	85 e0       	ldi	r24, 0x05	; 5
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	14 f4       	brge	.+4      	; 0xaf2 <__stack+0x5f3>
     aee:	1b 9b       	sbis	0x03, 3	; 3
     af0:	c9 cf       	rjmp	.-110    	; 0xa84 <__stack+0x585>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     af2:	1b 9b       	sbis	0x03, 3	; 3
     af4:	10 c0       	rjmp	.+32     	; 0xb16 <__stack+0x617>
     af6:	81 e2       	ldi	r24, 0x21	; 33
     af8:	8a 95       	dec	r24
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <__stack+0x5f9>
     afc:	00 00       	nop
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
				display_hour = cur_hour;
				
				eeprom_is_dirty = 1;
     afe:	d1 e0       	ldi	r29, 0x01	; 1
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <__stack+0x613>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     b02:	1b 9b       	sbis	0x03, 3	; 3
     b04:	0a c0       	rjmp	.+20     	; 0xb1a <__stack+0x61b>
			{
				if (button_was_down != 0)
     b06:	11 23       	and	r17, r17
     b08:	41 f0       	breq	.+16     	; 0xb1a <__stack+0x61b>
     b0a:	41 e2       	ldi	r20, 0x21	; 33
     b0c:	4a 95       	dec	r20
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <__stack+0x60d>
     b10:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     b12:	10 e0       	ldi	r17, 0x00	; 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__stack+0x61b>
			{
				// change
				cur_hour = (cur_hour + 1) % 24;
				display_hour = cur_hour;
				
				eeprom_is_dirty = 1;
     b16:	d1 e0       	ldi	r29, 0x01	; 1
					display_hour = cur_hour;
					
					debounce();
				}
				
				button_was_down = 1;
     b18:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     b1a:	19 99       	sbic	0x03, 1	; 3
     b1c:	52 c3       	rjmp	.+1700   	; 0x11c2 <__stack+0xcc3>
			{
				// indicate mode
				display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     b1e:	80 91 a8 01 	lds	r24, 0x01A8
     b22:	80 ff       	sbrs	r24, 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <__stack+0x62b>
     b26:	85 e0       	ldi	r24, 0x05	; 5
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <__stack+0x62d>
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	80 93 ad 01 	sts	0x01AD, r24
				
				display_hour = -1;
     b30:	c0 93 ac 01 	sts	0x01AC, r28
				
				eeprom_is_dirty = 1;
				
				// goto next mode
				mode = MODE_SETTIME_MINUTE;
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     b3a:	10 92 a0 01 	sts	0x01A0, r1
     b3e:	51 e2       	ldi	r21, 0x21	; 33
     b40:	5a 95       	dec	r21
     b42:	f1 f7       	brne	.-4      	; 0xb40 <__stack+0x641>
     b44:	00 00       	nop
     b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x663>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     b48:	80 91 a8 01 	lds	r24, 0x01A8
     b4c:	80 ff       	sbrs	r24, 0
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__stack+0x655>
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <__stack+0x657>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate current settings
					display_minute = cur_minute;
     b5a:	80 91 a9 01 	lds	r24, 0x01A9
     b5e:	80 93 b1 01 	sts	0x01B1, r24
				mode = MODE_SETTIME_MINUTE;
				to_sleep = 0;
				
				debounce();
				
				while (button2_is_down())
     b62:	19 9b       	sbis	0x03, 1	; 3
     b64:	f1 cf       	rjmp	.-30     	; 0xb48 <__stack+0x649>
     b66:	61 e2       	ldi	r22, 0x21	; 33
     b68:	6a 95       	dec	r22
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <__stack+0x669>
     b6c:	00 00       	nop
				// indicate mode
				display_second = bit_is_set(cur_second, 0) ? 5 : -1;
				
				display_hour = -1;
				
				eeprom_is_dirty = 1;
     b6e:	d1 e0       	ldi	r29, 0x01	; 1
     b70:	28 c3       	rjmp	.+1616   	; 0x11c2 <__stack+0xcc3>
				}
				
				debounce();
			}
		}
		else if (mode == MODE_SETTIME_MINUTE)
     b72:	80 91 9f 01 	lds	r24, 0x019F
     b76:	85 30       	cpi	r24, 0x05	; 5
     b78:	09 f0       	breq	.+2      	; 0xb7c <__stack+0x67d>
     b7a:	cb c0       	rjmp	.+406    	; 0xd12 <__stack+0x813>
		{			
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     b7c:	80 91 a8 01 	lds	r24, 0x01A8
     b80:	80 ff       	sbrs	r24, 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <__stack+0x689>
     b84:	85 e0       	ldi	r24, 0x05	; 5
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <__stack+0x68b>
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	80 93 ad 01 	sts	0x01AD, r24
			
			// turn off
			display_hour = -1;
     b8e:	c0 93 ac 01 	sts	0x01AC, r28
			
			// show current settings
			display_minute = cur_minute;
     b92:	80 91 a9 01 	lds	r24, 0x01A9
     b96:	80 93 b1 01 	sts	0x01B1, r24
			
			if (button1_is_down())
     b9a:	1b 99       	sbic	0x03, 3	; 3
     b9c:	3c c0       	rjmp	.+120    	; 0xc16 <__stack+0x717>
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
     b9e:	80 91 a9 01 	lds	r24, 0x01A9
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	6c e3       	ldi	r22, 0x3C	; 60
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     bae:	80 93 a9 01 	sts	0x01A9, r24
				display_minute = cur_minute;
     bb2:	80 91 a9 01 	lds	r24, 0x01A9
     bb6:	80 93 b1 01 	sts	0x01B1, r24
     bba:	71 e2       	ldi	r23, 0x21	; 33
     bbc:	7a 95       	dec	r23
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <__stack+0x6bd>
     bc0:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	12 c0       	rjmp	.+36     	; 0xbea <__stack+0x6eb>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 5 : -1;
     bc6:	80 91 a8 01 	lds	r24, 0x01A8
     bca:	80 ff       	sbrs	r24, 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <__stack+0x6d3>
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <__stack+0x6d5>
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	80 93 ad 01 	sts	0x01AD, r24
					
					// show current settings
					display_minute = cur_minute;
     bd8:	80 91 a9 01 	lds	r24, 0x01A9
     bdc:	80 93 b1 01 	sts	0x01B1, r24
     be0:	81 e2       	ldi	r24, 0x21	; 33
     be2:	8a 95       	dec	r24
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <__stack+0x6e3>
     be6:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     be8:	4f 5f       	subi	r20, 0xFF	; 255
     bea:	24 2f       	mov	r18, r20
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	11 23       	and	r17, r17
     bf0:	19 f4       	brne	.+6      	; 0xbf8 <__stack+0x6f9>
     bf2:	8a e0       	ldi	r24, 0x0A	; 10
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <__stack+0x6fd>
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	28 17       	cp	r18, r24
     bfe:	39 07       	cpc	r19, r25
     c00:	14 f4       	brge	.+4      	; 0xc06 <__stack+0x707>
     c02:	1b 9b       	sbis	0x03, 3	; 3
     c04:	e0 cf       	rjmp	.-64     	; 0xbc6 <__stack+0x6c7>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     c06:	1b 9b       	sbis	0x03, 3	; 3
     c08:	10 c0       	rjmp	.+32     	; 0xc2a <__stack+0x72b>
     c0a:	d1 e2       	ldi	r29, 0x21	; 33
     c0c:	da 95       	dec	r29
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <__stack+0x70d>
     c10:	00 00       	nop
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
				display_minute = cur_minute;
				
				eeprom_is_dirty = 1;
     c12:	d1 e0       	ldi	r29, 0x01	; 1
     c14:	08 c0       	rjmp	.+16     	; 0xc26 <__stack+0x727>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     c16:	1b 9b       	sbis	0x03, 3	; 3
     c18:	0a c0       	rjmp	.+20     	; 0xc2e <__stack+0x72f>
			{
				if (button_was_down != 0)
     c1a:	11 23       	and	r17, r17
     c1c:	41 f0       	breq	.+16     	; 0xc2e <__stack+0x72f>
     c1e:	41 e2       	ldi	r20, 0x21	; 33
     c20:	4a 95       	dec	r20
     c22:	f1 f7       	brne	.-4      	; 0xc20 <__stack+0x721>
     c24:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     c26:	10 e0       	ldi	r17, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <__stack+0x72f>
			{
				// change
				cur_minute = (cur_minute + 1) % 60;
				display_minute = cur_minute;
				
				eeprom_is_dirty = 1;
     c2a:	d1 e0       	ldi	r29, 0x01	; 1
					// show current settings
					display_minute = cur_minute;
					debounce();
				}
				
				button_was_down = 1;
     c2c:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     c2e:	19 99       	sbic	0x03, 1	; 3
     c30:	c8 c2       	rjmp	.+1424   	; 0x11c2 <__stack+0xcc3>
			{
				// clear display
				display_second = -1;
     c32:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
     c36:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
     c3a:	c0 93 ac 01 	sts	0x01AC, r28
				
				if (alarm_enabled == 0)
     c3e:	80 91 a5 01 	lds	r24, 0x01A5
     c42:	88 23       	and	r24, r24
     c44:	79 f5       	brne	.+94     	; 0xca4 <__stack+0x7a5>
				{
					// skip alarm time set modes, instead go to enable/disable alarm mode
					mode = MODE_SETALARM_ONOFF;
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	80 93 9f 01 	sts	0x019F, r24
					to_sleep = 0;
     c4c:	10 92 a0 01 	sts	0x01A0, r1
     c50:	51 e2       	ldi	r21, 0x21	; 33
     c52:	5a 95       	dec	r21
     c54:	f1 f7       	brne	.-4      	; 0xc52 <__stack+0x753>
     c56:	00 00       	nop
     c58:	22 c0       	rjmp	.+68     	; 0xc9e <__stack+0x79f>
					debounce();
					while (button2_is_down())
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     c5a:	80 91 a8 01 	lds	r24, 0x01A8
     c5e:	80 ff       	sbrs	r24, 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <__stack+0x767>
     c62:	84 e1       	ldi	r24, 0x14	; 20
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <__stack+0x769>
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	80 93 ad 01 	sts	0x01AD, r24
						
						// indicate alarm enabled status
						display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     c6c:	80 91 a5 01 	lds	r24, 0x01A5
     c70:	88 23       	and	r24, r24
     c72:	39 f0       	breq	.+14     	; 0xc82 <__stack+0x783>
     c74:	80 91 a8 01 	lds	r24, 0x01A8
     c78:	60 2f       	mov	r22, r16
     c7a:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     c7e:	9b 5f       	subi	r25, 0xFB	; 251
     c80:	0c c0       	rjmp	.+24     	; 0xc9a <__stack+0x79b>
     c82:	80 91 a8 01 	lds	r24, 0x01A8
     c86:	60 2f       	mov	r22, r16
     c88:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     c8c:	89 2f       	mov	r24, r25
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0b 96       	adiw	r24, 0x0b	; 11
     c92:	b2 01       	movw	r22, r4
     c94:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     c98:	98 2f       	mov	r25, r24
     c9a:	90 93 ac 01 	sts	0x01AC, r25
				{
					// skip alarm time set modes, instead go to enable/disable alarm mode
					mode = MODE_SETALARM_ONOFF;
					to_sleep = 0;
					debounce();
					while (button2_is_down())
     c9e:	19 9b       	sbis	0x03, 1	; 3
     ca0:	dc cf       	rjmp	.-72     	; 0xc5a <__stack+0x75b>
     ca2:	fb c0       	rjmp	.+502    	; 0xe9a <__stack+0x99b>
					debounce();
				}
				else
				{
					// goto alarm time set mode
					mode = MODE_SETALARM_HOUR;
     ca4:	86 e0       	ldi	r24, 0x06	; 6
     ca6:	80 93 9f 01 	sts	0x019F, r24
					to_sleep = 0;
     caa:	10 92 a0 01 	sts	0x01A0, r1
     cae:	71 e2       	ldi	r23, 0x21	; 33
     cb0:	7a 95       	dec	r23
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <__stack+0x7b1>
     cb4:	00 00       	nop
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 10 : -1;
						
						// indicate AM or PM
						display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     cb6:	45 e0       	ldi	r20, 0x05	; 5
     cb8:	ec e3       	ldi	r30, 0x3C	; 60
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	24 c0       	rjmp	.+72     	; 0xd06 <__stack+0x807>
					to_sleep = 0;
					debounce();
					while (button2_is_down())
					{
						// indicate mode
						display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     cbe:	80 91 a8 01 	lds	r24, 0x01A8
     cc2:	80 ff       	sbrs	r24, 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <__stack+0x7cb>
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <__stack+0x7cd>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	80 93 ad 01 	sts	0x01AD, r24
						
						// indicate AM or PM
						display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     cd0:	80 91 a4 01 	lds	r24, 0x01A4
     cd4:	8c 30       	cpi	r24, 0x0C	; 12
     cd6:	18 f0       	brcs	.+6      	; 0xcde <__stack+0x7df>
     cd8:	2a e3       	ldi	r18, 0x3A	; 58
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <__stack+0x7e3>
     cde:	2c e1       	ldi	r18, 0x1C	; 28
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	80 91 a8 01 	lds	r24, 0x01A8
     ce6:	64 2f       	mov	r22, r20
     ce8:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     cec:	b9 01       	movw	r22, r18
     cee:	69 0f       	add	r22, r25
     cf0:	71 1d       	adc	r23, r1
     cf2:	cb 01       	movw	r24, r22
     cf4:	bf 01       	movw	r22, r30
     cf6:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     cfa:	80 93 b1 01 	sts	0x01B1, r24
						
						// indicate alarm hour time
						display_hour = alarm_hour;
     cfe:	80 91 a4 01 	lds	r24, 0x01A4
     d02:	80 93 ac 01 	sts	0x01AC, r24
				{
					// goto alarm time set mode
					mode = MODE_SETALARM_HOUR;
					to_sleep = 0;
					debounce();
					while (button2_is_down())
     d06:	19 9b       	sbis	0x03, 1	; 3
     d08:	da cf       	rjmp	.-76     	; 0xcbe <__stack+0x7bf>
     d0a:	71 e2       	ldi	r23, 0x21	; 33
     d0c:	7a 95       	dec	r23
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <__stack+0x80d>
     d10:	c7 c0       	rjmp	.+398    	; 0xea0 <__stack+0x9a1>
					}
					debounce();
				}
			}
		}
		else if (mode == MODE_SETALARM_HOUR)
     d12:	80 91 9f 01 	lds	r24, 0x019F
     d16:	86 30       	cpi	r24, 0x06	; 6
     d18:	09 f0       	breq	.+2      	; 0xd1c <__stack+0x81d>
     d1a:	c4 c0       	rjmp	.+392    	; 0xea4 <__stack+0x9a5>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     d1c:	80 91 a8 01 	lds	r24, 0x01A8
     d20:	80 ff       	sbrs	r24, 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <__stack+0x829>
     d24:	8a e0       	ldi	r24, 0x0A	; 10
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <__stack+0x82b>
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	80 93 ad 01 	sts	0x01AD, r24
			
			// indicate AM or PM
			display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     d2e:	80 91 a4 01 	lds	r24, 0x01A4
     d32:	8c 30       	cpi	r24, 0x0C	; 12
     d34:	18 f0       	brcs	.+6      	; 0xd3c <__stack+0x83d>
     d36:	2a e3       	ldi	r18, 0x3A	; 58
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <__stack+0x841>
     d3c:	2c e1       	ldi	r18, 0x1C	; 28
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	80 91 a8 01 	lds	r24, 0x01A8
     d44:	65 e0       	ldi	r22, 0x05	; 5
     d46:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     d4a:	a9 01       	movw	r20, r18
     d4c:	49 0f       	add	r20, r25
     d4e:	51 1d       	adc	r21, r1
     d50:	ca 01       	movw	r24, r20
     d52:	6c e3       	ldi	r22, 0x3C	; 60
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     d5a:	80 93 b1 01 	sts	0x01B1, r24
			
			// indicate current settings
			display_hour = alarm_hour;
     d5e:	80 91 a4 01 	lds	r24, 0x01A4
     d62:	80 93 ac 01 	sts	0x01AC, r24
			
			if (button1_is_down())
     d66:	1b 99       	sbic	0x03, 3	; 3
     d68:	6f c0       	rjmp	.+222    	; 0xe48 <__stack+0x949>
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
     d6a:	80 91 a4 01 	lds	r24, 0x01A4
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	68 e1       	ldi	r22, 0x18	; 24
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     d7a:	80 93 a4 01 	sts	0x01A4, r24
				display_hour = alarm_hour;
     d7e:	80 91 a4 01 	lds	r24, 0x01A4
     d82:	80 93 ac 01 	sts	0x01AC, r24
				
				eeprom_is_dirty = 1;
				
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     d86:	80 91 a4 01 	lds	r24, 0x01A4
     d8a:	8c 30       	cpi	r24, 0x0C	; 12
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <__stack+0x895>
     d8e:	2a e3       	ldi	r18, 0x3A	; 58
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <__stack+0x899>
     d94:	2c e1       	ldi	r18, 0x1C	; 28
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	80 91 a8 01 	lds	r24, 0x01A8
     d9c:	65 e0       	ldi	r22, 0x05	; 5
     d9e:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     da2:	b9 01       	movw	r22, r18
     da4:	69 0f       	add	r22, r25
     da6:	71 1d       	adc	r23, r1
     da8:	cb 01       	movw	r24, r22
     daa:	6c e3       	ldi	r22, 0x3C	; 60
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     db2:	80 93 b1 01 	sts	0x01B1, r24
     db6:	71 e2       	ldi	r23, 0x21	; 33
     db8:	7a 95       	dec	r23
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <__stack+0x8b9>
     dbc:	00 00       	nop
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     dbe:	40 e0       	ldi	r20, 0x00	; 0
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 10 : -1;
					
					// indicate AM or PM
					display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     dc0:	e5 e0       	ldi	r30, 0x05	; 5
     dc2:	fc e3       	ldi	r31, 0x3C	; 60
     dc4:	6f 2e       	mov	r6, r31
     dc6:	71 2c       	mov	r7, r1
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     dc8:	29 c0       	rjmp	.+82     	; 0xe1c <__stack+0x91d>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 10 : -1;
     dca:	80 91 a8 01 	lds	r24, 0x01A8
     dce:	80 ff       	sbrs	r24, 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <__stack+0x8d7>
     dd2:	8a e0       	ldi	r24, 0x0A	; 10
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <__stack+0x8d9>
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate AM or PM
					display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
     ddc:	80 91 a4 01 	lds	r24, 0x01A4
     de0:	8c 30       	cpi	r24, 0x0C	; 12
     de2:	18 f0       	brcs	.+6      	; 0xdea <__stack+0x8eb>
     de4:	2a e3       	ldi	r18, 0x3A	; 58
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <__stack+0x8ef>
     dea:	2c e1       	ldi	r18, 0x1C	; 28
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	80 91 a8 01 	lds	r24, 0x01A8
     df2:	6e 2f       	mov	r22, r30
     df4:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     df8:	b9 01       	movw	r22, r18
     dfa:	69 0f       	add	r22, r25
     dfc:	71 1d       	adc	r23, r1
     dfe:	cb 01       	movw	r24, r22
     e00:	b3 01       	movw	r22, r6
     e02:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     e06:	80 93 b1 01 	sts	0x01B1, r24
					
					// indicate current settings
					display_hour = alarm_hour;
     e0a:	80 91 a4 01 	lds	r24, 0x01A4
     e0e:	80 93 ac 01 	sts	0x01AC, r24
     e12:	71 e2       	ldi	r23, 0x21	; 33
     e14:	7a 95       	dec	r23
     e16:	f1 f7       	brne	.-4      	; 0xe14 <__stack+0x915>
     e18:	00 00       	nop
				// indicate AM or PM
				display_minute = (((alarm_hour >= 12) ? 58 : 28) + (cur_second % 5)) % 60;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     e1a:	4f 5f       	subi	r20, 0xFF	; 255
     e1c:	24 2f       	mov	r18, r20
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	11 23       	and	r17, r17
     e22:	19 f4       	brne	.+6      	; 0xe2a <__stack+0x92b>
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <__stack+0x92f>
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	28 17       	cp	r18, r24
     e30:	39 07       	cpc	r19, r25
     e32:	14 f4       	brge	.+4      	; 0xe38 <__stack+0x939>
     e34:	1b 9b       	sbis	0x03, 3	; 3
     e36:	c9 cf       	rjmp	.-110    	; 0xdca <__stack+0x8cb>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     e38:	1b 9b       	sbis	0x03, 3	; 3
     e3a:	10 c0       	rjmp	.+32     	; 0xe5c <__stack+0x95d>
     e3c:	81 e2       	ldi	r24, 0x21	; 33
     e3e:	8a 95       	dec	r24
     e40:	f1 f7       	brne	.-4      	; 0xe3e <__stack+0x93f>
     e42:	00 00       	nop
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
				display_hour = alarm_hour;
				
				eeprom_is_dirty = 1;
     e44:	d1 e0       	ldi	r29, 0x01	; 1
     e46:	08 c0       	rjmp	.+16     	; 0xe58 <__stack+0x959>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     e48:	1b 9b       	sbis	0x03, 3	; 3
     e4a:	0a c0       	rjmp	.+20     	; 0xe60 <__stack+0x961>
			{
				if (button_was_down != 0)
     e4c:	11 23       	and	r17, r17
     e4e:	41 f0       	breq	.+16     	; 0xe60 <__stack+0x961>
     e50:	41 e2       	ldi	r20, 0x21	; 33
     e52:	4a 95       	dec	r20
     e54:	f1 f7       	brne	.-4      	; 0xe52 <__stack+0x953>
     e56:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <__stack+0x961>
			{
				// change
				alarm_hour = (alarm_hour + 1) % 24;
				display_hour = alarm_hour;
				
				eeprom_is_dirty = 1;
     e5c:	d1 e0       	ldi	r29, 0x01	; 1
					display_hour = alarm_hour;
					
					debounce();
				}
				
				button_was_down = 1;
     e5e:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     e60:	19 99       	sbic	0x03, 1	; 3
     e62:	af c1       	rjmp	.+862    	; 0x11c2 <__stack+0xcc3>
			{
				// clear
				display_hour = -1;
     e64:	c0 93 ac 01 	sts	0x01AC, r28
				
				// goto next mode
				mode = MODE_SETALARM_MINUTE;
     e68:	87 e0       	ldi	r24, 0x07	; 7
     e6a:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     e6e:	10 92 a0 01 	sts	0x01A0, r1
     e72:	51 e2       	ldi	r21, 0x21	; 33
     e74:	5a 95       	dec	r21
     e76:	f1 f7       	brne	.-4      	; 0xe74 <__stack+0x975>
     e78:	00 00       	nop
     e7a:	0d c0       	rjmp	.+26     	; 0xe96 <__stack+0x997>
				debounce();
				
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     e7c:	80 91 a8 01 	lds	r24, 0x01A8
     e80:	80 ff       	sbrs	r24, 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__stack+0x989>
     e84:	8f e0       	ldi	r24, 0x0F	; 15
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <__stack+0x98b>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate current settings
					display_minute = alarm_minute;
     e8e:	80 91 aa 01 	lds	r24, 0x01AA
     e92:	80 93 b1 01 	sts	0x01B1, r24
				mode = MODE_SETALARM_MINUTE;
				to_sleep = 0;
				
				debounce();
				
				while (button2_is_down())
     e96:	19 9b       	sbis	0x03, 1	; 3
     e98:	f1 cf       	rjmp	.-30     	; 0xe7c <__stack+0x97d>
     e9a:	61 e2       	ldi	r22, 0x21	; 33
     e9c:	6a 95       	dec	r22
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <__stack+0x99d>
     ea0:	00 00       	nop
     ea2:	8f c1       	rjmp	.+798    	; 0x11c2 <__stack+0xcc3>
				}
				
				debounce();
			}
		}
		else if (mode == MODE_SETALARM_MINUTE)
     ea4:	80 91 9f 01 	lds	r24, 0x019F
     ea8:	87 30       	cpi	r24, 0x07	; 7
     eaa:	09 f0       	breq	.+2      	; 0xeae <__stack+0x9af>
     eac:	90 c0       	rjmp	.+288    	; 0xfce <__stack+0xacf>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     eae:	80 91 a8 01 	lds	r24, 0x01A8
     eb2:	80 ff       	sbrs	r24, 0
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <__stack+0x9bb>
     eb6:	8f e0       	ldi	r24, 0x0F	; 15
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <__stack+0x9bd>
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	80 93 ad 01 	sts	0x01AD, r24
			
			// turn off
			display_hour = -1;
     ec0:	c0 93 ac 01 	sts	0x01AC, r28
			
			// show current settings
			display_minute = alarm_minute;
     ec4:	80 91 aa 01 	lds	r24, 0x01AA
     ec8:	80 93 b1 01 	sts	0x01B1, r24
			
			if (button1_is_down())
     ecc:	1b 99       	sbic	0x03, 3	; 3
     ece:	3c c0       	rjmp	.+120    	; 0xf48 <__stack+0xa49>
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
     ed0:	80 91 aa 01 	lds	r24, 0x01AA
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	6c e3       	ldi	r22, 0x3C	; 60
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     ee0:	80 93 aa 01 	sts	0x01AA, r24
				display_minute = alarm_minute;
     ee4:	80 91 aa 01 	lds	r24, 0x01AA
     ee8:	80 93 b1 01 	sts	0x01B1, r24
     eec:	71 e2       	ldi	r23, 0x21	; 33
     eee:	7a 95       	dec	r23
     ef0:	f1 f7       	brne	.-4      	; 0xeee <__stack+0x9ef>
     ef2:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	12 c0       	rjmp	.+36     	; 0xf1c <__stack+0xa1d>
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 15 : -1;
     ef8:	80 91 a8 01 	lds	r24, 0x01A8
     efc:	80 ff       	sbrs	r24, 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <__stack+0xa05>
     f00:	8f e0       	ldi	r24, 0x0F	; 15
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <__stack+0xa07>
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	80 93 ad 01 	sts	0x01AD, r24
					
					// show current settings
					display_minute = alarm_minute;
     f0a:	80 91 aa 01 	lds	r24, 0x01AA
     f0e:	80 93 b1 01 	sts	0x01B1, r24
     f12:	81 e2       	ldi	r24, 0x21	; 33
     f14:	8a 95       	dec	r24
     f16:	f1 f7       	brne	.-4      	; 0xf14 <__stack+0xa15>
     f18:	00 00       	nop
				
				eeprom_is_dirty = 1;
				
				debounce();
				
				for (uint8_t i = 0; i < (button_was_down == 0 ? 10 : 5) && button1_is_down(); i++)
     f1a:	4f 5f       	subi	r20, 0xFF	; 255
     f1c:	24 2f       	mov	r18, r20
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	11 23       	and	r17, r17
     f22:	19 f4       	brne	.+6      	; 0xf2a <__stack+0xa2b>
     f24:	8a e0       	ldi	r24, 0x0A	; 10
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <__stack+0xa2f>
     f2a:	85 e0       	ldi	r24, 0x05	; 5
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	14 f4       	brge	.+4      	; 0xf38 <__stack+0xa39>
     f34:	1b 9b       	sbis	0x03, 3	; 3
     f36:	e0 cf       	rjmp	.-64     	; 0xef8 <__stack+0x9f9>
					debounce();
				}
				
				button_was_down = 1;
				
				if (button1_is_up())
     f38:	1b 9b       	sbis	0x03, 3	; 3
     f3a:	10 c0       	rjmp	.+32     	; 0xf5c <__stack+0xa5d>
     f3c:	d1 e2       	ldi	r29, 0x21	; 33
     f3e:	da 95       	dec	r29
     f40:	f1 f7       	brne	.-4      	; 0xf3e <__stack+0xa3f>
     f42:	00 00       	nop
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
				display_minute = alarm_minute;
				
				eeprom_is_dirty = 1;
     f44:	d1 e0       	ldi	r29, 0x01	; 1
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <__stack+0xa59>
				{
					button_was_down = 0;
					debounce();
				}
			}
			else if (button1_is_up())
     f48:	1b 9b       	sbis	0x03, 3	; 3
     f4a:	0a c0       	rjmp	.+20     	; 0xf60 <__stack+0xa61>
			{
				if (button_was_down != 0)
     f4c:	11 23       	and	r17, r17
     f4e:	41 f0       	breq	.+16     	; 0xf60 <__stack+0xa61>
     f50:	41 e2       	ldi	r20, 0x21	; 33
     f52:	4a 95       	dec	r20
     f54:	f1 f7       	brne	.-4      	; 0xf52 <__stack+0xa53>
     f56:	00 00       	nop
				{
					debounce();
				}
				
				button_was_down = 0;
     f58:	10 e0       	ldi	r17, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <__stack+0xa61>
			{
				// change
				alarm_minute = (alarm_minute + 1) % 60;
				display_minute = alarm_minute;
				
				eeprom_is_dirty = 1;
     f5c:	d1 e0       	ldi	r29, 0x01	; 1
					// show current settings
					display_minute = alarm_minute;
					debounce();
				}
				
				button_was_down = 1;
     f5e:	11 e0       	ldi	r17, 0x01	; 1
				}
				
				button_was_down = 0;
			}
			
			if (button2_is_down())
     f60:	19 99       	sbic	0x03, 1	; 3
     f62:	2f c1       	rjmp	.+606    	; 0x11c2 <__stack+0xcc3>
			{
				// clear display
				display_second = -1;
     f64:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
     f68:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
     f6c:	c0 93 ac 01 	sts	0x01AC, r28
				
				// goto next mode
				mode = MODE_SETALARM_ONOFF;
     f70:	88 e0       	ldi	r24, 0x08	; 8
     f72:	80 93 9f 01 	sts	0x019F, r24
				to_sleep = 0;
     f76:	10 92 a0 01 	sts	0x01A0, r1
     f7a:	51 e2       	ldi	r21, 0x21	; 33
     f7c:	5a 95       	dec	r21
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <__stack+0xa7d>
     f80:	00 00       	nop
     f82:	22 c0       	rjmp	.+68     	; 0xfc8 <__stack+0xac9>
				debounce();
				while (button2_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     f84:	80 91 a8 01 	lds	r24, 0x01A8
     f88:	80 ff       	sbrs	r24, 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <__stack+0xa91>
     f8c:	84 e1       	ldi	r24, 0x14	; 20
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <__stack+0xa93>
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     f96:	80 91 a5 01 	lds	r24, 0x01A5
     f9a:	88 23       	and	r24, r24
     f9c:	39 f0       	breq	.+14     	; 0xfac <__stack+0xaad>
     f9e:	80 91 a8 01 	lds	r24, 0x01A8
     fa2:	60 2f       	mov	r22, r16
     fa4:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     fa8:	9b 5f       	subi	r25, 0xFB	; 251
     faa:	0c c0       	rjmp	.+24     	; 0xfc4 <__stack+0xac5>
     fac:	80 91 a8 01 	lds	r24, 0x01A8
     fb0:	60 2f       	mov	r22, r16
     fb2:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
     fb6:	89 2f       	mov	r24, r25
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0b 96       	adiw	r24, 0x0b	; 11
     fbc:	b2 01       	movw	r22, r4
     fbe:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
     fc2:	98 2f       	mov	r25, r24
     fc4:	90 93 ac 01 	sts	0x01AC, r25
				
				// goto next mode
				mode = MODE_SETALARM_ONOFF;
				to_sleep = 0;
				debounce();
				while (button2_is_down())
     fc8:	19 9b       	sbis	0x03, 1	; 3
     fca:	dc cf       	rjmp	.-72     	; 0xf84 <__stack+0xa85>
     fcc:	66 cf       	rjmp	.-308    	; 0xe9a <__stack+0x99b>
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				}
				debounce();
			}
		}
		else if (mode == MODE_SETALARM_ONOFF)
     fce:	80 91 9f 01 	lds	r24, 0x019F
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <__stack+0xad9>
     fd6:	a0 c0       	rjmp	.+320    	; 0x1118 <__stack+0xc19>
		{
			// indicate mode
			display_second = bit_is_set(cur_second, 0) ? 20 : -1;
     fd8:	80 91 a8 01 	lds	r24, 0x01A8
     fdc:	80 ff       	sbrs	r24, 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <__stack+0xae5>
     fe0:	84 e1       	ldi	r24, 0x14	; 20
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <__stack+0xae7>
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 93 ad 01 	sts	0x01AD, r24
			
			display_minute = -1; // turn off
     fea:	c0 93 b1 01 	sts	0x01B1, r28
			
			// indicate alarm enabled status
			display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
     fee:	80 91 a5 01 	lds	r24, 0x01A5
     ff2:	88 23       	and	r24, r24
     ff4:	39 f0       	breq	.+14     	; 0x1004 <__stack+0xb05>
     ff6:	80 91 a8 01 	lds	r24, 0x01A8
     ffa:	60 2f       	mov	r22, r16
     ffc:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
    1000:	9b 5f       	subi	r25, 0xFB	; 251
    1002:	0c c0       	rjmp	.+24     	; 0x101c <__stack+0xb1d>
    1004:	80 91 a8 01 	lds	r24, 0x01A8
    1008:	60 2f       	mov	r22, r16
    100a:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
    100e:	89 2f       	mov	r24, r25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0b 96       	adiw	r24, 0x0b	; 11
    1014:	b2 01       	movw	r22, r4
    1016:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    101a:	98 2f       	mov	r25, r24
    101c:	90 93 ac 01 	sts	0x01AC, r25
			
			if (button1_is_down())
    1020:	1b 99       	sbic	0x03, 3	; 3
    1022:	4e c0       	rjmp	.+156    	; 0x10c0 <__stack+0xbc1>
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
    1024:	90 91 a5 01 	lds	r25, 0x01A5
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	91 11       	cpse	r25, r1
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	80 93 a5 01 	sts	0x01A5, r24
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
    1032:	80 91 a5 01 	lds	r24, 0x01A5
    1036:	88 23       	and	r24, r24
    1038:	39 f0       	breq	.+14     	; 0x1048 <__stack+0xb49>
    103a:	80 91 a8 01 	lds	r24, 0x01A8
    103e:	60 2f       	mov	r22, r16
    1040:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
    1044:	9b 5f       	subi	r25, 0xFB	; 251
    1046:	0c c0       	rjmp	.+24     	; 0x1060 <__stack+0xb61>
    1048:	80 91 a8 01 	lds	r24, 0x01A8
    104c:	60 2f       	mov	r22, r16
    104e:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
    1052:	89 2f       	mov	r24, r25
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0b 96       	adiw	r24, 0x0b	; 11
    1058:	b2 01       	movw	r22, r4
    105a:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    105e:	98 2f       	mov	r25, r24
    1060:	90 93 ac 01 	sts	0x01AC, r25
    1064:	71 e2       	ldi	r23, 0x21	; 33
    1066:	7a 95       	dec	r23
    1068:	f1 f7       	brne	.-4      	; 0x1066 <__stack+0xb67>
    106a:	00 00       	nop
    106c:	22 c0       	rjmp	.+68     	; 0x10b2 <__stack+0xbb3>
				eeprom_is_dirty = 1;
				debounce();
				while (button1_is_down())
				{
					// indicate mode
					display_second = bit_is_set(cur_second, 0) ? 20 : -1;
    106e:	80 91 a8 01 	lds	r24, 0x01A8
    1072:	80 ff       	sbrs	r24, 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <__stack+0xb7b>
    1076:	84 e1       	ldi	r24, 0x14	; 20
    1078:	01 c0       	rjmp	.+2      	; 0x107c <__stack+0xb7d>
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	80 93 ad 01 	sts	0x01AD, r24
					
					// indicate alarm enabled status
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
    1080:	80 91 a5 01 	lds	r24, 0x01A5
    1084:	88 23       	and	r24, r24
    1086:	39 f0       	breq	.+14     	; 0x1096 <__stack+0xb97>
    1088:	80 91 a8 01 	lds	r24, 0x01A8
    108c:	60 2f       	mov	r22, r16
    108e:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
    1092:	9b 5f       	subi	r25, 0xFB	; 251
    1094:	0c c0       	rjmp	.+24     	; 0x10ae <__stack+0xbaf>
    1096:	80 91 a8 01 	lds	r24, 0x01A8
    109a:	60 2f       	mov	r22, r16
    109c:	0e 94 25 09 	call	0x124a	; 0x124a <__udivmodqi4>
    10a0:	89 2f       	mov	r24, r25
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0b 96       	adiw	r24, 0x0b	; 11
    10a6:	b2 01       	movw	r22, r4
    10a8:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    10ac:	98 2f       	mov	r25, r24
    10ae:	90 93 ac 01 	sts	0x01AC, r25
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				eeprom_is_dirty = 1;
				debounce();
				while (button1_is_down())
    10b2:	1b 9b       	sbis	0x03, 3	; 3
    10b4:	dc cf       	rjmp	.-72     	; 0x106e <__stack+0xb6f>
    10b6:	81 e2       	ldi	r24, 0x21	; 33
    10b8:	8a 95       	dec	r24
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <__stack+0xbb9>
    10bc:	00 00       	nop
			
			if (button1_is_down())
			{
				alarm_enabled = alarm_enabled == 0 ? 1 : 0; // change
				display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				eeprom_is_dirty = 1;
    10be:	d1 e0       	ldi	r29, 0x01	; 1
					display_hour = (alarm_enabled != 0) ? (5 + (cur_second % 3)) : ((11 + (cur_second % 3)) % 12);
				}
				debounce();
			}
			
			if (button2_is_down())
    10c0:	19 99       	sbic	0x03, 1	; 3
    10c2:	7f c0       	rjmp	.+254    	; 0x11c2 <__stack+0xcc3>
			{
				mode = MODE_RANDOM;
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	80 93 9f 01 	sts	0x019F, r24
				srand(TCNT2);
    10ca:	80 91 b2 00 	lds	r24, 0x00B2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 bf 09 	call	0x137e	; 0x137e <srand>
				display_second = (random() & 0x7F) % 60;
    10d4:	0e 94 18 0a 	call	0x1430	; 0x1430 <random>
    10d8:	8f 77       	andi	r24, 0x7F	; 127
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	7c e3       	ldi	r23, 0x3C	; 60
    10de:	67 2e       	mov	r6, r23
    10e0:	71 2c       	mov	r7, r1
    10e2:	b3 01       	movw	r22, r6
    10e4:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    10e8:	80 93 ad 01 	sts	0x01AD, r24
				display_minute = (random() & 0x7F) % 60;
    10ec:	0e 94 18 0a 	call	0x1430	; 0x1430 <random>
    10f0:	8f 77       	andi	r24, 0x7F	; 127
    10f2:	90 70       	andi	r25, 0x00	; 0
    10f4:	b3 01       	movw	r22, r6
    10f6:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    10fa:	80 93 b1 01 	sts	0x01B1, r24
				display_hour   = (random() & 0x7F) % 12;
    10fe:	0e 94 18 0a 	call	0x1430	; 0x1430 <random>
    1102:	8f 77       	andi	r24, 0x7F	; 127
    1104:	90 70       	andi	r25, 0x00	; 0
    1106:	b2 01       	movw	r22, r4
    1108:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    110c:	80 93 ac 01 	sts	0x01AC, r24
    1110:	41 e2       	ldi	r20, 0x21	; 33
    1112:	4a 95       	dec	r20
    1114:	f1 f7       	brne	.-4      	; 0x1112 <__stack+0xc13>
    1116:	c4 ce       	rjmp	.-632    	; 0xea0 <__stack+0x9a1>
				debounce();
			}
		}
		else if (mode == MODE_RANDOM)
    1118:	80 91 9f 01 	lds	r24, 0x019F
    111c:	89 30       	cpi	r24, 0x09	; 9
    111e:	91 f5       	brne	.+100    	; 0x1184 <__stack+0xc85>
		{
			#ifdef ENABLE_RANDOM_MODE
			if (button1_is_down())
    1120:	1b 99       	sbic	0x03, 3	; 3
    1122:	22 c0       	rjmp	.+68     	; 0x1168 <__stack+0xc69>
			{
				display_second = (random() & 0x7F) % 60;
    1124:	0e 94 18 0a 	call	0x1430	; 0x1430 <random>
    1128:	8f 77       	andi	r24, 0x7F	; 127
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	6c e3       	ldi	r22, 0x3C	; 60
    112e:	66 2e       	mov	r6, r22
    1130:	71 2c       	mov	r7, r1
    1132:	b3 01       	movw	r22, r6
    1134:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    1138:	80 93 ad 01 	sts	0x01AD, r24
				display_minute = (random() & 0x7F) % 60;
    113c:	0e 94 18 0a 	call	0x1430	; 0x1430 <random>
    1140:	8f 77       	andi	r24, 0x7F	; 127
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	b3 01       	movw	r22, r6
    1146:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    114a:	80 93 b1 01 	sts	0x01B1, r24
				display_hour   = (random() & 0x7F) % 12;
    114e:	0e 94 18 0a 	call	0x1430	; 0x1430 <random>
    1152:	8f 77       	andi	r24, 0x7F	; 127
    1154:	90 70       	andi	r25, 0x00	; 0
    1156:	b2 01       	movw	r22, r4
    1158:	0e 94 3e 09 	call	0x127c	; 0x127c <__divmodhi4>
    115c:	80 93 ac 01 	sts	0x01AC, r24
    1160:	51 e2       	ldi	r21, 0x21	; 33
    1162:	5a 95       	dec	r21
    1164:	f1 f7       	brne	.-4      	; 0x1162 <__stack+0xc63>
    1166:	00 00       	nop
				debounce();
			}
			
			if (button2_is_down())
    1168:	19 99       	sbic	0x03, 1	; 3
    116a:	2b c0       	rjmp	.+86     	; 0x11c2 <__stack+0xcc3>
			#endif
			{
				display_second = -1;
    116c:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
    1170:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour   = -1;
    1174:	c0 93 ac 01 	sts	0x01AC, r28
				mode = MODE_SLEEPING;
    1178:	10 92 9f 01 	sts	0x019F, r1
				to_sleep = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 a0 01 	sts	0x01A0, r24
    1182:	8b ce       	rjmp	.-746    	; 0xe9a <__stack+0x99b>
				debounce();
			}
		}
		else if (mode == MODE_ALARMING)
    1184:	80 91 9f 01 	lds	r24, 0x019F
    1188:	8a 30       	cpi	r24, 0x0A	; 10
    118a:	d9 f4       	brne	.+54     	; 0x11c2 <__stack+0xcc3>
		{
			if (bit_is_set(cur_second, 0))
    118c:	80 91 a8 01 	lds	r24, 0x01A8
    1190:	80 ff       	sbrs	r24, 0
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__stack+0xca3>
			{
				display_second = -1;
    1194:	c0 93 ad 01 	sts	0x01AD, r28
				display_minute = -1;
    1198:	c0 93 b1 01 	sts	0x01B1, r28
				display_hour = -1;
    119c:	c0 93 ac 01 	sts	0x01AC, r28
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <__stack+0xcc3>
			}
			else
			{
				display_second = cur_second;
    11a2:	80 91 a8 01 	lds	r24, 0x01A8
    11a6:	80 93 ad 01 	sts	0x01AD, r24
				display_minute = cur_minute;
    11aa:	80 91 a9 01 	lds	r24, 0x01A9
    11ae:	80 93 b1 01 	sts	0x01B1, r24
				display_hour = cur_hour;
    11b2:	80 91 a7 01 	lds	r24, 0x01A7
    11b6:	80 93 ac 01 	sts	0x01AC, r24
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <__stack+0xcc3>
			}
			else
			{
				// show a nice exit animation
				
				timeout_cnt = 0; // no timeout during animation
    11bc:	88 24       	eor	r8, r8
    11be:	99 24       	eor	r9, r9
    11c0:	54 01       	movw	r10, r8
				display_minute = cur_minute;
				display_hour = cur_hour;
			}
		}
		
		if (to_sleep)
    11c2:	80 91 a0 01 	lds	r24, 0x01A0
    11c6:	88 23       	and	r24, r24
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__stack+0xccd>
    11ca:	56 ca       	rjmp	.-2900   	; 0x678 <__stack+0x179>
		{
			// nothing to do, disable LEDs and go to sleep
			display_second = -1;
    11cc:	c0 93 ad 01 	sts	0x01AD, r28
			display_minute = -1;
    11d0:	c0 93 b1 01 	sts	0x01B1, r28
			display_hour = -1;
    11d4:	c0 93 ac 01 	sts	0x01AC, r28
			mode = MODE_SLEEPING;
    11d8:	10 92 9f 01 	sts	0x019F, r1
			
			// save data if required
			if (eeprom_is_dirty)
    11dc:	dd 23       	and	r29, r29
    11de:	21 f1       	breq	.+72     	; 0x1228 <__stack+0xd29>
			{
				eeprom_update_byte(0, cur_second);
    11e0:	60 91 a8 01 	lds	r22, 0x01A8
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 30 0a 	call	0x1460	; 0x1460 <__eeupd_byte_m165pa>
				eeprom_update_byte(1, cur_minute);
    11ec:	60 91 a9 01 	lds	r22, 0x01A9
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 30 0a 	call	0x1460	; 0x1460 <__eeupd_byte_m165pa>
				eeprom_update_byte(2, cur_hour);
    11f8:	60 91 a7 01 	lds	r22, 0x01A7
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 30 0a 	call	0x1460	; 0x1460 <__eeupd_byte_m165pa>
				eeprom_update_byte(3, alarm_minute);
    1204:	60 91 aa 01 	lds	r22, 0x01AA
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 30 0a 	call	0x1460	; 0x1460 <__eeupd_byte_m165pa>
				eeprom_update_byte(4, alarm_hour);
    1210:	60 91 a4 01 	lds	r22, 0x01A4
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 30 0a 	call	0x1460	; 0x1460 <__eeupd_byte_m165pa>
				eeprom_update_byte(5, alarm_enabled);
    121c:	60 91 a5 01 	lds	r22, 0x01A5
    1220:	85 e0       	ldi	r24, 0x05	; 5
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 30 0a 	call	0x1460	; 0x1460 <__eeupd_byte_m165pa>
				
				eeprom_is_dirty = 0;
			}
			
			if (alarm_active == 0)
    1228:	80 91 b0 01 	lds	r24, 0x01B0
    122c:	88 23       	and	r24, r24
    122e:	09 f0       	breq	.+2      	; 0x1232 <__stack+0xd33>
    1230:	22 ca       	rjmp	.-3004   	; 0x676 <__stack+0x177>
			{
				TIMSK0 = 0; // disable interrupt to save power
    1232:	10 92 6e 00 	sts	0x006E, r1
				sleep_enable(); // SMCR |= _BV(SE); // enable sleep
    1236:	83 b7       	in	r24, 0x33	; 51
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	83 bf       	out	0x33, r24	; 51
				sleep_cpu();
    123c:	88 95       	sleep
				sleep_disable(); // SMCR &= ~_BV(SE); // disable sleep, prevent accidental sleep
    123e:	83 b7       	in	r24, 0x33	; 51
    1240:	8e 7f       	andi	r24, 0xFE	; 254
    1242:	83 bf       	out	0x33, r24	; 51
				TIMSK0 = _BV(TOIE0) | _BV(OCIE0A); // re-enable interrupt
    1244:	00 93 6e 00 	sts	0x006E, r16
    1248:	16 ca       	rjmp	.-3028   	; 0x676 <__stack+0x177>

0000124a <__udivmodqi4>:
    124a:	99 1b       	sub	r25, r25
    124c:	79 e0       	ldi	r23, 0x09	; 9
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__udivmodqi4_ep>

00001250 <__udivmodqi4_loop>:
    1250:	99 1f       	adc	r25, r25
    1252:	96 17       	cp	r25, r22
    1254:	08 f0       	brcs	.+2      	; 0x1258 <__udivmodqi4_ep>
    1256:	96 1b       	sub	r25, r22

00001258 <__udivmodqi4_ep>:
    1258:	88 1f       	adc	r24, r24
    125a:	7a 95       	dec	r23
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__udivmodqi4_loop>
    125e:	80 95       	com	r24
    1260:	08 95       	ret

00001262 <__divmodqi4>:
    1262:	87 fb       	bst	r24, 7
    1264:	08 2e       	mov	r0, r24
    1266:	06 26       	eor	r0, r22
    1268:	87 fd       	sbrc	r24, 7
    126a:	81 95       	neg	r24
    126c:	67 fd       	sbrc	r22, 7
    126e:	61 95       	neg	r22
    1270:	ec df       	rcall	.-40     	; 0x124a <__udivmodqi4>
    1272:	0e f4       	brtc	.+2      	; 0x1276 <__divmodqi4_1>
    1274:	91 95       	neg	r25

00001276 <__divmodqi4_1>:
    1276:	07 fc       	sbrc	r0, 7
    1278:	81 95       	neg	r24

0000127a <__divmodqi4_exit>:
    127a:	08 95       	ret

0000127c <__divmodhi4>:
    127c:	97 fb       	bst	r25, 7
    127e:	09 2e       	mov	r0, r25
    1280:	07 26       	eor	r0, r23
    1282:	0a d0       	rcall	.+20     	; 0x1298 <__divmodhi4_neg1>
    1284:	77 fd       	sbrc	r23, 7
    1286:	04 d0       	rcall	.+8      	; 0x1290 <__divmodhi4_neg2>
    1288:	0c d0       	rcall	.+24     	; 0x12a2 <__udivmodhi4>
    128a:	06 d0       	rcall	.+12     	; 0x1298 <__divmodhi4_neg1>
    128c:	00 20       	and	r0, r0
    128e:	1a f4       	brpl	.+6      	; 0x1296 <__divmodhi4_exit>

00001290 <__divmodhi4_neg2>:
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255

00001296 <__divmodhi4_exit>:
    1296:	08 95       	ret

00001298 <__divmodhi4_neg1>:
    1298:	f6 f7       	brtc	.-4      	; 0x1296 <__divmodhi4_exit>
    129a:	90 95       	com	r25
    129c:	81 95       	neg	r24
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	08 95       	ret

000012a2 <__udivmodhi4>:
    12a2:	aa 1b       	sub	r26, r26
    12a4:	bb 1b       	sub	r27, r27
    12a6:	51 e1       	ldi	r21, 0x11	; 17
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <__udivmodhi4_ep>

000012aa <__udivmodhi4_loop>:
    12aa:	aa 1f       	adc	r26, r26
    12ac:	bb 1f       	adc	r27, r27
    12ae:	a6 17       	cp	r26, r22
    12b0:	b7 07       	cpc	r27, r23
    12b2:	10 f0       	brcs	.+4      	; 0x12b8 <__udivmodhi4_ep>
    12b4:	a6 1b       	sub	r26, r22
    12b6:	b7 0b       	sbc	r27, r23

000012b8 <__udivmodhi4_ep>:
    12b8:	88 1f       	adc	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	5a 95       	dec	r21
    12be:	a9 f7       	brne	.-22     	; 0x12aa <__udivmodhi4_loop>
    12c0:	80 95       	com	r24
    12c2:	90 95       	com	r25
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	08 95       	ret

000012ca <do_rand>:
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
    12e0:	88 81       	ld	r24, Y
    12e2:	99 81       	ldd	r25, Y+1	; 0x01
    12e4:	aa 81       	ldd	r26, Y+2	; 0x02
    12e6:	bb 81       	ldd	r27, Y+3	; 0x03
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	a1 05       	cpc	r26, r1
    12ec:	b1 05       	cpc	r27, r1
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <do_rand+0x2e>
    12f0:	84 e2       	ldi	r24, 0x24	; 36
    12f2:	99 ed       	ldi	r25, 0xD9	; 217
    12f4:	ab e5       	ldi	r26, 0x5B	; 91
    12f6:	b7 e0       	ldi	r27, 0x07	; 7
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	2d e1       	ldi	r18, 0x1D	; 29
    12fe:	33 ef       	ldi	r19, 0xF3	; 243
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__divmodsi4>
    1308:	49 01       	movw	r8, r18
    130a:	5a 01       	movw	r10, r20
    130c:	27 ea       	ldi	r18, 0xA7	; 167
    130e:	31 e4       	ldi	r19, 0x41	; 65
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsi3>
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
    131c:	c5 01       	movw	r24, r10
    131e:	b4 01       	movw	r22, r8
    1320:	2c ee       	ldi	r18, 0xEC	; 236
    1322:	34 ef       	ldi	r19, 0xF4	; 244
    1324:	4f ef       	ldi	r20, 0xFF	; 255
    1326:	5f ef       	ldi	r21, 0xFF	; 255
    1328:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsi3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	c8 0e       	add	r12, r24
    1332:	d9 1e       	adc	r13, r25
    1334:	ea 1e       	adc	r14, r26
    1336:	fb 1e       	adc	r15, r27
    1338:	f7 fe       	sbrs	r15, 7
    133a:	08 c0       	rjmp	.+16     	; 0x134c <do_rand+0x82>
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	af ef       	ldi	r26, 0xFF	; 255
    1342:	bf e7       	ldi	r27, 0x7F	; 127
    1344:	c8 0e       	add	r12, r24
    1346:	d9 1e       	adc	r13, r25
    1348:	ea 1e       	adc	r14, r26
    134a:	fb 1e       	adc	r15, r27
    134c:	c8 82       	st	Y, r12
    134e:	d9 82       	std	Y+1, r13	; 0x01
    1350:	ea 82       	std	Y+2, r14	; 0x02
    1352:	fb 82       	std	Y+3, r15	; 0x03
    1354:	c6 01       	movw	r24, r12
    1356:	9f 77       	andi	r25, 0x7F	; 127
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	08 95       	ret

0000136e <rand_r>:
    136e:	0e 94 65 09 	call	0x12ca	; 0x12ca <do_rand>
    1372:	08 95       	ret

00001374 <rand>:
    1374:	86 e9       	ldi	r24, 0x96	; 150
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 65 09 	call	0x12ca	; 0x12ca <do_rand>
    137c:	08 95       	ret

0000137e <srand>:
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	80 93 96 01 	sts	0x0196, r24
    1386:	90 93 97 01 	sts	0x0197, r25
    138a:	a0 93 98 01 	sts	0x0198, r26
    138e:	b0 93 99 01 	sts	0x0199, r27
    1392:	08 95       	ret

00001394 <do_random>:
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e0 ed       	ldi	r30, 0xD0	; 208
    139a:	f9 e0       	ldi	r31, 0x09	; 9
    139c:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__prologue_saves__+0xc>
    13a0:	ec 01       	movw	r28, r24
    13a2:	88 81       	ld	r24, Y
    13a4:	99 81       	ldd	r25, Y+1	; 0x01
    13a6:	aa 81       	ldd	r26, Y+2	; 0x02
    13a8:	bb 81       	ldd	r27, Y+3	; 0x03
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	a1 05       	cpc	r26, r1
    13ae:	b1 05       	cpc	r27, r1
    13b0:	21 f4       	brne	.+8      	; 0x13ba <do_random+0x26>
    13b2:	84 e2       	ldi	r24, 0x24	; 36
    13b4:	99 ed       	ldi	r25, 0xD9	; 217
    13b6:	ab e5       	ldi	r26, 0x5B	; 91
    13b8:	b7 e0       	ldi	r27, 0x07	; 7
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	2d e1       	ldi	r18, 0x1D	; 29
    13c0:	33 ef       	ldi	r19, 0xF3	; 243
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__divmodsi4>
    13ca:	49 01       	movw	r8, r18
    13cc:	5a 01       	movw	r10, r20
    13ce:	27 ea       	ldi	r18, 0xA7	; 167
    13d0:	31 e4       	ldi	r19, 0x41	; 65
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsi3>
    13da:	6b 01       	movw	r12, r22
    13dc:	7c 01       	movw	r14, r24
    13de:	c5 01       	movw	r24, r10
    13e0:	b4 01       	movw	r22, r8
    13e2:	2c ee       	ldi	r18, 0xEC	; 236
    13e4:	34 ef       	ldi	r19, 0xF4	; 244
    13e6:	4f ef       	ldi	r20, 0xFF	; 255
    13e8:	5f ef       	ldi	r21, 0xFF	; 255
    13ea:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsi3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	c8 0e       	add	r12, r24
    13f4:	d9 1e       	adc	r13, r25
    13f6:	ea 1e       	adc	r14, r26
    13f8:	fb 1e       	adc	r15, r27
    13fa:	f7 fe       	sbrs	r15, 7
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <do_random+0x7a>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	af ef       	ldi	r26, 0xFF	; 255
    1404:	bf e7       	ldi	r27, 0x7F	; 127
    1406:	c8 0e       	add	r12, r24
    1408:	d9 1e       	adc	r13, r25
    140a:	ea 1e       	adc	r14, r26
    140c:	fb 1e       	adc	r15, r27
    140e:	c8 82       	st	Y, r12
    1410:	d9 82       	std	Y+1, r13	; 0x01
    1412:	ea 82       	std	Y+2, r14	; 0x02
    1414:	fb 82       	std	Y+3, r15	; 0x03
    1416:	97 01       	movw	r18, r14
    1418:	86 01       	movw	r16, r12
    141a:	3f 77       	andi	r19, 0x7F	; 127
    141c:	b8 01       	movw	r22, r16
    141e:	c9 01       	movw	r24, r18
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	ec e0       	ldi	r30, 0x0C	; 12
    1426:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__epilogue_restores__+0xc>

0000142a <random_r>:
    142a:	0e 94 ca 09 	call	0x1394	; 0x1394 <do_random>
    142e:	08 95       	ret

00001430 <random>:
    1430:	8a e9       	ldi	r24, 0x9A	; 154
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	0e 94 ca 09 	call	0x1394	; 0x1394 <do_random>
    1438:	08 95       	ret

0000143a <srandom>:
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	80 93 9a 01 	sts	0x019A, r24
    1442:	90 93 9b 01 	sts	0x019B, r25
    1446:	a0 93 9c 01 	sts	0x019C, r26
    144a:	b0 93 9d 01 	sts	0x019D, r27
    144e:	08 95       	ret

00001450 <__eerd_byte_m165pa>:
    1450:	f9 99       	sbic	0x1f, 1	; 31
    1452:	fe cf       	rjmp	.-4      	; 0x1450 <__eerd_byte_m165pa>
    1454:	92 bd       	out	0x22, r25	; 34
    1456:	81 bd       	out	0x21, r24	; 33
    1458:	f8 9a       	sbi	0x1f, 0	; 31
    145a:	99 27       	eor	r25, r25
    145c:	80 b5       	in	r24, 0x20	; 32
    145e:	08 95       	ret

00001460 <__eeupd_byte_m165pa>:
    1460:	26 2f       	mov	r18, r22

00001462 <__eeupd_r18_m165pa>:
    1462:	f9 99       	sbic	0x1f, 1	; 31
    1464:	fe cf       	rjmp	.-4      	; 0x1462 <__eeupd_r18_m165pa>
    1466:	92 bd       	out	0x22, r25	; 34
    1468:	81 bd       	out	0x21, r24	; 33
    146a:	f8 9a       	sbi	0x1f, 0	; 31
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	00 b4       	in	r0, 0x20	; 32
    1470:	02 16       	cp	r0, r18
    1472:	31 f0       	breq	.+12     	; 0x1480 <__eeupd_r18_m165pa+0x1e>
    1474:	20 bd       	out	0x20, r18	; 32
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	fa 9a       	sbi	0x1f, 2	; 31
    147c:	f9 9a       	sbi	0x1f, 1	; 31
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	08 95       	ret

00001482 <__mulsi3>:
    1482:	62 9f       	mul	r22, r18
    1484:	d0 01       	movw	r26, r0
    1486:	73 9f       	mul	r23, r19
    1488:	f0 01       	movw	r30, r0
    148a:	82 9f       	mul	r24, r18
    148c:	e0 0d       	add	r30, r0
    148e:	f1 1d       	adc	r31, r1
    1490:	64 9f       	mul	r22, r20
    1492:	e0 0d       	add	r30, r0
    1494:	f1 1d       	adc	r31, r1
    1496:	92 9f       	mul	r25, r18
    1498:	f0 0d       	add	r31, r0
    149a:	83 9f       	mul	r24, r19
    149c:	f0 0d       	add	r31, r0
    149e:	74 9f       	mul	r23, r20
    14a0:	f0 0d       	add	r31, r0
    14a2:	65 9f       	mul	r22, r21
    14a4:	f0 0d       	add	r31, r0
    14a6:	99 27       	eor	r25, r25
    14a8:	72 9f       	mul	r23, r18
    14aa:	b0 0d       	add	r27, r0
    14ac:	e1 1d       	adc	r30, r1
    14ae:	f9 1f       	adc	r31, r25
    14b0:	63 9f       	mul	r22, r19
    14b2:	b0 0d       	add	r27, r0
    14b4:	e1 1d       	adc	r30, r1
    14b6:	f9 1f       	adc	r31, r25
    14b8:	bd 01       	movw	r22, r26
    14ba:	cf 01       	movw	r24, r30
    14bc:	11 24       	eor	r1, r1
    14be:	08 95       	ret

000014c0 <__divmodsi4>:
    14c0:	97 fb       	bst	r25, 7
    14c2:	09 2e       	mov	r0, r25
    14c4:	05 26       	eor	r0, r21
    14c6:	0e d0       	rcall	.+28     	; 0x14e4 <__divmodsi4_neg1>
    14c8:	57 fd       	sbrc	r21, 7
    14ca:	04 d0       	rcall	.+8      	; 0x14d4 <__divmodsi4_neg2>
    14cc:	4b d0       	rcall	.+150    	; 0x1564 <__udivmodsi4>
    14ce:	0a d0       	rcall	.+20     	; 0x14e4 <__divmodsi4_neg1>
    14d0:	00 1c       	adc	r0, r0
    14d2:	38 f4       	brcc	.+14     	; 0x14e2 <__divmodsi4_exit>

000014d4 <__divmodsi4_neg2>:
    14d4:	50 95       	com	r21
    14d6:	40 95       	com	r20
    14d8:	30 95       	com	r19
    14da:	21 95       	neg	r18
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	4f 4f       	sbci	r20, 0xFF	; 255
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255

000014e2 <__divmodsi4_exit>:
    14e2:	08 95       	ret

000014e4 <__divmodsi4_neg1>:
    14e4:	f6 f7       	brtc	.-4      	; 0x14e2 <__divmodsi4_exit>
    14e6:	90 95       	com	r25
    14e8:	80 95       	com	r24
    14ea:	70 95       	com	r23
    14ec:	61 95       	neg	r22
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	08 95       	ret

000014f6 <__prologue_saves__>:
    14f6:	2f 92       	push	r2
    14f8:	3f 92       	push	r3
    14fa:	4f 92       	push	r4
    14fc:	5f 92       	push	r5
    14fe:	6f 92       	push	r6
    1500:	7f 92       	push	r7
    1502:	8f 92       	push	r8
    1504:	9f 92       	push	r9
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	ca 1b       	sub	r28, r26
    1520:	db 0b       	sbc	r29, r27
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	09 94       	ijmp

0000152e <__epilogue_restores__>:
    152e:	2a 88       	ldd	r2, Y+18	; 0x12
    1530:	39 88       	ldd	r3, Y+17	; 0x11
    1532:	48 88       	ldd	r4, Y+16	; 0x10
    1534:	5f 84       	ldd	r5, Y+15	; 0x0f
    1536:	6e 84       	ldd	r6, Y+14	; 0x0e
    1538:	7d 84       	ldd	r7, Y+13	; 0x0d
    153a:	8c 84       	ldd	r8, Y+12	; 0x0c
    153c:	9b 84       	ldd	r9, Y+11	; 0x0b
    153e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1540:	b9 84       	ldd	r11, Y+9	; 0x09
    1542:	c8 84       	ldd	r12, Y+8	; 0x08
    1544:	df 80       	ldd	r13, Y+7	; 0x07
    1546:	ee 80       	ldd	r14, Y+6	; 0x06
    1548:	fd 80       	ldd	r15, Y+5	; 0x05
    154a:	0c 81       	ldd	r16, Y+4	; 0x04
    154c:	1b 81       	ldd	r17, Y+3	; 0x03
    154e:	aa 81       	ldd	r26, Y+2	; 0x02
    1550:	b9 81       	ldd	r27, Y+1	; 0x01
    1552:	ce 0f       	add	r28, r30
    1554:	d1 1d       	adc	r29, r1
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	ed 01       	movw	r28, r26
    1562:	08 95       	ret

00001564 <__udivmodsi4>:
    1564:	a1 e2       	ldi	r26, 0x21	; 33
    1566:	1a 2e       	mov	r1, r26
    1568:	aa 1b       	sub	r26, r26
    156a:	bb 1b       	sub	r27, r27
    156c:	fd 01       	movw	r30, r26
    156e:	0d c0       	rjmp	.+26     	; 0x158a <__udivmodsi4_ep>

00001570 <__udivmodsi4_loop>:
    1570:	aa 1f       	adc	r26, r26
    1572:	bb 1f       	adc	r27, r27
    1574:	ee 1f       	adc	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	a2 17       	cp	r26, r18
    157a:	b3 07       	cpc	r27, r19
    157c:	e4 07       	cpc	r30, r20
    157e:	f5 07       	cpc	r31, r21
    1580:	20 f0       	brcs	.+8      	; 0x158a <__udivmodsi4_ep>
    1582:	a2 1b       	sub	r26, r18
    1584:	b3 0b       	sbc	r27, r19
    1586:	e4 0b       	sbc	r30, r20
    1588:	f5 0b       	sbc	r31, r21

0000158a <__udivmodsi4_ep>:
    158a:	66 1f       	adc	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	88 1f       	adc	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	1a 94       	dec	r1
    1594:	69 f7       	brne	.-38     	; 0x1570 <__udivmodsi4_loop>
    1596:	60 95       	com	r22
    1598:	70 95       	com	r23
    159a:	80 95       	com	r24
    159c:	90 95       	com	r25
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	bd 01       	movw	r22, r26
    15a4:	cf 01       	movw	r24, r30
    15a6:	08 95       	ret

000015a8 <_exit>:
    15a8:	f8 94       	cli

000015aa <__stop_program>:
    15aa:	ff cf       	rjmp	.-2      	; 0x15aa <__stop_program>
